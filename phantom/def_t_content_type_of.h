/*
    This file is part of PHANTOM
         P reprocessed 
         H igh-level 
         A llocator 
         N ested state-machines and 
         T emplate 
         O riented 
         M eta-programming

    For the latest infos and sources, see http://code.google.com/p/phantom-cpp

    Copyright (C) 2008-2011 by Vivien MILLET

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE
*/
/*

template<typename _T0, template<typename _T0> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0>* p)
{
    return _TTy<_T0>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , template<typename _T0
            , typename _T1> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1>* p)
{
    return _TTy<_T0,_T1>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , template<typename _T0
            , typename _T1
            , typename _T2> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2>* p)
{
    return _TTy<_T0,_T1,_T2>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3>* p)
{
    return _TTy<_T0,_T1,_T2,_T3>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , typename _T4
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3
            , typename _T4> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3,_T4>* p)
{
    return _TTy<_T0,_T1,_T2,_T3,_T4>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , typename _T4
    , typename _T5
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3
            , typename _T4
            , typename _T5> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3,_T4,_T5>* p)
{
    return _TTy<_T0,_T1,_T2,_T3,_T4,_T5>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , typename _T4
    , typename _T5
    , typename _T6
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3
            , typename _T4
            , typename _T5
            , typename _T6> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6>* p)
{
    return _TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , typename _T4
    , typename _T5
    , typename _T6
    , typename _T7
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3
            , typename _T4
            , typename _T5
            , typename _T6
            , typename _T7> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6,_T7>* p)
{
    return _TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6,_T7>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , typename _T4
    , typename _T5
    , typename _T6
    , typename _T7
    , typename _T8
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3
            , typename _T4
            , typename _T5
            , typename _T6
            , typename _T7
            , typename _T8
                    > class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6,_T7,_T8>* p)
{
    return _TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6,_T7,_T8>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}

template<typename _T0
    , typename _T1
    , typename _T2
    , typename _T3
    , typename _T4
    , typename _T5
    , typename _T6
    , typename _T7
    , typename _T8
    , typename _T9
    , template<typename _T0
            , typename _T1
            , typename _T2
            , typename _T3
            , typename _T4
            , typename _T5
            , typename _T6
            , typename _T7
            , typename _T8
            , typename _T9> class _TTy>
    o_forceinline static phantom::reflection::Type*    contentTypeOf(_TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6,_T7,_T8,_T9>* p)
{
    return _TTy<_T0,_T1,_T2,_T3,_T4,_T5,_T6,_T7,_T8,_T9>::Reflect(); // Default for template is to call the Reflect() function generated by reflection 
}*/