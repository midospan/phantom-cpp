// $Id: scanner.h 17 2007-08-19 18:51:39Z tb $

#ifndef SYNTAX_HIGHLIGHTING_SCANNER_H
#define SYNTAX_HIGHLIGHTING_SCANNER_H

// Flex expects the signature of yylex to be defined in the macro YY_DECL, and
// the C++ parser expects it to be declared. We can factor both as follows.

#ifndef YY_DECL

#define	YY_DECL						\
    bool				\
    phantom::CxxLexer::_lex(				\
	phantom::CxxParser::semantic_type* yylval,		\
    phantom::CxxParser::location_type* yylloc		\
    )
#endif

#ifndef __FLEX_LEXER_H
#define yyFlexLexer CxxFlexLexer
#include "FlexLexer.h"
#undef yyFlexLexer
#endif

#include "CxxToken.h"
#include "CxxParser.hxx"

namespace phantom {

class CxxSearchContext;
class CxxDriver;

/** CxxLexer is a derived class to add some extra function to the scanner
 * class. Flex itself creates a class named yyFlexLexer, which is renamed using
 * macros to ExampleFlexLexer. However we change the context of the generated
 * yylex() function to be contained within the CxxLexer class. This is required
 * because the yylex() defined in ExampleFlexLexer has no parameters. */
class CxxLexer : public CxxFlexLexer
{
public:
    /** Create a new scanner object. The streams arg_yyin and arg_yyout default
     * to cin and cout, but that assignment is only made when initializing in
     * yylex(). */
    CxxLexer(std::istream* arg_yyin = 0,
	    std::ostream* arg_yyout = 0);

    /** Required for virtual functions */
    virtual ~CxxLexer();

    /** This is the main lexing function. It is generated by flex according to
     * the macro declaration YY_DECL above. The generated bison parser then
     * calls this virtual function to fetch new tokens. */
    virtual int lex(
	CxxParser::semantic_type* yylval,
	CxxParser::location_type* yylloc
    );
    bool _lex(
    CxxParser::semantic_type* yylval,
    CxxParser::location_type* yylloc
    );

    string textAtLocation(const CxxParser::location_type& loc) const;

    void setYYChar(int* pyychar) {_yychar = pyychar; }

    void error(const char* );

    /** Enable debug output (via arg_yyout) if compiled into the scanner. */
    void set_debug(bool b);

    size_t bang_depth;
    size_t error_count;
    size_t marked_error_count;
    bool in_type1;
    bool show_marked;

    CxxToken** tokenBuffer;			// Allocated buffer
    size_t tokenReadIndex;	        // Read index
    size_t tokenSize;				// Allocate buffer size
    size_t tokenWriteIndex;	        // Write index
    int tokenMarkDepth;			    // Write index
    CxxToken* primed_tokens[3];	    // Restarting sequence
    CxxSearchContext* current_search_context;

    void*   _yylval;
    int*    _yychar;


    void advance_search();
    void end_search(CxxToken *aToken);
    YACC_MARK_TYPE mark();
    YACC_MARK_TYPE mark_type1();
    size_t nest() 
    {
        printf(__FUNCTION__"\n"); return 0;
    }

    void pop_bang(size_t bangValue);
    size_t push_bang();
    void remark(size_t anIndex);
    void remark_type1(size_t anIndex);
    void rewind_colon(size_t anIndex, const CxxToken *aToken);
    void start_search(bool enableType1);
    void template_test();
    void unmark(const CxxToken *aToken = 0);
    void unnest(size_t aNest) {}
    void token_put(CxxToken *aToken);
    void increment_error_count();

protected:
    CxxDriver* m_pDriver; 
};

} // namespace example

#endif // EXAMPLE_SCANNER_H
