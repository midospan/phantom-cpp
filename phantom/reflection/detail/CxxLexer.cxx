#line 2 "CxxLexer.cxx"

#line 4 "CxxLexer.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CxxFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Cxxalloc (yy_size_t  );
void *Cxxrealloc (void *,yy_size_t  );
void Cxxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 121
#define YY_END_OF_BUFFER 122
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1133] =
    {   0,
      122,  120,  121,  119,  120,  121,  118,  121,  120,  121,
        8,  120,  121,  120,  121,  120,  121,    5,  120,  121,
      120,  121,  120,  121,  120,  121,  120,  121,  120,  121,
      112,  120,  121,  112,  120,  121,  120,  121,  120,  121,
      120,  121,  120,  121,  115,  120,  121,  115,  120,  121,
      120,  121,  120,  121,  115,  120,  121,  115,  120,  121,
      115,  120,  121,  115,  120,  121,  115,  120,  121,  115,
      120,  121,  115,  120,  121,  115,  120,  121,  115,  120,
      121,  115,  120,  121,  115,  120,  121,  115,  120,  121,
      115,  120,  121,  115,  120,  121,  115,  120,  121,  115,

      120,  121,  115,  120,  121,  115,  120,  121,  115,  120,
      121,  115,  120,  121,  120,  121,  120,  121,  119,  120,
      121,    1,  118,  121,  120,  121,    8,  120,  121,    2,
      120,  121,  120,  121,  120,  121,    5,  120,  121,  120,
      121,  120,  121,  120,  121,  120,  121,  120,  121,  112,
      120,  121,  112,  120,  121,  120,  121,  120,  121,  120,
      121,  120,  121,  115,  120,  121,  115,  120,  121,  120,
      121,  120,  121,  115,  120,  121,  115,  120,  121,  115,
      120,  121,  115,  120,  121,  115,  120,  121,  115,  120,
      121,  115,  120,  121,  115,  120,  121,  115,  120,  121,

      115,  120,  121,  115,  120,  121,  115,  120,  121,  115,
      120,  121,  115,  120,  121,  115,  120,  121,  115,  120,
      121,  115,  120,  121,  115,  120,  121,  115,  120,  121,
      115,  120,  121,  120,  121,  119,   88,    8,    6,    7,
      102,   91,  104,    5,    3,    4,  100,   93,   98,   94,
       99,   96,   97,  110,  101,  110,  112,  113,   83,   85,
       89,   87,   90,   86,  115,    8,    5,  116,  116,  103,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,   33,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   46,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      105,   92,    1,  119,    2,   88,    8,    6,    7,    2,
      102,   91,  104,    5,    3,    4,  100,   93,   98,   94,
       99,   96,   97,  110,  101,  110,  112,  113,   83,   85,
       89,   87,   90,   86,  115,    8,    5,  116,  116,  103,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,   33,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   46,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      105,   92,   95,   84,  109,  111,  110,  114,  108,  107,
      106,  116,  116,  115,  115,   20,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   43,  115,  115,  115,  115,
      115,   48,  115,  115,  115,  115,  115,   52,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,   71,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,   95,
       84,  109,  111,  110,  114,  108,  107,  106,  116,  116,

      115,  115,   20,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   43,  115,  115,  115,  115,  115,   48,  115,
      115,  115,  115,  115,   52,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   71,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  110,  110,  116,    9,
      115,  115,   21,  115,   22,  115,  115,   24,  115,  115,
       26,  115,  115,  115,  115,  115,  115,  115,  115,   36,
      115,   37,  115,  115,  115,  115,  115,  115,  115,   45,

      115,  115,  115,   49,  115,   19,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   68,  115,  115,  115,   70,
      115,  115,  115,  115,  115,  115,   79,  115,  115,  115,
      115,  110,  110,  116,    9,  115,  115,   21,  115,   22,
      115,  115,   24,  115,  115,   26,  115,  115,  115,  115,
      115,  115,  115,  115,   36,  115,   37,  115,  115,  115,
      115,  115,  115,  115,   45,  115,  115,  115,   49,  115,
       19,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,

       68,  115,  115,  115,   70,  115,  115,  115,  115,  115,
      115,   79,  115,  115,  115,  115,   12,  115,   23,  115,
       25,  115,   27,  115,   28,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   41,  115,   42,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,   60,  115,  115,  115,  115,  115,   17,  115,  115,
      115,  115,  115,   69,  115,   18,  115,  115,  115,  115,
       75,  115,  115,   77,  115,  115,  115,  115,   82,  115,
       12,  115,   23,  115,   25,  115,   27,  115,   28,  115,
      115,  115,  115,  115,  115,  115,  115,  115,   41,  115,

       42,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   60,  115,  115,  115,  115,
      115,   17,  115,  115,  115,  115,  115,   69,  115,   18,
      115,  115,  115,  115,   75,  115,  115,   77,  115,  115,
      115,  115,   82,  115,  115,  117,  115,  115,  115,   32,
      115,   34,  115,  115,  115,   39,  115,   40,  115,   44,
      115,   11,  115,   47,  115,  115,  115,  115,  115,  115,
      115,   56,  115,  115,  115,   59,  115,   14,  115,   61,
      115,   62,  115,   13,  115,  115,   63,  115,   65,  115,
       66,  115,  115,  115,   73,  115,  115,  115,  115,  115,

      115,  115,  117,  115,  115,  115,   32,  115,   34,  115,
      115,  115,   39,  115,   40,  115,   44,  115,   11,  115,
       47,  115,  115,  115,  115,  115,  115,  115,   56,  115,
      115,  115,   59,  115,   14,  115,   61,  115,   62,  115,
       13,  115,  115,   63,  115,   65,  115,   66,  115,  115,
      115,   73,  115,  115,  115,  115,  115,  115,  115,  115,
       31,  115,  115,  115,   50,  115,  115,  115,   54,  115,
      115,  115,  115,  115,  115,  115,  115,  115,   72,  115,
      115,  115,   78,  115,  115,   81,  115,  115,  115,   31,
      115,  115,  115,   50,  115,  115,  115,   54,  115,  115,

      115,  115,  115,  115,  115,  115,  115,   72,  115,  115,
      115,   78,  115,  115,   81,  115,  115,   30,  115,  115,
       38,  115,  115,   53,  115,   10,  115,  115,   57,  115,
      115,  115,  115,  115,   67,  115,   74,  115,   76,  115,
       80,  115,  115,   30,  115,  115,   38,  115,  115,   53,
      115,   10,  115,  115,   57,  115,  115,  115,  115,  115,
       67,  115,   74,  115,   76,  115,   80,  115,  115,  115,
       51,  115,   55,  115,  115,  115,  115,   15,  115,  115,
      115,   51,  115,   55,  115,  115,  115,  115,   15,  115,
       29,  115,  115,  115,  115,  115,   29,  115,  115,  115,

      115,  115,  115,  115,  115,   64,  115,  115,  115,  115,
       64,  115,   35,  115,  115,   16,  115,   35,  115,  115,
       16,  115,  115,  115,  115,  115,  115,  115,   58,  115,
       58,  115
    } ;

static yyconst flex_int16_t yy_accept[909] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   16,
       18,   21,   23,   25,   27,   29,   31,   34,   37,   39,
       41,   43,   45,   48,   51,   53,   55,   58,   61,   64,
       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  109,  112,  115,  117,  119,  122,
      125,  127,  130,  133,  135,  137,  140,  142,  144,  146,
      148,  150,  153,  156,  158,  160,  162,  164,  167,  170,
      172,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  213,  216,  219,  222,  225,  228,
      231,  234,  236,  237,  238,  239,  240,  241,  242,  243,

      244,  245,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  254,  255,  256,  257,  258,  259,  259,  259,  260,
      261,  262,  263,  264,  265,  266,  266,  267,  268,  269,
      270,  270,  270,  270,  271,  272,  273,  274,  275,  276,
      277,  278,  279,  280,  281,  282,  284,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  295,  296,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
      309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
      319,  320,  321,  322,  323,  323,  324,  325,  326,  327,
      328,  329,  330,  331,  332,  333,  334,  335,  336,  337,

      338,  339,  340,  341,  342,  343,  344,  344,  345,  346,
      347,  348,  349,  349,  349,  350,  351,  352,  353,  354,
      355,  356,  356,  357,  358,  359,  360,  360,  360,  360,
      361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
      371,  372,  374,  375,  376,  377,  378,  379,  380,  381,
      382,  383,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
      413,  414,  415,  415,  416,  417,  418,  418,  419,  420,
      421,  422,  422,  422,  423,  423,  423,  424,  425,  426,

      428,  429,  430,  431,  432,  433,  434,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  444,  445,  446,  448,
      449,  450,  451,  452,  454,  455,  456,  457,  458,  460,
      461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
      471,  472,  473,  474,  475,  476,  477,  478,  479,  481,
      482,  483,  484,  485,  486,  487,  488,  489,  490,  491,
      492,  492,  493,  494,  495,  495,  496,  497,  498,  499,
      499,  499,  500,  500,  500,  501,  502,  503,  505,  506,
      507,  508,  509,  510,  511,  512,  513,  514,  515,  516,
      517,  518,  519,  520,  521,  522,  523,  525,  526,  527,

      528,  529,  531,  532,  533,  534,  535,  537,  538,  539,
      540,  541,  542,  543,  544,  545,  546,  547,  548,  549,
      550,  551,  552,  553,  554,  555,  556,  558,  559,  560,
      561,  562,  563,  564,  565,  566,  567,  567,  568,  568,
      569,  569,  569,  570,  570,  570,  572,  573,  575,  577,
      578,  580,  581,  583,  584,  585,  586,  587,  588,  589,
      590,  592,  594,  595,  596,  597,  598,  599,  600,  602,
      603,  604,  606,  608,  609,  610,  611,  612,  613,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      625,  626,  628,  629,  630,  632,  633,  634,  635,  636,

      637,  639,  640,  641,  642,  642,  643,  643,  644,  644,
      644,  645,  645,  645,  647,  648,  650,  652,  653,  655,
      656,  658,  659,  660,  661,  662,  663,  664,  665,  667,
      669,  670,  671,  672,  673,  674,  675,  677,  678,  679,
      681,  683,  684,  685,  686,  687,  688,  689,  690,  691,
      692,  693,  694,  695,  696,  697,  698,  699,  700,  701,
      703,  704,  705,  707,  708,  709,  710,  711,  712,  714,
      715,  716,  717,  717,  717,  717,  717,  719,  721,  723,
      725,  727,  728,  729,  730,  731,  732,  733,  734,  735,
      737,  739,  740,  741,  742,  743,  744,  745,  746,  747,

      748,  749,  750,  751,  752,  754,  755,  756,  757,  758,
      760,  761,  762,  763,  764,  766,  768,  769,  770,  771,
      773,  774,  776,  777,  778,  779,  781,  781,  781,  781,
      781,  783,  785,  787,  789,  791,  792,  793,  794,  795,
      796,  797,  798,  799,  801,  803,  804,  805,  806,  807,
      808,  809,  810,  811,  812,  813,  814,  815,  816,  818,
      819,  820,  821,  822,  824,  825,  826,  827,  828,  830,
      832,  833,  834,  835,  837,  838,  840,  841,  842,  843,
      845,  845,  845,  845,  847,  848,  849,  850,  852,  854,
      855,  856,  858,  860,  862,  864,  866,  867,  868,  869,

      870,  871,  872,  874,  875,  876,  878,  880,  882,  884,
      886,  887,  889,  891,  893,  894,  895,  897,  898,  899,
      900,  901,  902,  902,  902,  902,  904,  905,  906,  907,
      909,  911,  912,  913,  915,  917,  919,  921,  923,  924,
      925,  926,  927,  928,  929,  931,  932,  933,  935,  937,
      939,  941,  943,  944,  946,  948,  950,  951,  952,  954,
      955,  956,  957,  958,  959,  959,  959,  960,  961,  963,
      964,  965,  967,  968,  969,  971,  972,  973,  974,  975,
      976,  977,  978,  979,  981,  982,  983,  985,  986,  988,
      988,  988,  989,  990,  992,  993,  994,  996,  997,  998,

     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010,
     1011, 1012, 1014, 1015, 1017, 1017, 1017, 1018, 1020, 1021,
     1023, 1024, 1026, 1028, 1029, 1031, 1032, 1033, 1034, 1035,
     1037, 1039, 1041, 1043, 1043, 1043, 1044, 1046, 1047, 1049,
     1050, 1052, 1054, 1055, 1057, 1058, 1059, 1060, 1061, 1063,
     1065, 1067, 1069, 1069, 1069, 1070, 1071, 1073, 1075, 1076,
     1077, 1078, 1080, 1080, 1080, 1081, 1082, 1084, 1086, 1087,
     1088, 1089, 1091, 1091, 1093, 1094, 1095, 1096, 1097, 1097,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109,
     1110, 1111, 1113, 1115, 1116, 1118, 1120, 1121, 1123, 1124,

     1125, 1126, 1127, 1128, 1129, 1131, 1133, 1133
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    1,   19,
       20,   21,   22,    1,   23,   23,   23,   23,   24,   23,
       25,   25,   25,   25,   25,   26,   25,   25,   25,   25,
       25,   25,   25,   25,   27,   25,   25,   28,   25,   25,
        1,   29,    1,   30,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   25,   41,   42,   43,   44,
       45,   46,   25,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    1,   56,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    4,    4,    4,    1,
        4,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[939] =
    {   0,
        0,   56, 1853, 1854, 1850, 1854, 1831,  108, 1830,  106,
      106, 1829,  105,  107,  107, 1828,  116,  123, 1829,  126,
     1826,  127, 1816,  125,  165, 1824,  122,  123,  112,  143,
      132,  147,  161,  133,  167,  134,  184,  190,  137,  178,
      131,  192,  188,  201,  207,  204,  203, 1840,  248, 1854,
      181,  243, 1839,  236,  250,  252,  237,  257,  259,  272,
      263,  287,  281,  260,  273,  266,  296,  340,  190,  394,
      271, 1810,  270,  111,  287,  285,  280,  366, 1795,  291,
     1794,  259,  269, 1792,   71, 1801,  380,  368,  262,  291,
      366,  398, 1834, 1854,  200, 1854,    0, 1854, 1854, 1854,

      405, 1854,    0, 1854, 1854, 1854, 1854, 1854, 1825, 1854,
     1821,  433, 1854,  436,  448, 1807, 1806,    0, 1854, 1811,
     1854, 1854, 1854, 1810, 1800,  385,  401,  408, 1854,  249,
        0,    0,    0, 1854,  298,  399,  282,  407,  395,  442,
      437,  426,  447,  438,  451,  439,  448,  452,  454,  461,
      404,  458,  455,  465,  462, 1799,  466,  467,  469,  468,
      470,  294,  472,  479,  485,  489,  491,  492,  494,  477,
      504,  499,  505,  506,  509,  497,  516,  515,  513,  525,
      518,  521, 1854, 1854, 1824, 1854,  566, 1823, 1822,  568,
     1821, 1820, 1819, 1818, 1817, 1816,  549, 1815, 1814, 1813,

     1812, 1811, 1810, 1809,  567, 1808,  563,  572, 1807,  576,
      601,  559,  577,  626, 1806,  579, 1805, 1804, 1803,  581,
        0,  580,  616,  602, 1802,  607,  649,  672,  695, 1801,
     1763, 1762, 1758, 1751, 1754, 1762,  546, 1765, 1764, 1751,
      544, 1744, 1749, 1744, 1741,  586, 1748, 1744, 1741, 1747,
     1737,    0, 1739,  584, 1740, 1734, 1733, 1738, 1728, 1743,
      575, 1745,  598, 1732,  596, 1726,  592, 1735, 1731,  597,
      620, 1727,  600, 1732, 1724,  613, 1731, 1729, 1765, 1764,
     1854, 1854,  682, 1854, 1854,  698,  725, 1854,    0, 1854,
     1854,    0,    0,  641,    0,    0,    0,  238,  639, 1737,

      545,  625,  646,  640,  687,  673,  577,  696,  648,  697,
      710,  671,  717,  709,  718,  719,  720,  722, 1736,  721,
      672,  727,  650, 1735,  126,  729,  730,  735, 1734,  736,
      737,  738,  740,  741,  745,  744,  746,  747,  749,  748,
      750,  751,  757,  761,  763,  767,  768,  769, 1733,  774,
      771,  775,  779,  780,  784,  785,  789,  791, 1758, 1757,
      819, 1756, 1755,  822,  838, 1754,    0, 1753, 1752,  845,
      868,  829,  891,  914,  937, 1719, 1721,    0, 1707, 1709,
     1718, 1713, 1714, 1700, 1698,  643, 1713, 1708, 1710, 1710,
     1705, 1697,  782, 1703, 1690, 1705,    0, 1700, 1690, 1689,

     1693,    0, 1694, 1699, 1698, 1693,    0, 1681, 1676,  794,
     1684, 1685, 1680, 1673, 1675, 1677, 1684, 1672, 1669, 1667,
     1667, 1669, 1666, 1668, 1678, 1675,    0, 1674, 1664, 1668,
     1663, 1657, 1670, 1672, 1671, 1660,  848,  872,  855,  895,
        0,    0, 1854,    0,    0, 1672,  799, 1671, 1670,  845,
     1669,  813, 1668,  827,  844,  893,  847,  867,  913,  870,
     1667, 1666,  905,  888,  889,  927,  890,  822, 1665,  911,
      915, 1664, 1663,  861,  914,  935,  936,  946,  947,  937,
      949,  950,  951,  952,  955,  912,  956,  960,  959,  973,
      963, 1662,  957,  965, 1661,  975,  974,  979,  982,  966,

     1660,  983,  984,  985, 1019, 1022, 1025, 1030, 1053, 1076,
     1685, 1099, 1122,    0, 1639,    0,    0, 1645,    0, 1646,
        0, 1636, 1634, 1642, 1631, 1631, 1637, 1635,    0,    0,
     1637, 1629, 1628, 1638, 1624, 1628,    0, 1624, 1626,    0,
        0, 1636, 1620, 1635, 1634, 1629, 1628, 1623, 1614, 1612,
     1613, 1610,  991, 1613, 1623,  990, 1622, 1621, 1612,    0,
     1601, 1611,    0, 1009, 1607, 1612, 1611, 1598,    0, 1598,
     1599, 1609,    0,    0,    0,    0, 1615, 1614, 1613, 1612,
     1021, 1014, 1022, 1025, 1026, 1031,  995, 1034, 1028, 1611,
     1610, 1044, 1045, 1046, 1036, 1051, 1052, 1055, 1073, 1069,

     1090, 1076, 1092, 1097, 1609, 1088, 1113, 1114, 1111, 1120,
     1131, 1078,  828, 1121, 1608, 1607, 1132, 1135, 1137, 1606,
     1100, 1605, 1142, 1066, 1144, 1604, 1161, 1184, 1207, 1230,
        0,    0,    0,    0, 1601, 1587, 1588, 1593, 1592, 1587,
     1592, 1576, 1580,    0,    0, 1588, 1573, 1585, 1578, 1573,
     1569, 1568, 1569, 1581, 1580, 1564, 1576, 1567,    0, 1568,
     1574, 1571, 1571, 1563, 1571, 1555, 1564, 1570,    0,    0,
     1565, 1565, 1567,    0, 1554,    0, 1565, 1556, 1564,    0,
        0,    0,    0, 1565, 1133, 1152, 1123, 1564, 1563, 1153,
     1150, 1562, 1561, 1560, 1559, 1558, 1174, 1151, 1159, 1176,

     1157, 1160, 1557, 1196, 1182, 1556, 1555, 1554, 1553, 1552,
     1204, 1184, 1185, 1551, 1199, 1197, 1550, 1208, 1220, 1226,
     1228, 1209, 1256, 1279, 1302,    0, 1544, 1527, 1527,    0,
        0, 1541, 1534,    0,    0,    0,    0,    0, 1537, 1540,
     1526, 1534, 1520, 1519,    0, 1531, 1519,    0,    0,    0,
        0,    0, 1533, 1533, 1513,    0, 1513, 1524,    0, 1517,
     1523, 1516, 1515, 1507,    0,    0, 1245, 1223, 1526, 1247,
     1232, 1525, 1253, 1254, 1524,  866, 1268, 1276, 1240, 1293,
     1295, 1281, 1270, 1523, 1271, 1311, 1522, 1312, 1521, 1334,
     1357, 1517, 1512,    0, 1516, 1497,    0, 1511, 1497,    0,

     1489, 1506, 1494, 1494, 1505, 1504, 1490, 1500,    0, 1479,
     1476,    0, 1467,    0,    0,    0, 1304, 1473, 1313, 1472,
     1324, 1471, 1470, 1326, 1469, 1315, 1221, 1327, 1346, 1468,
     1465, 1464, 1463, 1380, 1403, 1443,    0, 1456,    0, 1444,
        0,    0, 1444,    0, 1431, 1438, 1444, 1439,    0,    0,
        0,    0,    0,    0, 1314, 1347, 1445, 1442, 1348, 1269,
     1316, 1441, 1426, 1449, 1420, 1436,    0,    0, 1431, 1417,
     1408,    0,    0, 1426, 1354, 1336, 1357, 1349, 1472,    0,
     1406, 1404, 1408, 1402, 1358, 1301, 1370, 1419, 1398, 1415,
     1409,    0, 1415, 1371, 1405,    0, 1399,    0, 1379, 1400,

     1380, 1383, 1381, 1380, 1396,    0, 1854, 1509, 1513, 1515,
     1519, 1523, 1527, 1531, 1421, 1420, 1419, 1418, 1385, 1351,
     1328, 1318, 1317, 1305, 1282, 1281, 1272, 1224, 1189, 1188,
     1115, 1093, 1063,  823,  720,  643,  439,  399
    } ;

static yyconst flex_int16_t yy_def[939] =
    {   0,
      907,  907,  907,  907,  907,  907,  907,  908,  907,  907,
      909,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  910,  910,  907,  907,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  907,  911,  911,  907,
      911,  912,  913,  911,  911,  914,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  907,   68,  911,
      911,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,  911,  907,  907,  908,  907,  908,  907,  907,  907,

      909,  907,  909,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  915,  907,  907,
      907,  907,  907,  907,  910,  907,  908,  909,  907,  907,
      916,  917,  918,  907,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  907,  907,  911,  907,  911,  913,  911,  912,
      911,  912,  913,  911,  911,  911,  914,  911,  914,  911,

      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
       68,  911,  912,  914,  911,  911,  214,  214,  214,  911,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,  911,  911,
      907,  907,  907,  907,  907,  907,  907,  907,  915,  907,
      907,  919,  920,  907,  921,  922,  918,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  911,  911,
      911,  911,  911,  911,  911,  911,  214,  911,  911,  214,
      214,  911,  214,  214,  214,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,  907,  907,  907,  907,
      923,  924,  907,  925,  926,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  911,  911,  911,  911,  214,  214,
      911,  214,  214,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,  927,  928,  929,  930,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  214,  214,  214,  214,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
      931,  932,  933,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,

      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  214,  214,  214,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,  934,  935,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  214,
      214,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,  936,  937,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  214,  214,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,  938,  930,  910,  910,  910,  910,  910,  910,
      910,  910,  214,  214,   68,   68,   68,   68,   68,   68,
       68,   68,  932,  910,  910,  910,  910,  910,  214,   68,
       68,   68,   68,   68,  910,  910,  910,  910,   68,   68,
       68,   68,  910,  910,  910,   68,   68,   68,  910,   68,

      910,   68,  910,   68,  910,   68,    0,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907
    } ;

static yyconst flex_int16_t yy_nxt[1911] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   19,   20,   21,
       22,    4,   23,   23,   23,   24,   23,   23,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   23,   35,
       23,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   23,   23,   23,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   63,   64,   65,   66,   67,   48,   68,   68,
       68,   69,   68,   68,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   68,   80,   68,   81,   82,   83,

       84,   85,   86,   87,   88,   89,   90,   91,   68,   68,
       68,   92,   96,   99,  102,  105,  110,  261,  107,  111,
      262,  112,  112,  112,  106,  100,  108,  109,  114,  127,
      115,  115,  115,  128,  103,  114,   97,  115,  115,  115,
      126,  116,  117,  118,  120,  121,  123,  124,  116,  117,
      126,  126,  135,  126,  126,  235,  139,  236,  140,  126,
      126,  126,  126,  472,  136,  126,  167,  145,  118,  129,
      137,  126,  138,  129,  141,  126,  146,  155,  159,  130,
      130,  142,  164,  186,  143,  147,  129,  144,  148,  126,
      149,  131,  151,  129,  223,  126,  129,  129,  224,  150,

      189,  129,  152,  156,   96,  153,  126,  154,  129,  157,
      158,  129,  126,  129,  132,  129,  126,  133,  126,  160,
      126,  162,  183,  173,  165,  163,  174,  166,   97,  126,
      168,  169,  126,  161,  175,  126,  170,  181,  186,  186,
      171,  176,  182,  172,  177,  186,  179,  191,  178,  187,
      186,  180,  186,  188,  186,  194,  200,  195,  184,  186,
      198,  186,  186,  294,  294,  186,  126,  201,  186,  196,
      203,  192,  446,  186,  186,  186,  202,  215,  204,  205,
      199,  206,  209,  186,  207,  218,  208,  208,  208,  186,
      230,  216,  217,  210,  256,  211,  211,  211,  186,  210,

      258,  211,  211,  211,  259,  273,  212,  213,  257,  274,
      126,  232,  212,  213,  214,  219,  220,  233,  237,  234,
      241,  244,  126,  245,  300,  238,  126,  252,  239,  242,
      275,  240,  246,  253,  254,  276,  328,  298,  243,  214,
      185,  185,  186,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  221,  221,  221,  185,  185,  185,
      185,  185,  221,  221,  221,  221,  221,  221,  222,  185,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  185,  186,  247,  225,  277,

      186,  873,  225,  269,  278,   96,  270,  248,  226,  226,
      249,  292,  250,  102,  271,  225,  102,  279,  264,  265,
      227,  272,  225,  126,  266,  225,  225,  126,  267,   97,
      225,  268,  126,  103,  293,  126,  103,  225,  299,  302,
      225,  854,  225,  228,  225,  317,  229,  112,  112,  112,
      286,  286,  286,  280,  126,  301,  283,  306,  284,  287,
      114,  284,  115,  115,  115,  126,  126,  126,  283,  285,
      126,  287,  285,  116,  117,  126,  126,  303,  307,  126,
      126,  308,  126,  126,  304,  305,  126,  309,  311,  126,
      126,  312,  310,  126,  126,  126,  126,  126,  126,  313,

      126,  319,  318,  314,  320,  126,  315,  126,  323,  316,
      321,  322,  325,  126,  330,  324,  326,  126,  327,  126,
      126,  333,  126,  329,  331,  126,  340,  126,  334,  332,
      335,  338,  126,  126,  126,  341,  337,  126,  343,  336,
      347,  126,  350,  126,  126,  345,  126,  344,  339,  126,
      342,  186,  346,  126,  353,  351,  357,  198,  348,  354,
      358,  186,  349,  352,  355,  186,  356,  187,  186,  186,
      186,  188,  191,  126,  186,  360,  359,  199,  186,  186,
      387,  186,  186,  186,  366,  388,  208,  208,  208,  448,
      364,  364,  364,  382,  383,  361,  192,  362,  368,  365,

      369,  362,  212,  186,  186,  126,  370,  361,  363,  186,
      198,  365,  363,  210,  409,  211,  211,  211,  186,  410,
      191,  372,  372,  419,  454,  401,  212,  213,  186,  371,
      199,  393,  402,  416,  394,  412,  423,  413,  420,  429,
      367,  367,  367,  424,  192,  853,  414,  430,  367,  367,
      417,  425,  433,  126,  434,  443,  443,  367,  367,  367,
      367,  367,  367,  373,  373,  373,  449,  126,  126,  426,
      447,  373,  373,  427,  126,  451,  126,  450,  126,  457,
      373,  373,  373,  373,  373,  373,  374,  374,  374,  471,
      523,  524,  437,  437,  374,  374,  438,  438,  438,  126,

      126,  126,  460,  374,  374,  374,  374,  374,  374,  375,
      375,  375,  286,  286,  286,  126,  469,  375,  375,  453,
      452,  287,  816,  284,  126,  126,  375,  375,  375,  375,
      375,  375,  458,  287,  285,  439,  439,  126,  126,  440,
      440,  440,  459,  455,  456,  126,  126,  126,  126,  126,
      126,  462,  461,  467,  465,  126,  468,  126,  126,  463,
      473,  474,  464,  126,  126,  126,  126,  466,  126,  126,
      475,  470,  126,  126,  126,  126,  126,  126,  126,  126,
      481,  480,  476,  478,  486,  126,  479,  477,  482,  126,
      485,  126,  484,  483,  487,  126,  126,  126,  488,  126,

      489,  494,  126,  126,  495,  490,  491,  126,  126,  496,
      492,  493,  126,  126,  498,  497,  502,  126,  501,  126,
      503,  186,  499,  531,  186,  815,  532,  126,  500,  505,
      505,  186,  504,  506,  506,  506,  364,  364,  364,  546,
      186,  126,  547,  511,  511,  365,  577,  362,  507,  507,
      126,  579,  508,  508,  508,  126,  126,  365,  363,  509,
      509,  509,  438,  438,  438,  592,  714,  509,  509,  440,
      440,  440,  126,  126,  580,  126,  509,  509,  509,  509,
      509,  509,  510,  510,  510,  578,  438,  438,  438,  126,
      510,  510,  581,  595,  126,  126,  583,  284,  126,  510,

      510,  510,  510,  510,  510,  512,  512,  512,  285,  440,
      440,  440,  586,  512,  512,  584,  126,  126,  126,  823,
      284,  126,  512,  512,  512,  512,  512,  512,  513,  513,
      513,  285,  582,  126,  588,  589,  513,  513,  591,  126,
      126,  126,  126,  126,  587,  513,  513,  513,  513,  513,
      513,  375,  375,  375,  585,  126,  608,  593,  594,  375,
      375,  596,  590,  126,  126,  126,  597,  598,  375,  375,
      375,  375,  375,  375,  126,  126,  601,  126,  126,  126,
      126,  599,  600,  126,  126,  126,  606,  126,  126,  609,
      607,  126,  612,  126,  126,  610,  602,  604,  603,  611,

      605,  126,  126,  126,  614,  616,  613,  126,  615,  617,
      126,  126,  126,  126,  618,  623,  621,  620,  619,  622,
      626,  186,  660,  126,  186,  664,  661,  186,  691,  665,
      625,  624,  186,  506,  506,  506,  506,  506,  506,  508,
      508,  508,  126,  671,  508,  508,  508,  362,  672,  126,
      126,  685,  673,  126,  126,  362,  126,  686,  363,  126,
      688,  689,  126,  687,  126,  766,  363,  627,  627,  627,
      690,  693,  126,  126,  126,  627,  627,  697,  694,  126,
      126,  696,  692,  126,  627,  627,  627,  627,  627,  627,
      628,  628,  628,  695,  126,  125,  698,  126,  628,  628,

      699,  126,  702,  700,  126,  721,  126,  628,  628,  628,
      628,  628,  628,  629,  629,  629,  126,  765,  126,  701,
      126,  629,  629,  703,  704,  126,  713,  705,  126,  707,
      629,  629,  629,  629,  629,  629,  630,  630,  630,  126,
      706,  126,  126,  719,  630,  630,  710,  708,  126,  126,
      709,  126,  715,  630,  630,  630,  630,  630,  630,  126,
      126,  126,  711,  126,  712,  126,  767,  716,  718,  717,
      126,  769,  126,  720,  722,  723,  723,  723,  126,  126,
      126,  126,  773,  723,  723,  126,  770,  126,  126,  771,
      684,  683,  723,  723,  723,  723,  723,  723,  724,  724,

      724,  768,  126,  774,  126,  776,  724,  724,  777,  772,
      126,  775,  126,  126,  781,  724,  724,  724,  724,  724,
      724,  725,  725,  725,  126,  126,  682,  126,  779,  725,
      725,  778,  126,  784,  782,  780,  126,  126,  725,  725,
      725,  725,  725,  725,  726,  726,  726,  783,  126,  126,
      785,  126,  726,  726,  126,  786,  126,  789,  818,  860,
      126,  726,  726,  726,  726,  726,  726,  787,  126,  788,
      790,  790,  790,  126,  681,  126,  817,  819,  790,  790,
      820,  126,  126,  576,  575,  826,  821,  790,  790,  790,
      790,  790,  790,  221,  221,  221,  126,  126,  126,  126,

      822,  221,  221,  824,  126,  830,  831,  574,  877,  126,
      221,  221,  221,  221,  221,  221,  791,  791,  791,  573,
      445,  126,  825,  126,  791,  791,  827,  829,  828,  126,
      444,  894,  126,  791,  791,  791,  791,  791,  791,  126,
      126,  126,  126,  126,  126,  832,  856,  833,  834,  834,
      834,  855,  126,  442,  126,  126,  834,  834,  861,  857,
      858,  859,  874,  878,  126,  834,  834,  834,  834,  834,
      834,  835,  835,  835,  126,  126,  126,  126,  875,  835,
      835,  862,  126,  876,  886,  126,  126,  441,  835,  835,
      835,  835,  835,  835,  863,  863,  863,  888,  126,  126,

      887,  885,  863,  863,  899,  895,  893,  126,  126,  126,
      901,  863,  863,  863,  863,  863,  863,  864,  864,  864,
      297,  296,  295,  289,  126,  864,  864,  903,  906,  905,
      904,  902,  900,  126,  864,  864,  864,  864,  864,  864,
      879,  879,  879,  126,  898,  897,  896,  126,  879,  879,
      892,  891,  890,  889,  126,  884,  883,  879,  879,  879,
      879,  879,  879,  726,  726,  726,  882,  881,  880,  126,
      126,  726,  726,  126,  872,  871,  870,  869,  868,  867,
      726,  726,  726,  726,  726,  726,  221,  221,  221,  866,
      865,  126,  126,  126,  221,  221,  126,  126,  126,  126,

      126,  126,  852,  221,  221,  221,  221,  221,  221,   95,
      851,   95,   95,  101,  850,  101,  101,  125,  125,  185,
      185,  185,  185,  190,  190,  190,  190,  193,  193,  193,
      193,  197,  197,  197,  197,  849,  848,  847,  846,  845,
      844,  843,  842,  841,  840,  839,  838,  837,  836,  126,
      126,  126,  126,  126,  126,  814,  813,  812,  811,  810,
      809,  808,  807,  806,  805,  804,  803,  802,  801,  800,
      799,  798,  797,  796,  795,  794,  793,  792,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  764,  763,  762,  761,  760,  759,

      758,  757,  756,  755,  754,  753,  752,  751,  750,  749,
      748,  747,  746,  745,  744,  743,  742,  741,  740,  739,
      738,  737,  736,  735,  734,  733,  732,  731,  730,  729,
      728,  727,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  680,  679,  678,  677,  676,  675,
      674,  670,  669,  668,  667,  666,  663,  662,  659,  658,
      657,  656,  655,  654,  653,  652,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  186,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,

      126,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  545,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  530,
      529,  528,  527,  526,  525,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  186,  186,  186,  186,  186,  186,
      186,  126,  126,  126,  126,  126,  186,  186,  436,  435,
      432,  431,  428,  422,  421,  418,  415,  411,  408,  407,
      406,  405,  404,  403,  400,  399,  398,  397,  396,  395,
      392,  391,  390,  389,  386,  385,  384,  381,  380,  379,

      378,  377,  376,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  126,  126,  291,
      290,  116,  288,  282,  281,   93,  263,  260,  255,  251,
      231,  186,  186,  134,  126,  122,  119,  113,  104,   98,
       94,   93,  907,    3,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,

      907,  907,  907,  907,  907,  907,  907,  907,  907,  907
    } ;

static yyconst flex_int16_t yy_chk[1911] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    8,   10,   11,   13,   15,   85,   14,   15,
       85,   15,   15,   15,   13,   10,   14,   14,   17,   24,
       17,   17,   17,   24,   11,   18,    8,   18,   18,   18,
       29,   17,   17,   17,   20,   20,   22,   22,   18,   18,
       27,   28,   27,   24,  325,   74,   29,   74,   29,   41,
       31,   34,   36,  325,   28,   39,   41,   31,   17,   25,
       28,   30,   28,   25,   30,   32,   31,   34,   36,   25,
       25,   30,   39,   51,   30,   31,   25,   30,   32,   33,
       32,   25,   33,   25,   69,   35,   25,   25,   69,   32,

       51,   25,   33,   35,   95,   33,   40,   33,   25,   35,
       35,   25,   37,   25,   25,   25,   43,   25,   38,   37,
       42,   38,   47,   43,   40,   38,   43,   40,   95,   44,
       42,   42,   46,   37,   43,   45,   42,   46,   54,   57,
       42,   43,   46,   42,   44,   52,   45,   52,   44,   49,
       49,   45,   55,   49,   56,   54,   57,   55,   47,   58,
       56,   59,   64,  130,  130,   61,  298,   58,   66,   55,
       59,   52,  298,   71,   60,   65,   58,   64,   59,   59,
       56,   60,   61,   63,   60,   66,   60,   60,   60,   62,
       71,   65,   65,   63,   82,   63,   63,   63,   67,   62,

       83,   62,   62,   62,   83,   89,   63,   63,   82,   89,
      137,   73,   62,   62,   62,   67,   67,   73,   75,   73,
       76,   77,  162,   77,  137,   75,  135,   80,   75,   76,
       90,   75,   77,   80,   80,   90,  162,  135,   76,   62,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   70,   78,   70,   91,

       92,  938,   70,   88,   91,  127,   88,   78,   70,   70,
       78,  126,   78,  101,   88,   70,  128,   92,   87,   87,
       70,   88,   70,  139,   87,   70,   70,  136,   87,  127,
       70,   87,  151,  101,  126,  138,  128,   70,  136,  139,
       70,  937,   70,   70,   70,  151,   70,  112,  112,  112,
      114,  114,  114,   92,  142,  138,  112,  142,  112,  114,
      115,  114,  115,  115,  115,  141,  144,  146,  112,  112,
      140,  114,  114,  115,  115,  143,  147,  140,  143,  145,
      148,  144,  149,  153,  141,  141,  152,  145,  146,  150,
      155,  147,  145,  154,  157,  158,  160,  159,  161,  148,

      163,  153,  152,  149,  154,  170,  150,  164,  158,  150,
      155,  157,  159,  165,  164,  158,  160,  166,  161,  167,
      168,  166,  169,  163,  165,  176,  170,  172,  167,  165,
      167,  169,  171,  173,  174,  171,  168,  175,  172,  167,
      175,  179,  176,  178,  177,  174,  181,  173,  169,  182,
      171,  197,  174,  180,  178,  177,  181,  197,  175,  179,
      182,  212,  175,  177,  180,  207,  180,  187,  187,  205,
      190,  187,  190,  301,  208,  207,  205,  197,  210,  213,
      241,  216,  222,  220,  212,  241,  208,  208,  208,  301,
      210,  210,  210,  237,  237,  208,  190,  208,  216,  210,

      220,  210,  213,  211,  224,  307,  222,  208,  208,  226,
      224,  210,  210,  211,  261,  211,  211,  211,  223,  261,
      223,  226,  226,  267,  307,  254,  211,  211,  214,  222,
      224,  246,  254,  265,  246,  263,  270,  263,  267,  273,
      214,  214,  214,  270,  223,  936,  263,  273,  214,  214,
      265,  271,  276,  302,  276,  294,  294,  214,  214,  214,
      214,  214,  214,  227,  227,  227,  302,  299,  304,  271,
      299,  227,  227,  271,  303,  304,  309,  303,  323,  309,
      227,  227,  227,  227,  227,  227,  228,  228,  228,  323,
      386,  386,  283,  283,  228,  228,  283,  283,  283,  312,

      321,  306,  312,  228,  228,  228,  228,  228,  228,  229,
      229,  229,  286,  286,  286,  305,  321,  229,  229,  306,
      305,  286,  935,  286,  308,  310,  229,  229,  229,  229,
      229,  229,  310,  286,  286,  287,  287,  314,  311,  287,
      287,  287,  311,  308,  308,  313,  315,  316,  317,  320,
      318,  314,  313,  318,  316,  322,  320,  326,  327,  315,
      326,  327,  315,  328,  330,  331,  332,  317,  333,  334,
      328,  322,  336,  335,  337,  338,  340,  339,  341,  342,
      334,  333,  330,  332,  339,  343,  332,  331,  335,  344,
      338,  345,  337,  336,  340,  346,  347,  348,  341,  351,

      342,  347,  350,  352,  348,  343,  344,  353,  354,  350,
      345,  346,  355,  356,  352,  351,  356,  357,  355,  358,
      357,  361,  353,  393,  364,  934,  393,  447,  354,  361,
      361,  372,  358,  361,  361,  361,  364,  364,  364,  410,
      365,  452,  410,  372,  372,  364,  447,  364,  365,  365,
      468,  452,  365,  365,  365,  454,  613,  364,  364,  370,
      370,  370,  437,  437,  437,  468,  613,  370,  370,  439,
      439,  439,  455,  450,  454,  457,  370,  370,  370,  370,
      370,  370,  371,  371,  371,  450,  438,  438,  438,  474,
      371,  371,  455,  474,  776,  458,  457,  438,  460,  371,

      371,  371,  371,  371,  371,  373,  373,  373,  438,  440,
      440,  440,  460,  373,  373,  458,  464,  465,  467,  776,
      440,  456,  373,  373,  373,  373,  373,  373,  374,  374,
      374,  440,  456,  463,  464,  465,  374,  374,  467,  470,
      486,  459,  475,  471,  463,  374,  374,  374,  374,  374,
      374,  375,  375,  375,  459,  466,  486,  470,  471,  375,
      375,  475,  466,  476,  477,  480,  476,  477,  375,  375,
      375,  375,  375,  375,  478,  479,  480,  481,  482,  483,
      484,  478,  479,  485,  487,  493,  485,  489,  488,  487,
      485,  491,  489,  494,  500,  488,  481,  483,  482,  488,

      484,  490,  497,  496,  491,  494,  490,  498,  493,  496,
      499,  502,  503,  504,  496,  500,  498,  497,  496,  499,
      504,  505,  553,  587,  506,  556,  553,  507,  587,  556,
      503,  502,  508,  505,  505,  505,  506,  506,  506,  507,
      507,  507,  582,  564,  508,  508,  508,  506,  564,  581,
      583,  581,  564,  584,  585,  508,  589,  582,  506,  586,
      584,  585,  588,  583,  595,  933,  508,  509,  509,  509,
      586,  589,  592,  593,  594,  509,  509,  595,  592,  596,
      597,  594,  588,  598,  509,  509,  509,  509,  509,  509,
      510,  510,  510,  593,  624,  932,  596,  600,  510,  510,

      597,  599,  600,  598,  602,  624,  612,  510,  510,  510,
      510,  510,  510,  512,  512,  512,  606,  931,  601,  599,
      603,  512,  512,  601,  602,  604,  612,  603,  621,  606,
      512,  512,  512,  512,  512,  512,  513,  513,  513,  609,
      604,  607,  608,  621,  513,  513,  609,  607,  610,  614,
      608,  687,  614,  513,  513,  513,  513,  513,  513,  611,
      617,  685,  610,  618,  611,  619,  685,  617,  619,  618,
      623,  687,  625,  623,  625,  627,  627,  627,  691,  698,
      686,  690,  698,  627,  627,  701,  690,  699,  702,  691,
      930,  929,  627,  627,  627,  627,  627,  627,  628,  628,

      628,  686,  697,  699,  700,  701,  628,  628,  702,  697,
      705,  700,  712,  713,  712,  628,  628,  628,  628,  628,
      628,  629,  629,  629,  704,  716,  928,  715,  705,  629,
      629,  704,  711,  716,  713,  711,  718,  722,  629,  629,
      629,  629,  629,  629,  630,  630,  630,  715,  719,  827,
      718,  768,  630,  630,  720,  719,  721,  722,  768,  827,
      771,  630,  630,  630,  630,  630,  630,  720,  779,  721,
      723,  723,  723,  767,  927,  770,  767,  770,  723,  723,
      771,  773,  774,  926,  925,  779,  773,  723,  723,  723,
      723,  723,  723,  724,  724,  724,  777,  860,  783,  785,

      774,  724,  724,  777,  778,  783,  785,  924,  860,  782,
      724,  724,  724,  724,  724,  724,  725,  725,  725,  923,
      922,  780,  778,  781,  725,  725,  780,  782,  781,  886,
      921,  886,  817,  725,  725,  725,  725,  725,  725,  786,
      788,  819,  855,  826,  861,  786,  819,  788,  790,  790,
      790,  817,  821,  920,  824,  828,  790,  790,  828,  821,
      824,  826,  855,  861,  876,  790,  790,  790,  790,  790,
      790,  791,  791,  791,  829,  856,  859,  878,  856,  791,
      791,  829,  875,  859,  876,  877,  885,  919,  791,  791,
      791,  791,  791,  791,  834,  834,  834,  878,  887,  894,

      877,  875,  834,  834,  894,  887,  885,  899,  901,  903,
      899,  834,  834,  834,  834,  834,  834,  835,  835,  835,
      918,  917,  916,  915,  905,  835,  835,  901,  904,  903,
      902,  900,  897,  895,  835,  835,  835,  835,  835,  835,
      863,  863,  863,  893,  891,  890,  889,  888,  863,  863,
      884,  883,  882,  881,  874,  871,  870,  863,  863,  863,
      863,  863,  863,  864,  864,  864,  869,  866,  865,  862,
      858,  864,  864,  857,  848,  847,  846,  845,  843,  840,
      864,  864,  864,  864,  864,  864,  879,  879,  879,  838,
      836,  833,  832,  831,  879,  879,  830,  825,  823,  822,

      820,  818,  813,  879,  879,  879,  879,  879,  879,  908,
      811,  908,  908,  909,  810,  909,  909,  910,  910,  911,
      911,  911,  911,  912,  912,  912,  912,  913,  913,  913,
      913,  914,  914,  914,  914,  808,  807,  806,  805,  804,
      803,  802,  801,  799,  798,  796,  795,  793,  792,  789,
      787,  784,  775,  772,  769,  764,  763,  762,  761,  760,
      758,  757,  755,  754,  753,  747,  746,  744,  743,  742,
      741,  740,  739,  733,  732,  729,  728,  727,  717,  714,
      710,  709,  708,  707,  706,  703,  696,  695,  694,  693,
      692,  689,  688,  684,  679,  678,  677,  675,  673,  672,

      671,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      648,  647,  646,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  626,  622,  620,  616,  615,  605,  591,  590,
      580,  579,  578,  577,  572,  571,  570,  568,  567,  566,
      565,  562,  561,  559,  558,  557,  555,  554,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  539,
      538,  536,  535,  534,  533,  532,  531,  528,  527,  526,
      525,  524,  523,  522,  520,  518,  515,  511,  501,  495,
      492,  473,  472,  469,  462,  461,  453,  451,  449,  448,

      446,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  409,  408,  406,  405,
      404,  403,  401,  400,  399,  398,  396,  395,  394,  392,
      391,  390,  389,  388,  387,  385,  384,  383,  382,  381,
      380,  379,  377,  376,  369,  368,  366,  363,  362,  360,
      359,  349,  329,  324,  319,  300,  280,  279,  278,  277,
      275,  274,  272,  269,  268,  266,  264,  262,  260,  259,
      258,  257,  256,  255,  253,  251,  250,  249,  248,  247,
      245,  244,  243,  242,  240,  239,  238,  236,  235,  234,

      233,  232,  231,  230,  225,  219,  218,  217,  215,  209,
      206,  204,  203,  202,  201,  200,  199,  198,  196,  195,
      194,  193,  192,  191,  189,  188,  185,  156,  125,  124,
      120,  117,  116,  111,  109,   93,   86,   84,   81,   79,
       72,   53,   48,   26,   23,   21,   19,   16,   12,    9,
        7,    5,    3,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  907,  907,  907,  907,  907,

      907,  907,  907,  907,  907,  907,  907,  907,  907,  907
    } ;

static yyconst flex_int16_t yy_rule_linenum[121] =
    {   0,
       91,   92,   94,   95,   97,  100,  101,  103,  106,  107,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,

      200,  201,  202,  203,  204,  205,  206,  208,  209,  210,
      211,  212,  213,  214,  221,  223,  224,  226,  229,  230
    } ;

#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CxxLexer.l"
/*
 *	  Title:			Miniature lexer for C++ parser.
 *
 *	  File Name:		CxxLexer.l
 *
 *	  Author:			E.D.Willink
 *
 *	This is a complete lexer for C++, intended for use with CxxParser.y.
 *	All actions are done by macros, so that there is some chance that customisation
 *	can be performed within the bounds of the CxxLexing.hxx and CxxLexing.cxx
 *	include files.
 *END
 */
#line 15 "CxxLexer.l"
#include "CxxLexer.h"
#include "CxxParser.h"

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return YY_NULL

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 48 "CxxLexer.l"
#define YY_USER_ACTION  \
		yylloc->columns(yyleng); \
		yy_register_location(*yylloc, yyleng);\
		
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
#line 1396 "CxxLexer.cxx"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 90 "CxxLexer.l"

#line 1551 "CxxLexer.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)Cxxalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 908 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 907 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 121 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 121 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 122 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 91 "CxxLexer.l"
{ LEX_SAVE_LINE(yytext, yyleng); REJECT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "CxxLexer.l"
{ /* Throw away preprocessor lines - hopefully only #line and equivalent. */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "CxxLexer.l"
{ LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate character with trailing escape.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate character.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng); };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "CxxLexer.l"
{ LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate string with trailing escape.");
								  LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate string.");
								  LEX_STRING_TOKEN(yytext, yyleng); };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 106 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(__ID); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(PROPERTY); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(IMPORT); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(ALIAS); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(SOURCE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(SIGNAL); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(STRUCTURE); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(STATEMACHINE); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(STATE); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(TRACK); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "CxxLexer.l"
{ LEX_SHAMAN_KEYWORD_TOKEN(META); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(ASM); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 119 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(AUTO); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(BOOL); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(BREAK); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CASE); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CATCH); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CHAR); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 125 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CLASS); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 126 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CONST); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 127 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CONST_CAST); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 128 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CONTINUE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DEFAULT); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 130 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DELETE); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 131 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DO); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 132 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DOUBLE); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 133 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DYNAMIC_CAST); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(ELSE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 135 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(ENUM); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 136 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(EXPLICIT); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 137 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(EXPORT); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(EXTERN); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FALSE); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 140 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FLOAT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 141 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FOR); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 142 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FRIEND); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 143 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(GOTO); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 144 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(IF); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 145 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(INLINE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(INT); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(LONG); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 148 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(MUTABLE); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 149 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(NAMESPACE); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 150 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(NEW); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 151 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(OPERATOR); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 152 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(PRIVATE); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 153 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(PROTECTED); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 154 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(PUBLIC); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 155 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(REGISTER); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 156 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(REINTERPRET_CAST); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 157 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(RETURN); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 158 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SHORT); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SIGNED); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SIZEOF); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 161 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(STATIC); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 162 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(STATIC_CAST); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 163 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(STRUCT); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SWITCH); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TEMPLATE); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(THIS); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(THROW); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 168 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TRUE); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 169 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TRY); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 170 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TYPEDEF); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 171 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TYPEID); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 172 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TYPENAME); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 173 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(UNION); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 174 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(UNSIGNED); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(USING); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(VIRTUAL); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(VOID); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(VOLATILE); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(WCHAR_T); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 180 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(WHILE); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SCOPE); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ELLIPSIS); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHL); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHR); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "CxxLexer.l"
{ LEX_STATIC_TOKEN(EQ); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "CxxLexer.l"
{ LEX_STATIC_TOKEN(NE); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LE); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "CxxLexer.l"
{ LEX_STATIC_TOKEN(GE); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LOG_AND); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LOG_OR); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "CxxLexer.l"
{ LEX_STATIC_TOKEN(INC); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DEC); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ARROW_STAR); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ARROW); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DOT_STAR); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_ADD); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SUB); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_MUL); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_DIV); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_MOD); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_XOR); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_AND); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_OR); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SHR); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SHL); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 208 "CxxLexer.l"
{ LEX_HEX_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 209 "CxxLexer.l"
{ LEX_LONGDOUBLE_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 210 "CxxLexer.l"
{ LEX_DOUBLE_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 211 "CxxLexer.l"
{ LEX_FLOAT_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 212 "CxxLexer.l"
{ LEX_UINT_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 213 "CxxLexer.l"
{ LEX_ULONG_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 214 "CxxLexer.l"
{ LEX_ULONGLONG_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 221 "CxxLexer.l"
{ LEX_IDENTIFIER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 116:
#line 224 "CxxLexer.l"
case 117:
YY_RULE_SETUP
#line 224 "CxxLexer.l"
{ LEX_ESCAPED_TOKEN(yytext, yyleng); }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 226 "CxxLexer.l"
{
    yylloc->lines(yyleng); yylloc->step();
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 229 "CxxLexer.l"
{ yylloc->step(); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 230 "CxxLexer.l"
{ LEX_ASCII_TOKEN(yytext[0]); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 232 "CxxLexer.l"
ECHO;
	YY_BREAK
#line 2284 "CxxLexer.cxx"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Cxxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Cxxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Cxxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 908 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 908 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 907);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Cxxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Cxxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Cxxfree((void *) b->yy_ch_buf  );

	Cxxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cxxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cxxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Cxxalloc(new_size  );

		else
			(yy_start_stack) = (int *) Cxxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Cxxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Cxxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Cxxfree (void * ptr )
{
	free( (char *) ptr );	/* see Cxxrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 231 "CxxLexer.l"


/*** Additional Code ***/

namespace phantom {

CxxLexer::CxxLexer(std::istream* in,
		 std::ostream* out)
    : CxxFlexLexer(in, out)
{
    bang_depth = 0;
    error_count = 0;
    marked_error_count = 0;
    in_type1 = false;
    show_marked = false;
    primed_tokens[0] = 0; primed_tokens[1] = 0; primed_tokens[2] = 0;
    tokenMarkDepth = 0;
    tokenWriteIndex = 0;
    tokenSize = 0;
    tokenReadIndex = 0;
    tokenBuffer = nullptr;
    _yychar = nullptr;
    _yylval = nullptr;
    CxxToken::yyToken = nullptr;
}

CxxLexer::~CxxLexer()
{
    delete[] tokenBuffer;
}

void CxxLexer::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int CxxFlexLexer::yylex()
{
   // std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int CxxFlexLexer::yywrap()
{
    return phantom::CxxDriver::Instance()->handleEndOfFile();
}

