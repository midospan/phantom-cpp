#line 2 "CxxLexer.cxx"

#line 4 "CxxLexer.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CxxFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Cxxalloc (yy_size_t  );
void *Cxxrealloc (void *,yy_size_t  );
void Cxxfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1023] =
    {   0,
      111,  109,  110,  108,  109,  110,  107,  110,  109,  110,
        8,  109,  110,  109,  110,  109,  110,    5,  109,  110,
      109,  110,  109,  110,  109,  110,  109,  110,  109,  110,
      101,  109,  110,  101,  109,  110,  109,  110,  109,  110,
      109,  110,  109,  110,  104,  109,  110,  104,  109,  110,
      109,  110,  109,  110,  104,  109,  110,  104,  109,  110,
      104,  109,  110,  104,  109,  110,  104,  109,  110,  104,
      109,  110,  104,  109,  110,  104,  109,  110,  104,  109,
      110,  104,  109,  110,  104,  109,  110,  104,  109,  110,
      104,  109,  110,  104,  109,  110,  104,  109,  110,  104,

      109,  110,  104,  109,  110,  104,  109,  110,  104,  109,
      110,  109,  110,  109,  110,  108,  109,  110,    1,  107,
      110,  109,  110,    8,  109,  110,    2,  109,  110,  109,
      110,  109,  110,    5,  109,  110,  109,  110,  109,  110,
      109,  110,  109,  110,  109,  110,  101,  109,  110,  101,
      109,  110,  109,  110,  109,  110,  109,  110,  109,  110,
      104,  109,  110,  104,  109,  110,  109,  110,  109,  110,
      104,  109,  110,  104,  109,  110,  104,  109,  110,  104,
      109,  110,  104,  109,  110,  104,  109,  110,  104,  109,
      110,  104,  109,  110,  104,  109,  110,  104,  109,  110,

      104,  109,  110,  104,  109,  110,  104,  109,  110,  104,
      109,  110,  104,  109,  110,  104,  109,  110,  104,  109,
      110,  104,  109,  110,  104,  109,  110,  109,  110,  108,
       77,    8,    6,    7,   91,   80,   93,    5,    3,    4,
       89,   82,   87,   83,   88,   85,   86,   99,   90,   99,
      101,  102,   72,   74,   78,   76,   79,   75,  104,    8,
        5,  105,  105,   92,  104,  104,  104,  104,  104,  104,
      104,  104,  104,   22,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,   35,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  104,  104,   94,
       81,    1,  108,    2,   77,    8,    6,    7,    2,   91,
       80,   93,    5,    3,    4,   89,   82,   87,   83,   88,
       85,   86,   99,   90,   99,  101,  102,   72,   74,   78,
       76,   79,   75,  104,    8,    5,  105,  105,   92,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   22,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   35,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,   94,   81,   84,   73,   98,  100,

       99,  103,   97,   96,   95,  105,  105,    9,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   32,  104,  104,
      104,  104,   37,  104,  104,  104,  104,   41,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   60,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   84,   73,   98,
      100,   99,  103,   97,   96,   95,  105,  105,    9,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   32,  104,

      104,  104,  104,   37,  104,  104,  104,  104,   41,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   60,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,   99,   99,
      105,   10,  104,   11,  104,  104,   13,  104,  104,   15,
      104,  104,  104,  104,  104,  104,  104,  104,   25,  104,
       26,  104,  104,  104,  104,  104,  104,  104,   34,  104,
      104,   38,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   57,
      104,  104,   59,  104,  104,  104,  104,  104,  104,   68,

      104,  104,  104,  104,   99,   99,  105,   10,  104,   11,
      104,  104,   13,  104,  104,   15,  104,  104,  104,  104,
      104,  104,  104,  104,   25,  104,   26,  104,  104,  104,
      104,  104,  104,  104,   34,  104,  104,   38,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   57,  104,  104,   59,  104,
      104,  104,  104,  104,  104,   68,  104,  104,  104,  104,
       12,  104,   14,  104,   16,  104,   17,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   30,  104,   31,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,   49,  104,  104,  104,  104,  104,  104,  104,   58,
      104,  104,  104,  104,   64,  104,  104,   66,  104,  104,
      104,  104,   71,  104,   12,  104,   14,  104,   16,  104,
       17,  104,  104,  104,  104,  104,  104,  104,  104,  104,
       30,  104,   31,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   49,  104,  104,  104,  104,
      104,  104,  104,   58,  104,  104,  104,  104,   64,  104,
      104,   66,  104,  104,  104,  104,   71,  104,  104,  106,
      104,  104,  104,   21,  104,   23,  104,  104,  104,   28,
      104,   29,  104,   33,  104,   36,  104,  104,  104,  104,

      104,  104,   45,  104,  104,  104,   48,  104,   50,  104,
       51,  104,   52,  104,   54,  104,   55,  104,  104,  104,
       62,  104,  104,  104,  104,  104,  104,  104,  106,  104,
      104,  104,   21,  104,   23,  104,  104,  104,   28,  104,
       29,  104,   33,  104,   36,  104,  104,  104,  104,  104,
      104,   45,  104,  104,  104,   48,  104,   50,  104,   51,
      104,   52,  104,   54,  104,   55,  104,  104,  104,   62,
      104,  104,  104,  104,  104,  104,  104,  104,   20,  104,
      104,  104,   39,  104,  104,  104,   43,  104,  104,  104,
      104,  104,  104,   61,  104,  104,  104,   67,  104,  104,

       70,  104,  104,  104,   20,  104,  104,  104,   39,  104,
      104,  104,   43,  104,  104,  104,  104,  104,  104,   61,
      104,  104,  104,   67,  104,  104,   70,  104,  104,   19,
      104,  104,   27,  104,  104,   42,  104,  104,   46,  104,
      104,  104,   56,  104,   63,  104,   65,  104,   69,  104,
      104,   19,  104,  104,   27,  104,  104,   42,  104,  104,
       46,  104,  104,  104,   56,  104,   63,  104,   65,  104,
       69,  104,  104,  104,   40,  104,   44,  104,  104,  104,
      104,  104,   40,  104,   44,  104,  104,  104,   18,  104,
      104,  104,  104,   18,  104,  104,  104,  104,  104,  104,

       53,  104,  104,  104,   53,  104,   24,  104,  104,   24,
      104,  104,  104,  104,  104,  104,  104,  104,   47,  104,
       47,  104
    } ;

static yyconst flex_int16_t yy_accept[825] =
    {   0,
        1,    1,    1,    2,    4,    7,    9,   11,   14,   16,
       18,   21,   23,   25,   27,   29,   31,   34,   37,   39,
       41,   43,   45,   48,   51,   53,   55,   58,   61,   64,
       67,   70,   73,   76,   79,   82,   85,   88,   91,   94,
       97,  100,  103,  106,  109,  112,  114,  116,  119,  122,
      124,  127,  130,  132,  134,  137,  139,  141,  143,  145,
      147,  150,  153,  155,  157,  159,  161,  164,  167,  169,
      171,  174,  177,  180,  183,  186,  189,  192,  195,  198,
      201,  204,  207,  210,  213,  216,  219,  222,  225,  228,
      230,  231,  232,  233,  234,  235,  236,  237,  238,  239,

      240,  241,  242,  243,  244,  245,  246,  247,  248,  248,
      249,  250,  251,  252,  253,  253,  253,  254,  255,  256,
      257,  258,  259,  260,  260,  261,  262,  263,  264,  264,
      264,  264,  265,  266,  267,  268,  269,  270,  271,  272,
      273,  274,  276,  277,  278,  279,  280,  281,  282,  283,
      284,  285,  287,  288,  289,  290,  291,  292,  293,  294,
      295,  296,  297,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  310,  311,  312,  312,  313,
      314,  315,  316,  317,  318,  319,  320,  321,  322,  323,
      324,  325,  326,  327,  328,  329,  330,  331,  332,  333,

      333,  334,  335,  336,  337,  338,  338,  338,  339,  340,
      341,  342,  343,  344,  345,  345,  346,  347,  348,  349,
      349,  349,  349,  350,  351,  352,  353,  354,  355,  356,
      357,  358,  359,  361,  362,  363,  364,  365,  366,  367,
      368,  369,  370,  372,  373,  374,  375,  376,  377,  378,
      379,  380,  381,  382,  383,  384,  385,  386,  387,  388,
      389,  390,  391,  392,  393,  394,  395,  396,  397,  398,
      399,  399,  400,  401,  402,  402,  403,  404,  405,  406,
      406,  406,  407,  407,  407,  408,  410,  411,  412,  413,
      414,  415,  416,  417,  418,  419,  420,  421,  422,  423,

      424,  425,  426,  427,  428,  430,  431,  432,  433,  435,
      436,  437,  438,  440,  441,  442,  443,  444,  445,  446,
      447,  448,  449,  450,  451,  452,  453,  454,  455,  456,
      457,  459,  460,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  470,  470,  471,  472,  473,  473,  474,  475,
      476,  477,  477,  477,  478,  478,  478,  479,  481,  482,
      483,  484,  485,  486,  487,  488,  489,  490,  491,  492,
      493,  494,  495,  496,  497,  498,  499,  501,  502,  503,
      504,  506,  507,  508,  509,  511,  512,  513,  514,  515,
      516,  517,  518,  519,  520,  521,  522,  523,  524,  525,

      526,  527,  528,  530,  531,  532,  533,  534,  535,  536,
      537,  538,  539,  539,  540,  540,  541,  541,  541,  542,
      542,  542,  544,  546,  547,  549,  550,  552,  553,  554,
      555,  556,  557,  558,  559,  561,  563,  564,  565,  566,
      567,  568,  569,  571,  572,  574,  575,  576,  577,  578,
      579,  580,  581,  582,  583,  584,  585,  586,  587,  588,
      589,  590,  592,  593,  595,  596,  597,  598,  599,  600,
      602,  603,  604,  605,  605,  606,  606,  607,  607,  607,
      608,  608,  608,  610,  612,  613,  615,  616,  618,  619,
      620,  621,  622,  623,  624,  625,  627,  629,  630,  631,

      632,  633,  634,  635,  637,  638,  640,  641,  642,  643,
      644,  645,  646,  647,  648,  649,  650,  651,  652,  653,
      654,  655,  656,  658,  659,  661,  662,  663,  664,  665,
      666,  668,  669,  670,  671,  671,  671,  671,  671,  673,
      675,  677,  679,  680,  681,  682,  683,  684,  685,  686,
      687,  689,  691,  692,  693,  694,  695,  696,  697,  698,
      699,  700,  701,  702,  704,  705,  706,  707,  708,  709,
      710,  712,  713,  714,  715,  717,  718,  720,  721,  722,
      723,  725,  725,  725,  725,  725,  727,  729,  731,  733,
      734,  735,  736,  737,  738,  739,  740,  741,  743,  745,

      746,  747,  748,  749,  750,  751,  752,  753,  754,  755,
      756,  758,  759,  760,  761,  762,  763,  764,  766,  767,
      768,  769,  771,  772,  774,  775,  776,  777,  779,  779,
      779,  779,  781,  782,  783,  784,  786,  788,  789,  790,
      792,  794,  796,  798,  799,  800,  801,  802,  803,  805,
      806,  807,  809,  811,  813,  815,  817,  819,  820,  821,
      823,  824,  825,  826,  827,  828,  828,  828,  828,  830,
      831,  832,  833,  835,  837,  838,  839,  841,  843,  845,
      847,  848,  849,  850,  851,  852,  854,  855,  856,  858,
      860,  862,  864,  866,  868,  869,  870,  872,  873,  874,

      875,  876,  877,  877,  877,  878,  879,  881,  882,  883,
      885,  886,  887,  889,  890,  891,  892,  893,  894,  896,
      897,  898,  900,  901,  903,  903,  903,  904,  905,  907,
      908,  909,  911,  912,  913,  915,  916,  917,  918,  919,
      920,  922,  923,  924,  926,  927,  929,  929,  929,  930,
      932,  933,  935,  936,  938,  939,  941,  942,  943,  945,
      947,  949,  951,  951,  951,  952,  954,  955,  957,  958,
      960,  961,  963,  964,  965,  967,  969,  971,  973,  973,
      973,  974,  975,  977,  979,  980,  981,  981,  981,  982,
      983,  985,  987,  988,  989,  989,  991,  992,  993,  994,

      994,  996,  997,  998,  999, 1000, 1001, 1003, 1004, 1005,
     1007, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
     1019, 1021, 1023, 1023
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,    1,
        1,   10,   11,    1,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    1,   19,
       20,   21,   22,    1,   23,   23,   23,   23,   24,   23,
       25,   25,   25,   25,   25,   26,   25,   25,   25,   25,
       25,   25,   25,   25,   27,   25,   25,   28,   25,   25,
        1,   29,    1,   30,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   25,   41,   42,   43,   44,
       45,   46,   25,   47,   48,   49,   50,   51,   52,   53,
       54,   55,    1,   56,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    4,    4,    4,    1,
        4,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[855] =
    {   0,
        0,   56, 1729, 1730, 1726, 1730, 1707,  108, 1706,  106,
      106, 1705,  105,  107,  107, 1704,  116,  123, 1705,  126,
     1702,  127, 1692,  125,  165, 1700,  112,  126,  143,  122,
      124,  154,  134,  166,  155,  128,  175,  160,  176,  123,
      188,  195,  191,  193,  207,  173, 1716,  241, 1730,  188,
      216, 1715,  210,  245,  247,  248,  249,  251,  264,  255,
      279,  284,  252,  270,  258,  263,  332,  156,  386,  282,
      209,  217,  276,  268,  270,  284, 1672,  188, 1671, 1665,
      288, 1668,   71, 1677,  354,  360,  356,  246,  254,  389,
     1710, 1730,  298, 1730,    0, 1730, 1730, 1730,  381, 1730,

        0, 1730, 1730, 1730, 1730, 1730, 1701, 1730, 1697,  405,
     1730,  431,  436, 1683, 1682,    0, 1730, 1687, 1730, 1730,
     1730, 1686, 1676,  378,  411,  388, 1730,  396,    0,    0,
        0, 1730,  395,  405,  280,  396,  421,  427,  429,  431,
      435,  269,  436,  437,  442,  444,  288,  398,  397,  447,
      445, 1675,  449,  452,  450,  454,  453,  459,  471,  473,
      472,  474,  475,  485,  478,  479,  480,  486,  495,  494,
      497,  496,  504,  499,  510, 1730, 1730, 1700, 1730,  545,
     1699, 1698,  526, 1697, 1696, 1695, 1694, 1693, 1692,  549,
     1691, 1690, 1689, 1688, 1687, 1686, 1685,  546, 1684,  532,

      550, 1683,  556,  581,  551,  557,  606, 1682,  559, 1681,
     1680, 1679,  561,    0,  585,  586,  566, 1678,  587,  629,
      652,  675, 1677, 1636, 1629, 1632, 1640,  551, 1643, 1642,
     1629,  447, 1622, 1627, 1622, 1619,  555, 1626, 1622, 1619,
     1625, 1615,    0,  519, 1619, 1613, 1618, 1608, 1623,  565,
     1625,  576, 1612,  573,  538, 1616, 1612,  566,  570, 1608,
      116, 1613, 1605,  577, 1612, 1610, 1646, 1645, 1730, 1730,
      639, 1730, 1730,  657,  685, 1730,    0, 1730, 1730,    0,
        0,  611,    0,    0,    0, 1618,  589,  607,  628,  641,
      603,  666,  630,  674,  650,  685,  686,  688,  689,  604,

      687,  695,  697,  698, 1617,  699,  704,  707, 1616,  642,
      705,  710, 1615,  709,  711,  712,  713,  714,  715,  719,
      721,  722,  724,  723,  728,  734,  602,  729,  735,  738,
     1614,  746,  736,  744,  741,  742,  528,  747,  757,  758,
     1639, 1638,  787, 1637, 1636,  790,  806, 1635,    0, 1634,
     1633,  813,  836,  809,  859,  882,  905,    0, 1590, 1592,
     1601, 1596, 1597, 1583, 1581,  656, 1596, 1591, 1593, 1593,
     1588, 1580,  750, 1586, 1573, 1588,    0, 1583, 1573, 1577,
        0, 1578, 1583, 1578,    0, 1566, 1561, 1562, 1568, 1569,
     1564, 1557, 1559, 1561, 1568, 1554, 1552, 1552, 1554, 1551,

     1553, 1561,    0, 1560, 1550, 1554, 1549, 1543, 1556, 1558,
     1557, 1546,  816,  840,  823,  863,    0,    0, 1730,    0,
        0, 1558, 1557,  767, 1556,  772, 1555,  765,  786,  814,
      791,  813,  768,  815, 1554, 1553,  861,  834,  838,  873,
      835,  790, 1552,  859, 1551,  832,  875,  878,  879,  895,
      896,  884,  897,  883,  898,  914,  904,  905,  919,  922,
      915, 1550,  906, 1549,  925,  923,  926,  930,  932, 1548,
      934,  933,  937,  969,  972,  975,  978, 1001, 1024, 1573,
     1047, 1070,    0,    0, 1534,    0, 1535,    0, 1525, 1523,
     1531, 1520, 1520, 1526, 1524,    0,    0, 1526, 1518, 1517,

     1527, 1513, 1517,    0, 1516,    0, 1526, 1510, 1525, 1524,
     1519, 1514, 1505, 1503, 1504, 1501, 1513, 1503, 1507, 1512,
     1511, 1502,    0, 1491,    0,  961, 1498, 1503, 1502, 1489,
        0, 1489, 1490, 1500,    0,    0,    0,    0, 1506, 1505,
     1504,  945,  968,  971,  941,  970,  974,  973,  979,  982,
     1503, 1502,  992,  993,  981, 1003, 1001, 1002, 1038, 1039,
     1016, 1017, 1025, 1501, 1060,  942, 1062, 1026, 1013, 1045,
     1500, 1061, 1063, 1079, 1499, 1070, 1498, 1080, 1081, 1047,
     1497, 1107, 1130, 1153, 1176,    0,    0,    0, 1494, 1480,
     1481, 1486, 1485, 1480, 1485, 1469, 1473,    0,    0, 1481,

     1479, 1472, 1467, 1463, 1462, 1476, 1475, 1459, 1471, 1462,
        0, 1470, 1467, 1469, 1453, 1462, 1468,    0, 1463, 1463,
     1465,    0, 1452,    0, 1463, 1454, 1462,    0,    0,    0,
        0, 1463, 1084, 1086, 1071, 1462, 1461, 1098, 1088, 1460,
     1459, 1458, 1457, 1090, 1105, 1104, 1119, 1109, 1456, 1121,
     1127, 1455, 1454, 1453, 1130, 1452, 1451, 1122, 1123, 1450,
     1151, 1143, 1059, 1087, 1146, 1199, 1222, 1245,    0, 1444,
     1427, 1427,    0,    0, 1441, 1434,    0,    0,    0,    0,
     1437, 1440, 1426, 1434, 1400,    0, 1409, 1390,    0,    0,
        0, 1405,    0,    0, 1386, 1397,    0, 1390, 1396, 1389,

     1386, 1378,    0,    0, 1149, 1167, 1397, 1153, 1168, 1396,
     1172, 1173, 1395, 1169, 1178, 1175, 1190, 1211, 1385, 1212,
     1214, 1384, 1215, 1383, 1268, 1291, 1379, 1374,    0, 1378,
     1359,    0, 1371, 1357,    0, 1367, 1355, 1355, 1357, 1354,
        0, 1353, 1353,    0, 1351,    0,    0,    0, 1223, 1357,
     1236, 1356, 1237, 1353, 1258, 1352, 1243, 1197, 1351, 1350,
     1349, 1339, 1314, 1337, 1319,    0, 1332,    0, 1329,    0,
     1329,    0, 1316, 1330,    0,    0,    0,    0,    0,    0,
     1201, 1235, 1330, 1329, 1259, 1246, 1360, 1383, 1308, 1324,
        0,    0, 1319, 1297,    0, 1315, 1268, 1247, 1260, 1406,

        0, 1295, 1293, 1292, 1269, 1281, 1311, 1287, 1303,    0,
     1304, 1288,    0, 1287, 1303, 1281, 1291, 1263, 1270, 1237,
     1245,    0, 1730, 1443, 1447, 1449, 1453, 1457, 1461, 1465,
     1260, 1250, 1239, 1225, 1224, 1215, 1180, 1170, 1132, 1122,
     1063, 1041, 1040, 1017, 1016,  884,  883,  785,  703,  655,
      483,  395,  325,  187
    } ;

static yyconst flex_int16_t yy_def[855] =
    {   0,
      823,  823,  823,  823,  823,  823,  823,  824,  823,  823,
      825,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  826,  826,  823,  823,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  823,  827,  827,  823,  827,
      828,  829,  827,  827,  830,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  823,   67,  827,  827,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  827,
      823,  823,  824,  823,  824,  823,  823,  823,  825,  823,

      825,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  831,  823,  823,  823,  823,
      823,  823,  826,  823,  824,  825,  823,  823,  832,  833,
      834,  823,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  823,  823,  827,  823,  827,
      829,  827,  828,  827,  828,  829,  827,  827,  827,  830,
      827,  830,  827,  827,  827,  827,  827,  827,  827,  827,

      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  827,  827,   67,  827,  828,  830,  827,  827,  207,
      207,  207,  827,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,  827,  827,  823,  823,
      823,  823,  823,  823,  823,  823,  831,  823,  823,  835,
      836,  823,  837,  838,  834,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      827,  827,  827,  827,  827,  827,  827,  827,  207,  827,
      827,  207,  207,  827,  207,  207,  207,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,  823,  823,  823,  823,  839,  840,  823,  841,
      842,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  827,  827,  827,  827,  207,  207,  827,
      207,  207,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,  843,  844,  845,  846,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  207,  207,  207,  207,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,  847,  848,
      849,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  207,  207,  207,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,  850,  851,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  207,  207,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,  852,  853,  826,  826,
      826,  826,  826,  826,  826,  826,  826,  826,  826,  826,
      826,  826,  207,  207,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,  854,  846,
      826,  826,  826,  826,  826,  826,  207,  207,   67,   67,
       67,   67,   67,   67,  848,  826,  826,  826,  826,  207,

       67,   67,   67,   67,  826,  826,  826,   67,   67,   67,
      826,  826,   67,   67,  826,   67,  826,   67,  826,   67,
      826,   67,    0,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823
    } ;

static yyconst flex_int16_t yy_nxt[1787] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   19,   20,   21,
       22,    4,   23,   23,   23,   24,   23,   23,   25,   26,
       23,   27,   28,   29,   30,   31,   32,   33,   23,   34,
       23,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   23,   23,   23,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   62,   63,   64,   65,   66,   47,   67,   67,
       67,   68,   67,   67,   69,   70,   67,   71,   72,   73,
       74,   75,   76,   77,   67,   78,   67,   79,   80,   81,

       82,   83,   84,   85,   86,   87,   88,   89,   67,   67,
       67,   90,   94,   97,  100,  103,  108,  250,  105,  109,
      251,  110,  110,  110,  104,   98,  106,  107,  112,  125,
      113,  113,  113,  126,  101,  112,   95,  113,  113,  113,
      124,  114,  115,  116,  118,  119,  121,  122,  114,  115,
      124,  124,  124,  124,  124,  405,  124,  141,  161,  133,
      216,  134,  124,  406,  217,  144,  142,  145,  116,  127,
      135,  124,  136,  127,  137,  143,  146,  155,  151,  128,
      128,  138,  124,  124,  139,  147,  127,  140,  124,  795,
      179,  129,  176,  127,  124,  148,  127,  127,  149,  154,

      150,  127,  152,  124,  124,  158,  156,  182,  127,  153,
      157,  127,  179,  127,  130,  127,  124,  131,  179,  124,
      184,  124,  159,  124,  243,  160,  162,  163,  177,  187,
      166,  244,  172,  167,  170,  124,  164,  173,  171,  165,
      174,  168,  180,  179,  185,  175,  181,  179,  169,  179,
      179,  179,  188,  179,  179,  191,  224,  179,  225,  194,
      179,  226,  196,  227,  189,  179,  179,  193,  195,  208,
      197,  198,  179,  199,  202,  192,  200,  211,  201,  201,
      201,  179,  212,  213,  179,  263,  179,  265,  209,  210,
      264,  203,  266,  204,  204,  204,  203,  124,  204,  204,

      204,  223,   94,  232,  205,  206,  207,  228,  124,  205,
      206,  235,  233,  236,  229,  238,  124,  230,  297,  247,
      231,  234,  237,  248,  288,  239,   95,  780,  240,  303,
      241,  207,  178,  178,  179,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  214,  214,  214,  178,
      178,  178,  178,  178,  214,  214,  214,  214,  214,  214,
      215,  178,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  178,  179,  100,
      218,  179,  253,  254,  218,  257,  100,  779,  258,  261,

      219,  219,  255,  262,  280,  256,  259,  218,  267,  101,
      282,  282,  220,  260,  218,   94,  101,  218,  218,  110,
      110,  110,  218,  124,  124,  124,  124,  281,  271,  218,
      272,  289,  218,  124,  218,  221,  218,  286,  222,   95,
      271,  273,  304,  305,  268,  274,  274,  274,  112,  124,
      113,  113,  113,  287,  275,  124,  272,  124,  292,  124,
      293,  114,  115,  124,  124,  124,  275,  273,  290,  291,
      124,  295,  124,  124,  294,  124,  296,  124,  124,  298,
      124,  124,  124,  367,  299,  748,  306,  124,  368,  301,
      308,  300,  302,  307,  314,  310,  312,  309,  311,  124,

      124,  124,  124,  124,  313,  317,  124,  124,  124,  318,
      315,  319,  322,  124,  124,  316,  324,  326,  321,  328,
      320,  327,  124,  124,  124,  124,  329,  124,  179,  323,
      184,  325,  124,  333,  179,  330,  335,  339,  124,  331,
      332,  334,  336,  337,  342,  338,  180,  179,  179,  340,
      181,  179,  179,  179,  185,  341,  124,  191,  179,  179,
      380,  179,  470,  179,  201,  201,  201,  381,  179,  396,
      346,  346,  346,  343,  191,  344,  348,  192,  350,  347,
      351,  344,  205,  179,  397,  343,  345,  179,  179,  179,
      184,  347,  345,  203,  192,  204,  204,  204,  362,  363,

      373,  354,  354,  374,  387,  400,  205,  206,  179,  388,
      394,  352,  401,  390,  185,  391,  409,  124,  410,  402,
      349,  349,  349,  403,  392,  419,  419,  395,  349,  349,
      124,  124,  124,  422,  353,  124,  426,  349,  349,  349,
      349,  349,  349,  355,  355,  355,  436,  461,  423,  413,
      413,  355,  355,  414,  414,  414,  124,  747,  124,  424,
      355,  355,  355,  355,  355,  355,  356,  356,  356,  124,
      124,  274,  274,  274,  356,  356,  425,  428,  124,  445,
      275,  431,  272,  356,  356,  356,  356,  356,  356,  357,
      357,  357,  275,  273,  124,  415,  415,  357,  357,  416,

      416,  416,  124,  490,  491,  704,  357,  357,  357,  357,
      357,  357,  427,  124,  124,  124,  124,  124,  433,  434,
      432,  429,  430,  124,  435,  124,  124,  124,  437,  441,
      439,  438,  124,  124,  442,  124,  446,  124,  124,  124,
      124,  124,  124,  124,  440,  447,  444,  124,  443,  124,
      124,  124,  124,  452,  451,  448,  124,  124,  453,  457,
      450,  449,  124,  124,  124,  456,  124,  455,  454,  124,
      124,  458,  124,  464,  124,  124,  462,  459,  471,  463,
      466,  465,  460,  467,  468,  124,  124,  123,  472,  179,
      469,  498,  179,  124,  499,  124,  124,  474,  474,  473,

      124,  475,  475,  475,  346,  346,  346,  539,  179,  546,
      540,  179,  541,  347,  124,  344,  476,  476,  124,  124,
      477,  477,  477,  480,  480,  347,  345,  478,  478,  478,
      414,  414,  414,  553,  542,  478,  478,  416,  416,  416,
      544,  124,  124,  124,  478,  478,  478,  478,  478,  478,
      479,  479,  479,  543,  414,  414,  414,  547,  479,  479,
      124,  545,  124,  124,  555,  272,  124,  479,  479,  479,
      479,  479,  479,  481,  481,  481,  273,  416,  416,  416,
      549,  481,  481,  552,  550,  703,  632,  124,  272,  124,
      481,  481,  481,  481,  481,  481,  482,  482,  482,  273,

      548,  124,  554,  124,  482,  482,  124,  124,  551,  557,
      558,  124,  124,  482,  482,  482,  482,  482,  482,  357,
      357,  357,  556,  124,  124,  124,  124,  357,  357,  563,
      559,  561,  124,  124,  124,  560,  357,  357,  357,  357,
      357,  357,  124,  124,  567,  562,  564,  124,  566,  565,
      124,  124,  568,  124,  124,  569,  570,  571,  124,  572,
      124,  124,  124,  576,  573,  124,  575,  577,  574,  124,
      124,  179,  581,  124,  179,  633,  636,  179,  654,  580,
      179,  578,  579,  475,  475,  475,  475,  475,  475,  477,
      477,  477,  477,  477,  477,  619,  124,  344,  124,  124,

      620,  124,  124,  344,  621,  637,  639,  124,  345,  124,
      124,  634,  635,  638,  345,  582,  582,  582,  631,  630,
      124,  124,  644,  582,  582,  641,  642,  640,  643,  124,
      124,  124,  582,  582,  582,  582,  582,  582,  583,  583,
      583,  124,  629,  538,  124,  124,  583,  583,  645,  646,
      647,  657,  651,  124,  124,  583,  583,  583,  583,  583,
      583,  584,  584,  584,  650,  537,  124,  124,  652,  584,
      584,  648,  649,  124,  656,  124,  658,  665,  584,  584,
      584,  584,  584,  584,  585,  585,  585,  124,  124,  124,
      124,  124,  585,  585,  653,  655,  659,  660,  124,  124,

      722,  585,  585,  585,  585,  585,  585,  124,  124,  124,
      661,  663,  124,  662,  124,  124,  124,  705,  124,  707,
      664,  666,  666,  666,  536,  710,  124,  709,  723,  666,
      666,  708,  124,  124,  535,  706,  711,  124,  666,  666,
      666,  666,  666,  666,  667,  667,  667,  124,  712,  124,
      124,  124,  667,  667,  713,  124,  715,  714,  124,  719,
      717,  667,  667,  667,  667,  667,  667,  668,  668,  668,
      718,  124,  421,  716,  124,  668,  668,  124,  721,  124,
      749,  124,  420,  751,  668,  668,  668,  668,  668,  668,
      669,  669,  669,  720,  724,  124,  124,  124,  669,  669,

      124,  124,  750,  124,  755,  753,  124,  669,  669,  669,
      669,  669,  669,  725,  725,  725,  752,  418,  124,  754,
      757,  725,  725,  758,  756,  124,  417,  285,  786,  124,
      725,  725,  725,  725,  725,  725,  214,  214,  214,  124,
      124,  284,  124,  124,  214,  214,  759,  760,  761,  796,
      762,  124,  283,  214,  214,  214,  214,  214,  214,  726,
      726,  726,  277,  124,  124,  124,  797,  726,  726,  782,
      781,  124,  783,  124,  124,  124,  726,  726,  726,  726,
      726,  726,  763,  763,  763,  822,  124,  124,  124,  785,
      763,  763,  784,  799,  798,  806,  124,  124,  124,  763,

      763,  763,  763,  763,  763,  764,  764,  764,  807,  124,
      820,  812,  818,  764,  764,  805,  124,  811,  821,  124,
      816,  815,  764,  764,  764,  764,  764,  764,  787,  787,
      787,  124,  124,  814,  817,  813,  787,  787,  819,  124,
      810,  809,  808,  124,  804,  787,  787,  787,  787,  787,
      787,  788,  788,  788,  803,  802,  801,  124,  124,  788,
      788,  794,  793,  792,  791,  790,  789,  124,  788,  788,
      788,  788,  788,  788,  800,  800,  800,  124,  124,  124,
      124,  124,  800,  800,  124,  124,  778,  777,  776,  775,
      774,  800,  800,  800,  800,  800,  800,  669,  669,  669,

      773,  772,  771,  770,  769,  669,  669,  768,  767,  766,
      765,  124,  124,  124,  669,  669,  669,  669,  669,  669,
      214,  214,  214,  124,  124,  124,  746,  745,  214,  214,
      744,  743,  742,  741,  740,  739,  738,  214,  214,  214,
      214,  214,  214,   93,  737,   93,   93,   99,  736,   99,
       99,  123,  123,  178,  178,  178,  178,  183,  183,  183,
      183,  186,  186,  186,  186,  190,  190,  190,  190,  735,
      734,  733,  732,  731,  730,  729,  728,  727,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  702,  701,  700,  699,  698,  697,  696,  695,

      694,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  676,  675,
      674,  673,  672,  671,  670,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  628,  627,  626,  625,  624,
      623,  622,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  179,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  534,  533,  532,
      531,  530,  529,  528,  527,  526,  525,  524,  523,  522,

      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  505,  504,  503,  502,
      501,  500,  497,  496,  495,  494,  493,  492,  489,  488,
      487,  486,  485,  484,  483,  179,  179,  179,  179,  179,
      179,  179,  124,  124,  124,  124,  124,  179,  179,  412,
      411,  408,  407,  404,  399,  398,  393,  389,  386,  385,
      384,  383,  382,  379,  378,  377,  376,  375,  372,  371,
      370,  369,  366,  365,  364,  361,  360,  359,  358,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  124,  124,  279,  278,  114,  276,  270,
      269,   91,  252,  249,  246,  245,  242,  179,  179,  132,
      124,  120,  117,  111,  102,   96,   92,   91,  823,    3,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823
    } ;

static yyconst flex_int16_t yy_chk[1787] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    8,   10,   11,   13,   15,   83,   14,   15,
       83,   15,   15,   15,   13,   10,   14,   14,   17,   24,
       17,   17,   17,   24,   11,   18,    8,   18,   18,   18,
       27,   17,   17,   17,   20,   20,   22,   22,   18,   18,
       30,   40,   31,   24,   28,  261,   36,   30,   40,   27,
       68,   27,   33,  261,   68,   31,   30,   31,   17,   25,
       28,   29,   28,   25,   29,   30,   31,   36,   33,   25,
       25,   29,   32,   35,   29,   32,   25,   29,   38,  854,
       50,   25,   46,   25,   34,   32,   25,   25,   32,   35,

       32,   25,   34,   37,   39,   38,   37,   50,   25,   34,
       37,   25,   53,   25,   25,   25,   41,   25,   51,   43,
       51,   44,   39,   42,   78,   39,   41,   41,   46,   53,
       42,   78,   44,   42,   43,   45,   41,   44,   43,   41,
       45,   42,   48,   48,   51,   45,   48,   54,   42,   55,
       56,   57,   54,   58,   63,   55,   71,   60,   71,   57,
       65,   72,   58,   72,   54,   66,   59,   56,   57,   63,
       58,   58,   64,   59,   60,   55,   59,   65,   59,   59,
       59,   61,   66,   66,   70,   88,   62,   89,   64,   64,
       88,   61,   89,   61,   61,   61,   62,  142,   62,   62,

       62,   70,   93,   74,   61,   61,   61,   73,  135,   62,
       62,   75,   74,   75,   73,   76,  147,   73,  142,   81,
       73,   74,   75,   81,  135,   76,   93,  853,   76,  147,
       76,   61,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   69,   99,
       69,   90,   85,   85,   69,   86,  126,  852,   86,   87,

       69,   69,   85,   87,  124,   85,   86,   69,   90,   99,
      128,  128,   69,   86,   69,  125,  126,   69,   69,  110,
      110,  110,   69,  133,  136,  149,  148,  124,  110,   69,
      110,  136,   69,  134,   69,   69,   69,  133,   69,  125,
      110,  110,  148,  149,   90,  112,  112,  112,  113,  137,
      113,  113,  113,  134,  112,  138,  112,  139,  138,  140,
      139,  113,  113,  141,  143,  144,  112,  112,  137,  137,
      145,  141,  146,  151,  140,  150,  141,  153,  155,  143,
      154,  157,  156,  232,  144,  851,  150,  158,  232,  146,
      153,  145,  146,  151,  158,  154,  156,  153,  155,  159,

      161,  160,  162,  163,  157,  160,  165,  166,  167,  161,
      159,  161,  163,  164,  168,  159,  164,  165,  162,  167,
      161,  166,  170,  169,  172,  171,  167,  174,  183,  163,
      183,  164,  173,  170,  200,  168,  171,  174,  175,  168,
      169,  170,  172,  173,  200,  173,  180,  180,  198,  175,
      180,  190,  201,  205,  183,  198,  337,  190,  203,  206,
      244,  209,  337,  213,  201,  201,  201,  244,  217,  255,
      203,  203,  203,  201,  217,  201,  205,  190,  209,  203,
      213,  203,  206,  204,  255,  201,  201,  215,  216,  219,
      216,  203,  203,  204,  217,  204,  204,  204,  228,  228,

      237,  219,  219,  237,  250,  258,  204,  204,  207,  250,
      254,  215,  258,  252,  216,  252,  264,  287,  264,  259,
      207,  207,  207,  259,  252,  282,  282,  254,  207,  207,
      327,  291,  300,  287,  215,  288,  291,  207,  207,  207,
      207,  207,  207,  220,  220,  220,  300,  327,  288,  271,
      271,  220,  220,  271,  271,  271,  289,  850,  293,  289,
      220,  220,  220,  220,  220,  220,  221,  221,  221,  290,
      310,  274,  274,  274,  221,  221,  290,  293,  295,  310,
      274,  295,  274,  221,  221,  221,  221,  221,  221,  222,
      222,  222,  274,  274,  292,  275,  275,  222,  222,  275,

      275,  275,  294,  366,  366,  849,  222,  222,  222,  222,
      222,  222,  292,  296,  297,  301,  298,  299,  297,  298,
      296,  294,  294,  302,  299,  303,  304,  306,  301,  304,
      302,  301,  307,  311,  306,  308,  311,  314,  312,  315,
      316,  317,  318,  319,  303,  312,  308,  320,  307,  321,
      322,  324,  323,  318,  317,  314,  325,  328,  319,  323,
      316,  315,  326,  329,  333,  322,  330,  321,  320,  335,
      336,  324,  334,  330,  332,  338,  328,  325,  338,  329,
      333,  332,  326,  334,  335,  339,  340,  848,  339,  343,
      336,  373,  346,  428,  373,  424,  433,  343,  343,  340,

      426,  343,  343,  343,  346,  346,  346,  424,  347,  433,
      426,  354,  428,  346,  429,  346,  347,  347,  442,  431,
      347,  347,  347,  354,  354,  346,  346,  352,  352,  352,
      413,  413,  413,  442,  429,  352,  352,  415,  415,  415,
      431,  432,  430,  434,  352,  352,  352,  352,  352,  352,
      353,  353,  353,  430,  414,  414,  414,  434,  353,  353,
      446,  432,  438,  441,  446,  414,  439,  353,  353,  353,
      353,  353,  353,  355,  355,  355,  414,  416,  416,  416,
      438,  355,  355,  441,  439,  847,  846,  444,  416,  437,
      355,  355,  355,  355,  355,  355,  356,  356,  356,  416,

      437,  440,  444,  447,  356,  356,  448,  449,  440,  448,
      449,  454,  452,  356,  356,  356,  356,  356,  356,  357,
      357,  357,  447,  450,  451,  453,  455,  357,  357,  454,
      450,  452,  457,  458,  463,  451,  357,  357,  357,  357,
      357,  357,  456,  461,  458,  453,  455,  459,  457,  456,
      460,  466,  459,  465,  467,  460,  461,  463,  468,  465,
      469,  472,  471,  467,  465,  473,  466,  468,  465,  545,
      566,  474,  473,  542,  475,  542,  545,  476,  566,  472,
      477,  469,  471,  474,  474,  474,  475,  475,  475,  476,
      476,  476,  477,  477,  477,  526,  543,  475,  546,  544,

      526,  548,  547,  477,  526,  546,  548,  549,  475,  555,
      550,  543,  544,  547,  477,  478,  478,  478,  845,  844,
      553,  554,  555,  478,  478,  550,  553,  549,  554,  557,
      558,  556,  478,  478,  478,  478,  478,  478,  479,  479,
      479,  569,  843,  842,  561,  562,  479,  479,  556,  557,
      558,  569,  562,  563,  568,  479,  479,  479,  479,  479,
      479,  481,  481,  481,  561,  841,  559,  560,  563,  481,
      481,  559,  560,  570,  568,  580,  570,  580,  481,  481,
      481,  481,  481,  481,  482,  482,  482,  663,  565,  572,
      567,  573,  482,  482,  565,  567,  572,  573,  576,  635,

      663,  482,  482,  482,  482,  482,  482,  574,  578,  579,
      574,  578,  633,  576,  634,  664,  639,  633,  644,  635,
      579,  582,  582,  582,  840,  644,  638,  639,  664,  582,
      582,  638,  646,  645,  839,  634,  645,  648,  582,  582,
      582,  582,  582,  582,  583,  583,  583,  647,  646,  650,
      658,  659,  583,  583,  647,  651,  650,  648,  655,  659,
      655,  583,  583,  583,  583,  583,  583,  584,  584,  584,
      658,  662,  838,  651,  665,  584,  584,  705,  662,  661,
      705,  708,  837,  708,  584,  584,  584,  584,  584,  584,
      585,  585,  585,  661,  665,  706,  709,  714,  585,  585,

      711,  712,  706,  716,  714,  711,  715,  585,  585,  585,
      585,  585,  585,  666,  666,  666,  709,  836,  717,  712,
      716,  666,  666,  717,  715,  758,  835,  834,  758,  781,
      666,  666,  666,  666,  666,  666,  667,  667,  667,  718,
      720,  833,  721,  723,  667,  667,  718,  720,  721,  781,
      723,  749,  832,  667,  667,  667,  667,  667,  667,  668,
      668,  668,  831,  782,  751,  753,  782,  668,  668,  751,
      749,  757,  753,  821,  786,  798,  668,  668,  668,  668,
      668,  668,  725,  725,  725,  820,  755,  785,  799,  757,
      725,  725,  755,  786,  785,  798,  797,  805,  819,  725,

      725,  725,  725,  725,  725,  726,  726,  726,  799,  806,
      818,  806,  816,  726,  726,  797,  812,  805,  819,  817,
      814,  812,  726,  726,  726,  726,  726,  726,  763,  763,
      763,  815,  811,  809,  815,  808,  763,  763,  817,  807,
      804,  803,  802,  796,  794,  763,  763,  763,  763,  763,
      763,  764,  764,  764,  793,  790,  789,  784,  783,  764,
      764,  774,  773,  771,  769,  767,  765,  762,  764,  764,
      764,  764,  764,  764,  787,  787,  787,  761,  760,  759,
      756,  754,  787,  787,  752,  750,  745,  743,  742,  740,
      739,  787,  787,  787,  787,  787,  787,  788,  788,  788,

      738,  737,  736,  734,  733,  788,  788,  731,  730,  728,
      727,  724,  722,  719,  788,  788,  788,  788,  788,  788,
      800,  800,  800,  713,  710,  707,  702,  701,  800,  800,
      700,  699,  698,  696,  695,  692,  688,  800,  800,  800,
      800,  800,  800,  824,  687,  824,  824,  825,  685,  825,
      825,  826,  826,  827,  827,  827,  827,  828,  828,  828,
      828,  829,  829,  829,  829,  830,  830,  830,  830,  684,
      683,  682,  681,  676,  675,  672,  671,  670,  660,  657,
      656,  654,  653,  652,  649,  643,  642,  641,  640,  637,
      636,  632,  627,  626,  625,  623,  621,  620,  619,  617,

      616,  615,  614,  613,  612,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  581,  577,  575,  571,  564,
      552,  551,  541,  540,  539,  534,  533,  532,  530,  529,
      528,  527,  524,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  505,
      503,  502,  501,  500,  499,  498,  495,  494,  493,  492,
      491,  490,  489,  487,  485,  480,  470,  464,  462,  445,
      443,  436,  435,  427,  425,  423,  422,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  402,  401,  400,  399,

      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  384,  383,  382,  380,  379,  378,  376,
      375,  374,  372,  371,  370,  369,  368,  367,  365,  364,
      363,  362,  361,  360,  359,  351,  350,  348,  345,  344,
      342,  341,  331,  313,  309,  305,  286,  268,  267,  266,
      265,  263,  262,  260,  257,  256,  253,  251,  249,  248,
      247,  246,  245,  242,  241,  240,  239,  238,  236,  235,
      234,  233,  231,  230,  229,  227,  226,  225,  224,  223,
      218,  212,  211,  210,  208,  202,  199,  197,  196,  195,
      194,  193,  192,  191,  189,  188,  187,  186,  185,  184,

      182,  181,  178,  152,  123,  122,  118,  115,  114,  109,
      107,   91,   84,   82,   80,   79,   77,   52,   47,   26,
       23,   21,   19,   16,   12,    9,    7,    5,    3,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  823
    } ;

static yyconst flex_int16_t yy_rule_linenum[110] =
    {   0,
       91,   92,   94,   95,   97,  100,  101,  103,  106,  107,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
      168,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      179,  180,  181,  182,  183,  184,  185,  186,  187,  188,
      189,  190,  191,  192,  193,  194,  196,  197,  198,  199,

      200,  201,  202,  209,  211,  212,  214,  215,  216
    } ;

#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CxxLexer.l"
/*
 *	  Title:			Miniature lexer for C++ parser.
 *
 *	  File Name:		CxxLexer.l
 *
 *	  Author:			E.D.Willink
 *
 *	This is a complete lexer for C++, intended for use with CxxParser.y.
 *	All actions are done by macros, so that there is some chance that customisation
 *	can be performed within the bounds of the CxxLexing.hxx and CxxLexing.cxx
 *	include files.
 *END
 */
#line 15 "CxxLexer.l"
#include "CxxLexer.h"
#include "CxxParser.h"

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return YY_NULL

/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "ExampleFlexLexer" */
/* the manual says "somewhat more optimized" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* no support for include files is planned */
/* enables the use of start condition stacks */
/* The following paragraph suffices to track locations accurately. Each time
 * yylex is invoked, the begin position is moved onto the end position. */
#line 48 "CxxLexer.l"
#define YY_USER_ACTION  \
		yylloc->columns(yyleng); \
		yy_register_location(*yylloc, yyleng);\
		
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
#line 1328 "CxxLexer.cxx"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 90 "CxxLexer.l"

#line 1483 "CxxLexer.cxx"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)Cxxalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 824 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 823 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 110 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 110 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 111 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 91 "CxxLexer.l"
{ LEX_SAVE_LINE(yytext, yyleng); REJECT; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "CxxLexer.l"
{ /* Throw away preprocessor lines - hopefully only #line and equivalent. */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 94 "CxxLexer.l"
{ LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 95 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate character with trailing escape.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 97 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate character.");
								  LEX_CHARACTER_TOKEN(yytext, yyleng); };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "CxxLexer.l"
{ LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 101 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate string with trailing escape.");
								  LEX_STRING_TOKEN(yytext, yyleng-1); };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "CxxLexer.l"
{ ERRMSG("End of line assumed to terminate string.");
								  LEX_STRING_TOKEN(yytext, yyleng); };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 106 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(ASM); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(AUTO); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(BOOL); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(BREAK); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CASE); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CATCH); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CHAR); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 113 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CLASS); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 114 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CONST); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 115 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CONST_CAST); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 116 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(CONTINUE); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 117 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DEFAULT); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 118 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DELETE); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 119 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DO); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 120 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DOUBLE); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 121 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(DYNAMIC_CAST); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 122 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(ELSE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 123 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(ENUM); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 124 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(EXPLICIT); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 125 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(EXPORT); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 126 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(EXTERN); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 127 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FALSE); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 128 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FLOAT); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 129 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FOR); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 130 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(FRIEND); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 131 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(GOTO); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 132 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(IF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 133 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(INLINE); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 134 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(INT); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 135 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(LONG); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 136 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(MUTABLE); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 137 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(NAMESPACE); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 138 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(NEW); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 139 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(OPERATOR); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 140 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(PRIVATE); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 141 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(PROTECTED); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 142 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(PUBLIC); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(REGISTER); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 144 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(REINTERPRET_CAST); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 145 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(RETURN); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 146 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SHORT); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 147 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SIGNED); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 148 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SIZEOF); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 149 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(STATIC); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 150 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(STATIC_CAST); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 151 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(STRUCT); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 152 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(SWITCH); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 153 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TEMPLATE); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 154 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(THIS); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 155 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(THROW); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 156 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TRUE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 157 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TRY); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 158 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TYPEDEF); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 159 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TYPEID); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 160 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(TYPENAME); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 161 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(UNION); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 162 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(UNSIGNED); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 163 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(USING); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 164 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(VIRTUAL); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 165 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(VOID); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 166 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(VOLATILE); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 167 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(WCHAR_T); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 168 "CxxLexer.l"
{ LEX_KEYWORD_TOKEN(WHILE); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 170 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SCOPE); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 171 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ELLIPSIS); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 172 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHL); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 173 "CxxLexer.l"
{ LEX_STATIC_TOKEN(SHR); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 174 "CxxLexer.l"
{ LEX_STATIC_TOKEN(EQ); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "CxxLexer.l"
{ LEX_STATIC_TOKEN(NE); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LE); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "CxxLexer.l"
{ LEX_STATIC_TOKEN(GE); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LOG_AND); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "CxxLexer.l"
{ LEX_STATIC_TOKEN(LOG_OR); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 180 "CxxLexer.l"
{ LEX_STATIC_TOKEN(INC); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 181 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DEC); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 182 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ARROW_STAR); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 183 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ARROW); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 184 "CxxLexer.l"
{ LEX_STATIC_TOKEN(DOT_STAR); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 185 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_ADD); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 186 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SUB); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 187 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_MUL); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 188 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_DIV); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 189 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_MOD); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 190 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_XOR); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 191 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_AND); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 192 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_OR); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 193 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SHR); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 194 "CxxLexer.l"
{ LEX_STATIC_TOKEN(ASS_SHL); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "CxxLexer.l"
{ LEX_HEX_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "CxxLexer.l"
{ LEX_LONGDOUBLE_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "CxxLexer.l"
{ LEX_DOUBLE_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "CxxLexer.l"
{ LEX_FLOAT_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "CxxLexer.l"
{ LEX_UINT_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "CxxLexer.l"
{ LEX_ULONG_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "CxxLexer.l"
{ LEX_ULONGLONG_NUMBER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 209 "CxxLexer.l"
{ LEX_IDENTIFIER_TOKEN(yytext, yyleng); }
	YY_BREAK
case 105:
#line 212 "CxxLexer.l"
case 106:
YY_RULE_SETUP
#line 212 "CxxLexer.l"
{ LEX_ESCAPED_TOKEN(yytext, yyleng); }
	YY_BREAK
case 107:
/* rule 107 can match eol */
#line 215 "CxxLexer.l"
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 215 "CxxLexer.l"
{ /* Throw away whitespace */ }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 216 "CxxLexer.l"
{ LEX_ASCII_TOKEN(yytext[0]); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 218 "CxxLexer.l"
ECHO;
	YY_BREAK
#line 2157 "CxxLexer.cxx"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Cxxfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Cxxfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Cxxrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 824 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 824 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 823);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Cxxalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Cxxalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Cxxfree((void *) b->yy_ch_buf  );

	Cxxfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cxxalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Cxxrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Cxxalloc(new_size  );

		else
			(yy_start_stack) = (int *) Cxxrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Cxxalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Cxxrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Cxxfree (void * ptr )
{
	free( (char *) ptr );	/* see Cxxrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 217 "CxxLexer.l"


/*** Additional Code ***/

namespace phantom {

CxxLexer::CxxLexer(std::istream* in,
		 std::ostream* out)
    : CxxFlexLexer(in, out)
{
    bang_depth = 0;
    error_count = 0;
    marked_error_count = 0;
    in_type1 = false;
    show_marked = false;
    primed_tokens[0] = 0; primed_tokens[1] = 0; primed_tokens[2] = 0;
    tokenMarkDepth = 0;
    tokenWriteIndex = 0;
    tokenSize = 0;
    tokenReadIndex = 0;
    tokenBuffer = nullptr;
    _yychar = nullptr;
    _yylval = nullptr;
    CxxToken::yyToken = nullptr;
}

CxxLexer::~CxxLexer()
{
    delete[] tokenBuffer;
}

void CxxLexer::set_debug(bool b)
{
    yy_flex_debug = b;
}

}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif

int CxxFlexLexer::yylex()
{
   // std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int CxxFlexLexer::yywrap()
{
    return 1;
}

