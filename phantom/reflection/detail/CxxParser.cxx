
/*  A Bison parser, made from CxxParser.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	ARROW	258
#define	ARROW_STAR	259
#define	DEC	260
#define	EQ	261
#define	GE	262
#define	INC	263
#define	LE	264
#define	LOG_AND	265
#define	LOG_OR	266
#define	NE	267
#define	SHL	268
#define	SHR	269
#define	ASS_ADD	270
#define	ASS_AND	271
#define	ASS_DIV	272
#define	ASS_MOD	273
#define	ASS_MUL	274
#define	ASS_OR	275
#define	ASS_SHL	276
#define	ASS_SHR	277
#define	ASS_SUB	278
#define	ASS_XOR	279
#define	DOT_STAR	280
#define	ELLIPSIS	281
#define	SCOPE	282
#define	PRIVATE	283
#define	PROTECTED	284
#define	PUBLIC	285
#define	BOOL	286
#define	CHAR	287
#define	DOUBLE	288
#define	FLOAT	289
#define	INT	290
#define	LONG	291
#define	SHORT	292
#define	SIGNED	293
#define	UNSIGNED	294
#define	VOID	295
#define	WCHAR_T	296
#define	CLASS	297
#define	ENUM	298
#define	NAMESPACE	299
#define	STRUCT	300
#define	TYPENAME	301
#define	UNION	302
#define	CONST	303
#define	VOLATILE	304
#define	AUTO	305
#define	EXPLICIT	306
#define	EXPORT	307
#define	EXTERN	308
#define	FRIEND	309
#define	INLINE	310
#define	MUTABLE	311
#define	REGISTER	312
#define	STATIC	313
#define	TEMPLATE	314
#define	TYPEDEF	315
#define	USING	316
#define	VIRTUAL	317
#define	ASM	318
#define	BREAK	319
#define	CASE	320
#define	CATCH	321
#define	CONST_CAST	322
#define	CONTINUE	323
#define	DEFAULT	324
#define	DELETE	325
#define	DO	326
#define	DYNAMIC_CAST	327
#define	ELSE	328
#define	FALSE	329
#define	FOR	330
#define	GOTO	331
#define	IF	332
#define	NEW	333
#define	OPERATOR	334
#define	REINTERPRET_CAST	335
#define	RETURN	336
#define	SIZEOF	337
#define	STATIC_CAST	338
#define	SWITCH	339
#define	THIS	340
#define	THROW	341
#define	TRUE	342
#define	TRY	343
#define	TYPEID	344
#define	WHILE	345
#define	CharacterLiteral	346
#define	FloatingLiteral	347
#define	Identifier	348
#define	IntegerLiteral	349
#define	NumberLiteral	350
#define	StringLiteral	351
#define	SHIFT_THERE	352
#define	REDUCE_HERE_MOSTLY	353

#line 19 "CxxParser.y"

#include "CxxParsing.hxx"
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		899
#define	YYFLAG		-32768
#define	YYNTBASE	129

#define YYTRANSLATE(x) ((unsigned)(x) <= 353 ? yytranslate[x] : 339)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    12,    26,   128,    29,     7,     9,    25,    21,
    22,     5,     3,    31,     4,    24,     6,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    16,    30,    13,
    15,    14,    23,    28,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    17,    27,    18,     8,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    19,    10,    20,    11,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,    12,    17,    21,    23,    25,    27,
    30,    33,    35,    38,    40,    43,    46,    49,    51,    53,
    56,    58,    61,    64,    66,    69,    71,    73,    75,    77,
    80,    85,    88,    91,    93,    96,    98,   101,   103,   105,
   107,   109,   111,   113,   115,   117,   119,   121,   123,   125,
   127,   129,   133,   136,   139,   143,   144,   146,   151,   160,
   168,   174,   179,   183,   187,   191,   195,   198,   201,   209,
   217,   225,   233,   236,   237,   239,   241,   245,   247,   250,
   253,   256,   260,   263,   266,   269,   272,   275,   277,   280,
   282,   285,   288,   292,   297,   300,   305,   308,   311,   314,
   317,   319,   323,   328,   329,   333,   335,   338,   340,   344,
   348,   350,   354,   358,   362,   364,   368,   372,   374,   378,
   382,   384,   388,   392,   396,   400,   402,   406,   410,   412,
   416,   418,   422,   424,   428,   430,   434,   436,   440,   442,
   448,   450,   454,   458,   460,   462,   464,   466,   468,   470,
   472,   474,   476,   478,   480,   482,   483,   485,   487,   491,
   493,   495,   499,   503,   507,   509,   513,   517,   519,   523,
   525,   529,   531,   535,   537,   541,   543,   547,   549,   555,
   557,   561,   563,   565,   569,   571,   575,   578,   580,   584,
   587,   589,   591,   593,   595,   597,   599,   601,   603,   607,
   612,   616,   620,   628,   629,   632,   639,   645,   653,   659,
   660,   662,   664,   670,   678,   687,   689,   692,   695,   699,
   703,   705,   710,   720,   721,   725,   733,   736,   738,   742,
   745,   747,   749,   751,   753,   755,   757,   759,   762,   764,
   766,   768,   770,   772,   774,   777,   779,   782,   785,   788,
   790,   793,   796,   798,   801,   803,   805,   808,   810,   813,
   815,   818,   820,   822,   825,   827,   830,   832,   835,   839,
   842,   844,   846,   848,   850,   852,   854,   856,   859,   861,
   863,   865,   867,   869,   871,   873,   875,   877,   879,   881,
   883,   885,   887,   890,   892,   894,   896,   898,   900,   902,
   904,   906,   908,   910,   912,   914,   916,   918,   920,   923,
   926,   930,   933,   936,   940,   945,   947,   951,   953,   957,
   958,   962,   964,   968,   971,   973,   977,   979,   983,   986,
   992,   996,  1001,  1006,  1012,  1016,  1020,  1024,  1028,  1030,
  1032,  1035,  1037,  1040,  1042,  1044,  1047,  1049,  1052,  1053,
  1056,  1057,  1060,  1062,  1064,  1067,  1070,  1071,  1074,  1076,
  1077,  1079,  1082,  1086,  1091,  1094,  1098,  1102,  1103,  1105,
  1108,  1110,  1114,  1116,  1120,  1122,  1125,  1129,  1131,  1135,
  1137,  1139,  1141,  1144,  1146,  1148,  1152,  1155,  1157,  1160,
  1164,  1166,  1168,  1171,  1174,  1177,  1180,  1183,  1186,  1188,
  1192,  1196,  1199,  1201,  1203,  1205,  1209,  1214,  1217,  1224,
  1233,  1235,  1239,  1242,  1244,  1248,  1251,  1253,  1256,  1261,
  1267,  1272,  1276,  1279,  1281,  1283,  1285,  1289,  1298,  1299,
  1303,  1311,  1314,  1316,  1320,  1323,  1325,  1327,  1329,  1331,
  1333,  1335,  1338,  1341,  1344,  1347,  1351,  1355,  1359,  1361,
  1363,  1366,  1370,  1373,  1375,  1381,  1383,  1387,  1389,  1393,
  1395,  1398,  1401,  1403,  1405,  1407,  1410,  1413,  1416,  1417,
  1419,  1422,  1427,  1429,  1432,  1435,  1440,  1445,  1447,  1450,
  1452,  1454,  1456,  1458,  1460,  1462,  1464,  1466,  1468,  1470,
  1472,  1474,  1476,  1478,  1480,  1482,  1484,  1486,  1488,  1490,
  1492,  1494,  1496,  1498,  1500,  1502,  1504,  1506,  1508,  1510,
  1512,  1514,  1516,  1518,  1520,  1522,  1524,  1526,  1529,  1532,
  1535,  1538,  1543,  1545,  1549,  1551,  1555,  1557,  1561,  1563,
  1566,  1568,  1570,  1573,  1577,  1583,  1586,  1588,  1592,  1594,
  1599,  1603,  1605,  1608,  1614,  1616,  1618,  1621,  1623,  1626,
  1630,  1635,  1637,  1641,  1643,  1644,  1645,  1646,  1647,  1648
};

static const short yyrhs[] = {   122,
     0,   129,     0,   130,     0,   130,   132,     3,   321,    14,
     0,   130,   132,     3,    14,     0,   130,   132,     4,     0,
   320,     0,    13,     0,    56,     0,    88,   133,     0,   131,
    56,     0,   131,     0,   134,   135,     0,   135,     0,   133,
   135,     0,    11,   131,     0,    88,   137,     0,   304,     0,
   312,     0,    88,   138,     0,   138,     0,   134,   137,     0,
   134,   139,     0,   139,     0,   133,   139,     0,   136,     0,
   140,     0,   137,     0,   232,     0,   142,   232,     0,   142,
    56,    11,   142,     0,    11,   142,     0,    88,   143,     0,
   143,     0,   134,   144,     0,   144,     0,   133,   145,     0,
   125,     0,   123,     0,   120,     0,   121,     0,   146,     0,
   148,     0,   103,     0,   116,     0,   208,     0,   147,     0,
   114,     0,   222,     0,   151,     0,   263,     0,    17,   179,
    18,     0,    88,   263,     0,   266,    30,     0,   152,   266,
    30,     0,     0,   150,     0,   154,   263,   153,     4,     0,
   154,   263,   153,     3,   152,   334,    19,     1,     0,   154,
   263,   153,     3,   152,   334,     1,     0,   154,   263,   153,
     3,     1,     0,   154,    17,   179,    18,     0,   154,    24,
   141,     0,   154,    24,   145,     0,   154,    32,   141,     0,
   154,    32,   145,     0,   154,    37,     0,   154,    34,     0,
   101,    13,   259,    14,    21,   180,    22,     0,   112,    13,
   259,    14,    21,   180,    22,     0,   109,    13,   259,    14,
    21,   180,    22,     0,    96,    13,   259,    14,    21,   180,
    22,     0,   118,   264,     0,     0,   156,     0,   177,     0,
   156,    31,   177,     0,   154,     0,    37,   164,     0,    34,
   164,     0,   254,   164,     0,   223,   252,   164,     0,     3,
   164,     0,     4,   164,     0,    12,   164,     0,    11,   164,
     0,   111,   157,     0,   159,     0,   133,   159,     0,   158,
     0,   133,   158,     0,    99,   164,     0,   107,   160,   163,
     0,   107,   264,   160,   163,     0,   107,   264,     0,   107,
   264,   264,   163,     0,   229,   256,     0,   229,   161,     0,
   229,   160,     0,   254,   161,     0,   162,     0,    17,   180,
    18,     0,   162,    17,   181,    18,     0,     0,    21,   155,
    22,     0,   157,     0,   151,   164,     0,   164,     0,   165,
    54,   164,     0,   165,    33,   164,     0,   165,     0,   166,
   252,   165,     0,   166,     6,   165,     0,   166,     7,   165,
     0,   166,     0,   167,     3,   166,     0,   167,     4,   166,
     0,   167,     0,   168,    42,   167,     0,   168,    43,   167,
     0,   168,     0,   169,    13,   168,     0,   169,    14,   168,
     0,   169,    38,   168,     0,   169,    36,   168,     0,   169,
     0,   170,    35,   169,     0,   170,    41,   169,     0,   170,
     0,   171,     9,   170,     0,   171,     0,   172,     8,   171,
     0,   172,     0,   173,    10,   172,     0,   173,     0,   174,
    39,   173,     0,   174,     0,   175,    40,   174,     0,   175,
     0,   175,    23,   180,    16,   177,     0,   176,     0,   175,
   178,   177,     0,   175,    15,   281,     0,   328,     0,    15,
     0,    44,     0,    45,     0,    46,     0,    47,     0,    48,
     0,    49,     0,    50,     0,    51,     0,    52,     0,    53,
     0,     0,   180,     0,   177,     0,   156,    31,   177,     0,
   176,     0,   168,     0,   182,    13,   168,     0,   182,    38,
   168,     0,   182,    36,   168,     0,   182,     0,   183,    35,
   182,     0,   183,    41,   182,     0,   183,     0,   184,     9,
   183,     0,   184,     0,   185,     8,   184,     0,   185,     0,
   186,    10,   185,     0,   186,     0,   187,    39,   186,     0,
   187,     0,   188,    40,   187,     0,   188,     0,   188,    23,
   191,    16,   190,     0,   189,     0,   188,   178,   190,     0,
   329,     0,   190,     0,   192,    31,   190,     0,   190,     0,
   192,    31,   190,     0,   336,   194,     0,   195,     0,   332,
     3,   194,     0,   332,     4,     0,   196,     0,   198,     0,
   206,     0,   324,     0,   197,     0,   200,     0,   203,     0,
   205,     0,   129,    16,   193,     0,    94,   181,    16,   193,
     0,    98,    16,   193,     0,    19,   199,    20,     0,    19,
   199,   193,   128,   333,     1,    20,     0,     0,   199,   193,
     0,   199,   193,   128,   333,     1,    30,     0,   106,    21,
   202,    22,   193,     0,   106,    21,   202,    22,   193,   102,
   193,     0,   113,    21,   202,    22,   193,     0,     0,   202,
     0,   266,     0,   119,    21,   202,    22,   193,     0,   100,
   193,   119,    21,   180,    22,    30,     0,   104,    21,   204,
   201,    30,   179,    22,   193,     0,   215,     0,    93,    30,
     0,    97,    30,     0,   110,   179,    30,     0,   105,   130,
    30,     0,   213,     0,    19,   335,   208,    20,     0,    19,
   335,   208,   338,   209,   128,   333,     1,    20,     0,     0,
   208,   338,   209,     0,   208,   338,   209,   128,   333,     1,
    30,     0,   337,   210,     0,   211,     0,   332,     3,   210,
     0,   332,     4,     0,   213,     0,   273,     0,   314,     0,
   323,     0,   212,     0,   249,     0,   244,     0,    88,   212,
     0,   215,     0,   214,     0,   248,     0,   245,     0,   246,
     0,   247,     0,    88,   214,     0,    30,     0,   251,    30,
     0,   250,    30,     0,   226,   215,     0,   232,     0,   216,
   232,     0,   216,   225,     0,   216,     0,    88,   217,     0,
   136,     0,   230,     0,   218,   225,     0,   218,     0,   218,
   216,     0,   219,     0,   220,   219,     0,   140,     0,   220,
     0,   220,   140,     0,   217,     0,   217,   221,     0,   221,
     0,   220,    56,     0,   217,   220,    56,     0,   217,    56,
     0,   227,     0,   228,     0,    83,     0,    89,     0,   258,
     0,   224,     0,   224,     0,    88,   226,     0,    86,     0,
    87,     0,    85,     0,    82,     0,    79,     0,    80,     0,
    84,     0,    91,     0,   231,     0,   230,     0,   258,     0,
   289,     0,   235,     0,   233,     0,    88,   230,     0,   136,
     0,   232,     0,    61,     0,    70,     0,    60,     0,    66,
     0,    64,     0,    65,     0,    67,     0,    68,     0,    63,
     0,    62,     0,    69,     0,   286,     0,   234,     0,    75,
   136,     0,    72,   136,     0,    72,   136,   236,     0,    72,
   236,     0,    19,   237,     0,    19,   241,   237,     0,    19,
   241,    31,   238,     0,    20,     0,   333,     1,    20,     0,
    20,     0,   333,     1,    20,     0,     0,   333,     1,    31,
     0,   239,     0,   241,    31,   239,     0,   240,   242,     0,
   243,     0,   243,    15,   181,     0,   130,     0,    73,   136,
   207,     0,    73,   207,     0,    73,   136,    15,   136,    30,
     0,    90,   141,    30,     0,    90,    75,   141,    30,     0,
    90,    73,   136,    30,     0,    92,    21,   146,    22,    30,
     0,    82,   146,   209,     0,    82,   146,   207,     0,   177,
    31,   251,     0,   250,    31,   251,     0,   177,     0,     5,
     0,   252,   258,     0,   252,     0,   134,   253,     0,     9,
     0,   253,     0,   133,   253,     0,   254,     0,   254,   255,
     0,     0,   254,   256,     0,     0,   257,   258,     0,    77,
     0,    78,     0,   229,   260,     0,   229,   259,     0,     0,
   254,   260,     0,   262,     0,     0,   262,     0,   261,   263,
     0,   261,    17,    18,     0,   261,    17,   181,    18,     0,
   264,   257,     0,   264,   257,   330,     0,    21,   265,    22,
     0,     0,   266,     0,   266,    55,     0,   270,     0,   266,
    31,   270,     0,   255,     0,   166,   252,   256,     0,   267,
     0,   171,     9,     0,   171,     9,   267,     0,   268,     0,
   268,    15,   177,     0,    55,     0,   177,     0,   269,     0,
   226,   270,     0,   190,     0,   272,     0,   272,    15,   190,
     0,   226,   271,     0,   267,     0,   184,     9,     0,   184,
     9,   267,     0,   275,     0,   274,     0,   177,   277,     0,
   177,   279,     0,   226,   274,     0,   276,   277,     0,   276,
   279,     0,   226,   275,     0,   300,     0,   276,    31,   177,
     0,   117,   278,   325,     0,   306,   279,     0,   198,     0,
   177,     0,   281,     0,    19,   282,    20,     0,    19,   282,
    31,    20,     0,    19,    20,     0,    19,   283,   128,   333,
     1,    20,     0,    19,   282,    31,   283,   128,   333,     1,
    20,     0,   283,     0,   282,    31,   283,     0,   336,   284,
     0,   280,     0,   332,     3,   284,     0,   332,     4,     0,
    16,     0,   288,   136,     0,   288,   136,   285,     1,     0,
   288,   136,   285,   301,    19,     0,   288,    16,   301,    19,
     0,   288,   136,    19,     0,   288,    19,     0,    71,     0,
    74,     0,    76,     0,   287,   290,    20,     0,   287,   290,
   338,   291,   128,   333,     1,    20,     0,     0,   290,   338,
   291,     0,   290,   338,   291,   128,   333,     1,    30,     0,
   336,   292,     0,   293,     0,   332,     3,   292,     0,   332,
     4,     0,   297,     0,   294,     0,   273,     0,   246,     0,
   314,     0,    30,     0,   177,    30,     0,   276,    30,     0,
   295,    30,     0,   226,   294,     0,   177,    31,   296,     0,
   276,    31,   300,     0,   295,    31,   296,     0,   177,     0,
   300,     0,   303,    16,     0,   177,    16,   299,     0,    16,
   299,     0,   175,     0,   175,    23,   299,    16,   299,     0,
   298,     0,   298,    15,   280,     0,   302,     0,   301,    31,
   302,     0,   136,     0,   303,   302,     0,    91,   302,     0,
    57,     0,    58,     0,    59,     0,   108,   305,     0,   229,
   256,     0,   229,   305,     0,     0,   307,     0,    16,   308,
     0,    16,   308,   333,     1,     0,   310,     0,   309,   310,
     0,   308,    31,     0,   308,   333,     1,    31,     0,   311,
    21,   155,    22,     0,   136,     0,   108,   313,     0,   107,
     0,    99,     0,     3,     0,     4,     0,     5,     0,     6,
     0,     7,     0,     8,     0,     9,     0,    10,     0,    11,
     0,    12,     0,    15,     0,    13,     0,    14,     0,    44,
     0,    52,     0,    48,     0,    46,     0,    47,     0,    53,
     0,    45,     0,    49,     0,    42,     0,    43,     0,    51,
     0,    50,     0,    35,     0,    41,     0,    38,     0,    36,
     0,    39,     0,    40,     0,    37,     0,    34,     0,    31,
     0,    33,     0,    32,     0,    21,    22,     0,    17,    18,
     0,   315,   211,     0,    81,   314,     0,    88,    13,   316,
    14,     0,   317,     0,   316,    31,   317,     0,   318,     0,
   318,    15,   259,     0,   319,     0,   319,    15,   130,     0,
   271,     0,   333,     1,     0,    71,     0,    75,     0,   315,
    71,     0,   315,    71,   130,     0,    88,   130,    13,   321,
    14,     0,    88,   320,     0,   322,     0,   321,    31,   322,
     0,   271,     0,    88,    13,    14,   211,     0,   117,   198,
   325,     0,   326,     0,   326,   325,     0,    95,    21,   327,
    22,   198,     0,   270,     0,   115,     0,   115,   177,     0,
   115,     0,   115,   190,     0,   115,    21,    22,     0,   115,
    21,   331,    22,     0,   259,     0,   331,    31,   259,     0,
     1,     0,     0,     0,     0,     0,     0,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   303,   304,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   325,   326,   327,   328,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   344,   347,   348,   349,   356,   357,
   358,   359,   360,   361,   362,   363,   364,   375,   378,   379,
   380,   381,   382,   383,   384,   389,   421,   422,   423,   427,
   433,   434,   435,   442,   443,   444,   445,   447,   448,   450,
   452,   454,   458,   460,   461,   463,   464,   465,   466,   467,
   468,   469,   470,   473,   474,   475,   476,   478,   479,   480,
   481,   486,   488,   489,   490,   491,   492,   494,   495,   496,
   497,   501,   503,   504,   505,   507,   511,   512,   513,   514,
   515,   516,   517,   518,   519,   524,   525,   528,   529,   530,
   531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
   541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
   551,   552,   553,   554,   555,   556,   557,   558,   559,   560,
   566,   567,   568,   569,   570,   570,   570,   570,   570,   570,
   570,   570,   570,   570,   570,   575,   576,   577,   578,   579,
   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
   593,   595,   596,   598,   599,   601,   602,   604,   605,   607,
   608,   610,   611,   612,   614,   615,   622,   623,   624,   625,
   626,   628,   629,   630,   631,   632,   633,   634,   635,   636,
   637,   639,   640,   641,   642,   643,   647,   648,   649,   650,
   651,   652,   655,   656,   657,   659,   661,   662,   663,   664,
   665,   670,   671,   673,   674,   675,   676,   677,   678,   679,
   680,   681,   682,   684,   685,   686,   687,   688,   689,   690,
   691,   692,   693,   694,   695,   696,   697,   698,   699,   714,
   715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
   725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
   736,   737,   738,   739,   740,   742,   744,   745,   747,   747,
   747,   748,   749,   751,   752,   753,   755,   756,   757,   759,
   760,   761,   762,   763,   764,   765,   765,   765,   765,   765,
   765,   765,   765,   765,   765,   765,   776,   777,   778,   780,
   781,   782,   783,   784,   785,   786,   787,   788,   789,   790,
   791,   792,   793,   794,   795,   796,   797,   799,   800,   801,
   803,   804,   806,   807,   808,   809,   815,   816,   817,   824,
   825,   826,   827,   828,   829,   830,   831,   832,   834,   835,
   837,   838,   839,   839,   842,   843,   846,   847,   848,   849,
   850,   851,   852,   853,   856,   857,   858,   860,   861,   862,
   863,   864,   871,   872,   873,   874,   875,   876,   877,   878,
   879,   880,   881,   885,   886,   887,   889,   890,   891,   892,
   898,   899,   900,   901,   902,   903,   904,   905,   906,   907,
   908,   909,   910,   917,   918,   919,   920,   921,   922,   923,
   925,   926,   927,   928,   929,   930,   945,   946,   947,   948,
   949,   950,   951,   952,   952,   952,   953,   954,   956,   957,
   958,   960,   961,   962,   963,   964,   965,   966,   969,   970,
   977,   978,   979,   980,   981,   982,   983,   984,   985,   988,
   989,   990,   991,   992,   994,   995,   996,  1002,  1003,  1004,
  1005,  1006,  1007,  1007,  1007,  1012,  1013,  1014,  1022,  1023,
  1024,  1025,  1026,  1027,  1028,  1029,  1030,  1031,  1036,  1046,
  1047,  1052,  1053,  1054,  1055,  1056,  1057,  1058,  1059,  1060,
  1061,  1062,  1063,  1064,  1065,  1066,  1067,  1068,  1069,  1070,
  1071,  1072,  1073,  1074,  1075,  1076,  1077,  1078,  1079,  1080,
  1081,  1082,  1083,  1084,  1085,  1086,  1087,  1088,  1089,  1094,
  1095,  1096,  1097,  1098,  1099,  1100,  1101,  1102,  1103,  1104,
  1105,  1107,  1109,  1110,  1111,  1112,  1116,  1117,  1118,  1128,
  1133,  1135,  1136,  1137,  1138,  1140,  1141,  1142,  1143,  1144,
  1145,  1146,  1147,  1152,  1153,  1154,  1155,  1156,  1157,  1158
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","'+'","'-'",
"'*'","'/'","'%'","'^'","'&'","'|'","'~'","'!'","'<'","'>'","'='","':'","'['",
"']'","'{'","'}'","'('","')'","'?'","'.'","'''","'\"'","'\\'","'@'","'$'","';'",
"','","ARROW","ARROW_STAR","DEC","EQ","GE","INC","LE","LOG_AND","LOG_OR","NE",
"SHL","SHR","ASS_ADD","ASS_AND","ASS_DIV","ASS_MOD","ASS_MUL","ASS_OR","ASS_SHL",
"ASS_SHR","ASS_SUB","ASS_XOR","DOT_STAR","ELLIPSIS","SCOPE","PRIVATE","PROTECTED",
"PUBLIC","BOOL","CHAR","DOUBLE","FLOAT","INT","LONG","SHORT","SIGNED","UNSIGNED",
"VOID","WCHAR_T","CLASS","ENUM","NAMESPACE","STRUCT","TYPENAME","UNION","CONST",
"VOLATILE","AUTO","EXPLICIT","EXPORT","EXTERN","FRIEND","INLINE","MUTABLE","REGISTER",
"STATIC","TEMPLATE","TYPEDEF","USING","VIRTUAL","ASM","BREAK","CASE","CATCH",
"CONST_CAST","CONTINUE","DEFAULT","DELETE","DO","DYNAMIC_CAST","ELSE","FALSE",
"FOR","GOTO","IF","NEW","OPERATOR","REINTERPRET_CAST","RETURN","SIZEOF","STATIC_CAST",
"SWITCH","THIS","THROW","TRUE","TRY","TYPEID","WHILE","CharacterLiteral","FloatingLiteral",
"Identifier","IntegerLiteral","NumberLiteral","StringLiteral","SHIFT_THERE",
"REDUCE_HERE_MOSTLY","'#'","identifier_word","identifier","id","template_test",
"global_scope","id_scope","nested_id","scoped_id","destructor_id","special_function_id",
"nested_special_function_id","scoped_special_function_id","declarator_id","built_in_type_id",
"pseudo_destructor_id","nested_pseudo_destructor_id","scoped_pseudo_destructor_id",
"string","literal","boolean_literal","translation_unit","primary_expression",
"abstract_expression","type1_parameters","mark_type1","postfix_expression","expression_list.opt",
"expression_list","unary_expression","delete_expression","new_expression","new_type_id",
"new_declarator","direct_new_declarator","new_initializer.opt","cast_expression",
"pm_expression","multiplicative_expression","additive_expression","shift_expression",
"relational_expression","equality_expression","and_expression","exclusive_or_expression",
"inclusive_or_expression","logical_and_expression","logical_or_expression","conditional_expression",
"assignment_expression","assignment_operator","expression.opt","expression",
"constant_expression","templated_relational_expression","templated_equality_expression",
"templated_and_expression","templated_exclusive_or_expression","templated_inclusive_or_expression",
"templated_logical_and_expression","templated_logical_or_expression","templated_conditional_expression",
"templated_assignment_expression","templated_expression","templated_expression_list",
"looping_statement","looped_statement","statement","control_statement","labeled_statement",
"compound_statement","statement_seq.opt","selection_statement","condition.opt",
"condition","iteration_statement","for_init_statement","jump_statement","declaration_statement",
"compound_declaration","declaration_seq.opt","looping_declaration","looped_declaration",
"declaration","specialised_declaration","block_declaration","specialised_block_declaration",
"simple_declaration","suffix_built_in_decl_specifier.raw","suffix_built_in_decl_specifier",
"suffix_named_decl_specifier","suffix_named_decl_specifier.bi","suffix_named_decl_specifiers",
"suffix_named_decl_specifiers.sf","suffix_decl_specified_ids","suffix_decl_specified_scope",
"decl_specifier_affix","decl_specifier_suffix","decl_specifier_prefix","storage_class_specifier",
"function_specifier","type_specifier","elaborate_type_specifier","simple_type_specifier",
"built_in_type_specifier","elaborated_type_specifier","elaborated_enum_specifier",
"enum_specifier","enumerator_clause","enumerator_list_ecarb","enumerator_definition_ecarb",
"enumerator_definition_filler","enumerator_list_head","enumerator_list","enumerator_definition",
"enumerator","namespace_definition","namespace_alias_definition","using_declaration",
"using_directive","asm_definition","linkage_specification","init_declarations",
"init_declaration","star_ptr_operator","nested_ptr_operator","ptr_operator",
"ptr_operator_seq","ptr_operator_seq.opt","cv_qualifier_seq.opt","cv_qualifier",
"type_id","abstract_declarator.opt","direct_abstract_declarator.opt","direct_abstract_declarator",
"parenthesis_clause","parameters_clause","parameter_declaration_clause","parameter_declaration_list",
"abstract_pointer_declaration","abstract_parameter_declaration","special_parameter_declaration",
"parameter_declaration","templated_parameter_declaration","templated_abstract_declaration",
"function_definition","func_definition","ctor_definition","constructor_head",
"function_try_block","function_block","function_body","initializer_clause","braced_initializer",
"initializer_list","looping_initializer_clause","looped_initializer_clause",
"colon_mark","elaborated_class_specifier","class_specifier_head","class_key",
"class_specifier","member_specification.opt","looping_member_declaration","looped_member_declaration",
"member_declaration","simple_member_declaration","member_init_declarations",
"member_init_declaration","accessibility_specifier","bit_field_declaration",
"bit_field_width","bit_field_init_declaration","base_specifier_list","base_specifier",
"access_specifier","conversion_function_id","conversion_type_id","ctor_initializer.opt",
"ctor_initializer","mem_initializer_list","mem_initializer_list_head","mem_initializer",
"mem_initializer_id","operator_function_id","operator","template_declaration",
"template_parameter_clause","template_parameter_list","template_parameter","simple_type_parameter",
"templated_type_parameter","template_id","template_argument_list","template_argument",
"explicit_specialization","try_block","handler_seq","handler","exception_declaration",
"throw_expression","templated_throw_expression","exception_specification","type_id_list",
"advance_search","bang","mark","nest","start_search","start_search1","util", NULL
};
#endif

static const short yyr1[] = {     0,
   129,   130,   131,   131,   131,   131,   131,   132,   133,   133,
   134,   135,   135,   136,   136,   137,   137,   138,   138,   138,
   139,   139,   139,   140,   140,   141,   141,   141,   142,   142,
   143,   143,   143,   144,   144,   145,   145,   146,   147,   147,
   147,   147,   147,   148,   148,   149,   150,   150,   150,   150,
   151,   151,   151,   152,   152,   153,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   155,   155,   156,   156,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   158,   159,   159,   159,   159,   160,   160,   160,   161,
   161,   162,   162,   163,   163,   164,   164,   165,   165,   165,
   166,   166,   166,   166,   167,   167,   167,   168,   168,   168,
   169,   169,   169,   169,   169,   170,   170,   170,   171,   171,
   172,   172,   173,   173,   174,   174,   175,   175,   176,   176,
   177,   177,   177,   177,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   179,   179,   180,   180,   181,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   185,   186,   186,   187,   187,   188,   188,   189,   189,   190,
   190,   190,   191,   191,   192,   192,   193,   194,   194,   194,
   195,   195,   195,   195,   196,   196,   196,   196,   197,   197,
   197,   198,   198,   199,   199,   199,   200,   200,   200,   201,
   201,   202,   203,   203,   203,   204,   205,   205,   205,   205,
   206,   207,   207,   208,   208,   208,   209,   210,   210,   210,
   211,   211,   211,   211,   211,   212,   212,   212,   213,   213,
   214,   214,   214,   214,   214,   215,   215,   215,   215,   216,
   216,   216,   217,   217,   218,   218,   218,   219,   219,   220,
   220,   221,   221,   221,   222,   222,   222,   223,   223,   223,
   224,   224,   224,   224,   224,   225,   226,   226,   227,   227,
   227,   227,   227,   228,   228,   228,   229,   229,   229,   230,
   230,   230,   230,   231,   231,   232,   232,   232,   232,   232,
   232,   232,   232,   232,   232,   232,   233,   233,   233,   234,
   235,   235,   236,   236,   236,   237,   237,   238,   238,   239,
   239,   240,   240,   241,   242,   242,   243,   244,   244,   245,
   246,   246,   247,   248,   249,   249,   250,   250,   251,   252,
   252,   253,   253,   254,   254,   254,   255,   255,   256,   256,
   257,   257,   258,   258,   259,   259,   260,   260,   260,   261,
   261,   262,   262,   262,   263,   263,   264,   265,   265,   265,
   266,   266,   267,   267,   268,   268,   268,   269,   269,   269,
   270,   270,   270,   271,   271,   271,   271,   272,   272,   272,
   273,   273,   274,   274,   274,   275,   275,   275,   276,   276,
   277,   278,   279,   280,   280,   281,   281,   281,   281,   281,
   282,   282,   283,   284,   284,   284,   285,   286,   286,   287,
   287,   287,   287,   288,   288,   288,   289,   289,   290,   290,
   290,   291,   292,   292,   292,   293,   293,   293,   293,   293,
   294,   294,   294,   294,   294,   295,   295,   295,   296,   296,
   297,   298,   298,   299,   299,   300,   300,   301,   301,   302,
   302,   302,   303,   303,   303,   304,   305,   305,   306,   306,
   307,   307,   308,   308,   309,   309,   310,   311,   312,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   313,
   313,   313,   313,   313,   313,   313,   313,   313,   313,   314,
   314,   315,   316,   316,   317,   317,   317,   317,   317,   317,
   318,   318,   319,   319,   320,   320,   321,   321,   322,   323,
   324,   325,   325,   326,   327,   328,   328,   329,   329,   330,
   330,   331,   331,   332,   333,   334,   335,   336,   337,   338
};

static const short yyr2[] = {     0,
     1,     1,     1,     5,     4,     3,     1,     1,     1,     2,
     2,     1,     2,     1,     2,     2,     2,     1,     1,     2,
     1,     2,     2,     1,     2,     1,     1,     1,     1,     2,
     4,     2,     2,     1,     2,     1,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     2,     2,     3,     0,     1,     4,     8,     7,
     5,     4,     3,     3,     3,     3,     2,     2,     7,     7,
     7,     7,     2,     0,     1,     1,     3,     1,     2,     2,
     2,     3,     2,     2,     2,     2,     2,     1,     2,     1,
     2,     2,     3,     4,     2,     4,     2,     2,     2,     2,
     1,     3,     4,     0,     3,     1,     2,     1,     3,     3,
     1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
     1,     3,     3,     3,     3,     1,     3,     3,     1,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     5,
     1,     3,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     0,     1,     1,     3,     1,
     1,     3,     3,     3,     1,     3,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     5,     1,
     3,     1,     1,     3,     1,     3,     2,     1,     3,     2,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     4,
     3,     3,     7,     0,     2,     6,     5,     7,     5,     0,
     1,     1,     5,     7,     8,     1,     2,     2,     3,     3,
     1,     4,     9,     0,     3,     7,     2,     1,     3,     2,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     1,     1,     1,     1,     2,     1,     2,     2,     2,     1,
     2,     2,     1,     2,     1,     1,     2,     1,     2,     1,
     2,     1,     1,     2,     1,     2,     1,     2,     3,     2,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     3,     2,     2,     3,     4,     1,     3,     1,     3,     0,
     3,     1,     3,     2,     1,     3,     1,     3,     2,     5,
     3,     4,     4,     5,     3,     3,     3,     3,     1,     1,
     2,     1,     2,     1,     1,     2,     1,     2,     0,     2,
     0,     2,     1,     1,     2,     2,     0,     2,     1,     0,
     1,     2,     3,     4,     2,     3,     3,     0,     1,     2,
     1,     3,     1,     3,     1,     2,     3,     1,     3,     1,
     1,     1,     2,     1,     1,     3,     2,     1,     2,     3,
     1,     1,     2,     2,     2,     2,     2,     2,     1,     3,
     3,     2,     1,     1,     1,     3,     4,     2,     6,     8,
     1,     3,     2,     1,     3,     2,     1,     2,     4,     5,
     4,     3,     2,     1,     1,     1,     3,     8,     0,     3,
     7,     2,     1,     3,     2,     1,     1,     1,     1,     1,
     1,     2,     2,     2,     2,     3,     3,     3,     1,     1,
     2,     3,     2,     1,     5,     1,     3,     1,     3,     1,
     2,     2,     1,     1,     1,     2,     2,     2,     0,     1,
     2,     4,     1,     2,     2,     4,     4,     1,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     4,     1,     3,     1,     3,     1,     3,     1,     2,
     1,     1,     2,     3,     5,     2,     1,     3,     1,     4,
     3,     1,     2,     5,     1,     1,     2,     1,     2,     3,
     4,     1,     3,     1,     0,     0,     0,     0,     0,     0
};

static const short yydefact[] = {   224,
   560,   559,   225,     0,   555,   554,     0,     0,   340,   344,
     0,     0,     0,   156,   368,   246,     0,     0,     9,   298,
   296,   305,   304,   300,   301,   299,   302,   303,   306,   297,
   424,     0,     0,   425,     0,   426,   353,   354,   283,   284,
     0,   282,   273,   285,   281,   279,   280,     0,   274,     0,
   286,     0,     0,     0,     0,    44,     0,     0,     0,     0,
     0,    48,   546,    45,     0,    40,    41,     1,    39,    38,
     2,     3,    12,     0,     0,    14,   255,    21,    24,   262,
    42,    47,    43,    57,    50,    78,   106,    90,    88,   108,
   111,   115,   118,   121,   126,   129,   131,   133,   135,   137,
   139,   141,   339,   227,   228,   235,   231,   240,   239,   253,
   265,   258,   260,   263,   267,    49,     0,   277,     0,   271,
   272,   256,   250,   292,   308,   291,   237,   242,   243,   244,
   241,   236,     0,     0,   342,   345,     0,   275,    51,   351,
   232,   392,   391,     0,   307,   429,     0,   290,   456,   399,
    18,    19,   233,     0,     7,   234,   144,     0,     0,     0,
    83,    84,    86,    85,   454,   453,     0,   158,     0,   157,
   380,   282,     0,   115,   131,   381,     0,   347,   373,     0,
   369,   375,   378,   382,   371,    80,    79,   320,     0,     0,
     0,   310,   312,   557,     0,   329,   309,     0,   521,   559,
   555,     0,     0,    10,    20,   238,   245,   254,   278,   293,
    53,   536,     0,     0,     0,     0,     0,     0,    26,    28,
    27,     0,     0,     0,    92,     0,     0,   294,   104,   349,
   288,   287,   295,   289,    95,   482,   483,   484,   485,   486,
   487,   488,   489,   490,   491,   493,   494,   492,     0,     0,
   515,   517,   516,   514,   507,   510,   513,   509,   511,   512,
   508,   503,   504,   495,   501,   498,   499,   497,   502,   506,
   505,   496,   500,   481,   480,   349,   466,   479,     0,    50,
    87,     0,   547,    73,     8,     0,    11,     0,    15,    25,
    91,    89,   346,     0,    13,    22,    23,   343,   107,   156,
     0,     0,    68,    67,    56,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   145,     0,     0,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,     0,     0,   204,
     0,   469,   403,   393,   394,   276,   252,   251,     9,     0,
   263,   266,   259,   257,     9,   264,   261,     0,   249,   395,
   398,   248,     0,   247,   341,    81,   365,     0,   396,   397,
   560,     0,   423,   418,     0,   520,     0,   230,     0,     0,
     0,     0,    52,     0,   349,   376,   383,   348,   367,     0,
   370,     0,   316,   313,   322,     0,   555,     0,     0,   311,
   224,     0,   328,   555,   336,   335,     0,   424,   532,     0,
   548,   161,   165,   168,   170,   172,   174,   176,   178,   180,
   384,     0,   388,   529,   385,     0,     0,   523,   525,   527,
   182,     0,     0,    16,     0,     0,    17,   331,     0,   357,
     0,     0,    74,    93,     0,     0,     0,    99,    98,   101,
   349,    97,   104,   104,   519,   518,   349,   467,   468,     0,
     0,     0,     6,     0,     0,     0,     0,     0,    63,     0,
    34,    36,    64,    29,    65,    66,     0,   110,   109,   113,
   114,   112,   116,   117,   119,   120,   122,   123,   125,   124,
   127,   128,   130,   132,   134,   136,   558,   143,     0,   138,
   142,   452,   558,   339,   337,     0,     0,     0,   470,     9,
    82,   338,     0,   352,   366,   400,   427,   558,   463,   464,
   465,     0,   460,     0,   458,     0,   417,   422,     0,   404,
   457,   405,   229,   226,     0,   159,   349,   374,   377,   372,
   379,   327,   324,   325,   320,   314,     0,     0,   560,     0,
   540,   170,   549,     0,     0,     0,     0,     0,   389,     0,
     0,     0,   145,     0,     0,     0,   387,     0,   533,   522,
   555,     0,     0,   530,   539,     0,   537,   333,   332,     0,
   357,   356,   355,     0,   359,     0,     0,     0,    75,    76,
     0,     0,     0,     0,     0,   100,   350,    94,    96,     0,
     0,     5,     0,    62,    32,    33,     0,     0,     0,    37,
     0,    35,     0,    30,     0,    58,   408,     0,   411,     0,
     0,   202,   205,     0,   478,   471,     0,   473,     0,     0,
   401,   542,   402,     0,   430,     0,   462,   421,     0,   461,
   419,     0,     0,     0,   318,   315,   323,     0,     0,   317,
   321,   222,   559,   330,     0,   162,   164,   163,   166,   167,
   169,   390,   171,   173,   175,   183,     0,     0,   177,   181,
   386,   534,   524,   526,   528,   535,     0,   334,   358,     0,
   362,     0,     0,   105,     0,   102,   139,   160,     0,     0,
     0,     4,     0,     0,     0,    61,   556,     0,   406,   558,
   555,   414,   413,     0,   140,   555,     0,     0,     0,     0,
     0,     0,   558,     0,     0,     0,   156,     0,     0,     0,
     2,   339,   187,   188,   191,   195,   192,   196,   197,   198,
   193,   221,     0,   194,     0,   475,     0,   474,    74,     0,
   543,   550,   552,     0,   555,   441,     0,     0,     0,   439,
   438,     0,   432,   433,   437,     0,   436,     0,   440,     0,
   459,   420,   455,   326,     0,   225,     0,     0,   538,   363,
     0,     0,     0,    77,   103,     0,     0,     0,    31,     0,
     0,    54,   407,   412,     0,     0,   416,     0,     0,     0,
   217,     0,   218,   558,     0,     0,     0,     0,     0,     0,
     0,     0,   558,     0,   190,   472,     0,   545,     0,   551,
     0,     0,   442,     0,   445,   443,     0,   444,     0,   451,
     0,   435,   319,   555,   179,   184,   364,    72,    69,    71,
    70,    55,    60,     0,   555,     0,   415,     0,   558,   201,
     0,   210,   216,   220,     0,   212,   219,     0,   541,     0,
   199,   189,   476,   477,     0,   553,     0,   449,   446,   450,
   400,   447,   448,   434,     0,    59,     0,   409,   203,   206,
   200,     0,     0,   211,   558,   558,   558,   544,   428,   431,
     0,     0,     0,   156,   207,   209,   213,   223,   410,     0,
     0,   558,   214,   558,   208,   215,     0,     0,     0
};

static const short yydefgoto[] = {    71,
    72,    73,   286,    74,    75,    76,    77,   220,    78,    79,
    80,   222,   470,   471,   472,   610,    81,    82,    83,   897,
    84,    85,   697,   477,    86,   588,   167,    87,    88,    89,
   229,   449,   450,   444,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   168,   338,   169,
   170,   689,   413,   414,   552,   416,   417,   418,   419,   420,
   421,   667,   668,   623,   723,   724,   725,   726,   343,   503,
   728,   873,   845,   729,   842,   730,   731,   196,     1,     3,
   104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   347,   177,   120,   121,   440,
   122,   232,   123,   124,   125,   126,   193,   394,   646,   395,
   396,   397,   543,   544,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,   137,   179,   597,   367,   138,   441,
   583,   584,   585,   139,   140,   180,   846,   182,   183,   184,
   185,   424,   425,   141,   142,   143,   144,   344,   507,   345,
   702,   532,   618,   619,   703,   529,   145,   146,   147,   148,
   371,   635,   753,   754,   755,   756,   859,   757,   149,   166,
   150,   524,   525,   526,   151,   277,   508,   509,   626,   627,
   628,   629,   152,   278,   153,   154,   427,   428,   429,   430,
   155,   576,   577,   156,   734,   631,   632,   809,   157,   431,
   515,   744,   158,   432,   781,   401,   624,     4,     2
};

static const short yypact[] = {-32768,
   104,-32768,    21,  1881,-32768,-32768,  4095,  4095,-32768,-32768,
  4095,  4095,  4095,  3726,  2619,-32768,  4095,  4095,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   277,   295,-32768,    38,-32768,-32768,-32768,-32768,-32768,
   282,    26,-32768,-32768,-32768,-32768,-32768,  4365,-32768,   554,
-32768,   172,   217,  4095,   268,-32768,  4655,  4218,   292,  4095,
   310,-32768,  3726,-32768,   304,-32768,-32768,-32768,-32768,-32768,
-32768,   340,   353,   452,    69,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  4297,   502,-32768,-32768,-32768,-32768,
    94,   525,   503,   534,   664,   130,   414,   418,   439,   404,
  1399,-32768,   102,-32768,-32768,-32768,-32768,-32768,-32768,  1966,
   755,  1966,-32768,   998,-32768,-32768,   455,-32768,  2373,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   556,   428,   511,-32768,  4095,-32768,-32768,-32768,
-32768,-32768,-32768,   284,-32768,-32768,    87,-32768,   456,-32768,
-32768,-32768,-32768,  2250,-32768,-32768,-32768,   589,   472,  4684,
-32768,-32768,-32768,-32768,   115,-32768,   447,   489,   468,-32768,
-32768,-32768,  4586,   525,   513,-32768,  2619,  4095,-32768,   516,
    89,-32768,   520,-32768,-32768,-32768,-32768,    81,    38,   -23,
   -23,   524,-32768,-32768,   377,-32768,-32768,   532,-32768,   537,
  2742,  4748,   545,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   -23,    38,   425,   425,   -17,   236,-32768,-32768,
-32768,   533,    26,  4909,-32768,  4909,   585,-32768,   558,  1494,
-32768,-32768,-32768,-32768,  4655,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   563,   561,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  4267,-32768,-32768,  4909,-32768,
-32768,  4909,-32768,-32768,-32768,   591,-32768,   -17,-32768,-32768,
-32768,-32768,-32768,   236,-32768,-32768,-32768,-32768,-32768,  3726,
   891,   891,-32768,-32768,-32768,  4095,  4095,  4095,  4095,  3357,
  4095,  4095,  4095,  4095,  4095,  4095,  4095,  4095,  4095,  4095,
  4095,  4095,  4095,  4095,   596,  3726,  4095,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  3726,  4095,-32768,
  3726,   602,-32768,-32768,-32768,-32768,-32768,-32768,   620,  1070,
  1097,-32768,  1966,-32768,   626,-32768,-32768,  3357,-32768,-32768,
-32768,-32768,  3726,-32768,-32768,-32768,   387,  3726,-32768,-32768,
   616,   433,-32768,   196,  3480,-32768,  1881,-32768,   615,  4938,
  4095,  3726,-32768,  4860,  3357,  4095,-32768,-32768,-32768,  2619,
-32768,  3726,-32768,-32768,-32768,   517,   300,   657,   -23,-32768,
-32768,    38,-32768,  3111,-32768,-32768,  2250,   276,    38,  4445,
  3849,   534,   262,   306,   654,   675,   679,   655,  1753,-32768,
-32768,  3234,-32768,-32768,   680,   630,   254,-32768,   682,   691,
-32768,   707,  3234,-32768,   683,   685,-32768,-32768,   687,  1419,
   700,   702,  3726,-32768,  3726,   147,   147,-32768,-32768,   704,
   395,-32768,   558,   558,-32768,-32768,   405,-32768,-32768,   705,
   709,  2865,-32768,   706,  1560,   891,   963,  1245,-32768,  1860,
-32768,-32768,-32768,-32768,-32768,-32768,   595,-32768,-32768,    94,
    94,    94,   525,   525,   503,   503,   534,   534,   534,   534,
   664,   664,   130,   414,   418,   439,   713,-32768,   710,   404,
-32768,-32768,   717,-32768,-32768,    38,   627,   719,-32768,   720,
-32768,-32768,   723,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   433,-32768,   278,-32768,   433,-32768,-32768,   453,-32768,
-32768,-32768,-32768,-32768,   711,   697,  4095,-32768,-32768,-32768,
-32768,-32768,-32768,   733,   161,-32768,   749,   325,   734,   725,
-32768,   744,-32768,  4095,  4095,  4095,  4095,  4095,  4095,  4095,
  4095,  4095,-32768,  3849,  4095,  3849,-32768,  3849,   517,-32768,
  3111,  4909,   517,-32768,-32768,   257,-32768,-32768,-32768,   727,
    91,-32768,-32768,   449,   478,   739,   740,   742,   731,-32768,
   750,  4095,   353,   147,   147,-32768,-32768,-32768,-32768,   746,
   753,-32768,   264,-32768,  1258,-32768,  1258,   963,  1320,-32768,
  1245,-32768,   758,-32768,  2004,-32768,-32768,   330,   642,  2127,
  3726,-32768,   643,  1635,-32768,    86,    38,-32768,   754,   756,
-32768,   627,-32768,  4719,   648,  1758,-32768,-32768,   433,-32768,
-32768,   311,  4095,  4095,-32768,-32768,-32768,   777,   759,-32768,
-32768,-32768,-32768,-32768,  4095,   534,   534,   534,   262,   262,
   306,-32768,   744,   675,   679,   757,   764,   771,   655,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  3234,-32768,-32768,  3972,
-32768,  3726,  3726,-32768,  3726,-32768,   271,-32768,   768,  3726,
  3726,-32768,  1320,  1523,  1258,-32768,  2619,   578,-32768,   767,
-32768,-32768,-32768,   609,-32768,-32768,    38,  4514,   760,  4095,
   765,   787,-32768,   785,   517,   793,  3726,   795,   719,   797,
   804,   803,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  2988,-32768,   631,-32768,   827,-32768,  3726,  2619,
-32768,-32768,-32768,    47,-32768,-32768,   748,   123,  2496,-32768,
-32768,   444,-32768,-32768,-32768,   613,-32768,   819,-32768,   644,
-32768,-32768,-32768,-32768,   415,   712,  3849,  3849,-32768,-32768,
   821,   815,   823,-32768,-32768,   824,   825,  1523,  1258,   621,
    88,-32768,-32768,   722,   847,  2127,-32768,   850,   837,  4811,
-32768,   838,-32768,-32768,   741,  2988,   832,  2619,   834,  2619,
   627,  2619,-32768,  1635,-32768,   822,   844,-32768,   845,-32768,
  4909,   868,-32768,  3603,-32768,-32768,  3603,-32768,  3603,-32768,
  1758,-32768,-32768,-32768,-32768,   841,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   873,-32768,   858,-32768,   177,-32768,-32768,
   859,  2619,-32768,-32768,   860,   854,-32768,   865,-32768,   869,
-32768,-32768,-32768,-32768,   719,-32768,   186,   876,-32768,-32768,
   876,-32768,-32768,-32768,   892,-32768,   893,-32768,-32768,-32768,
-32768,  3726,   871,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   318,   875,   877,  3726,   796,-32768,-32768,-32768,-32768,   878,
   881,-32768,-32768,-32768,-32768,-32768,   906,   907,-32768
};

static const short yypgoto[] = {  -586,
   -44,   -24,-32768,   708,   826,     9,    78,   -38,    22,   -30,
   -29,  -161,  -433,  -410,  -428,   364,    -6,-32768,-32768,-32768,
-32768,   849,-32768,-32768,-32768,   166,  -427,   852,   839,   840,
   132,   464,-32768,   221,   247,   206,     7,   366,   689,   367,
  -240,    -1,   593,   594,   592,    10,  -546,    -4,   501,  -283,
  -275,  -514,   134,  -496,  -173,   360,   363,   361,-32768,-32768,
  -323,-32768,-32768,  -672,   124,-32768,-32768,-32768,  -594,-32768,
-32768,-32768,  -516,-32768,-32768,-32768,-32768,   267,   526,  -185,
   552,  -125,    12,  -571,   -39,  -114,   818,   -41,-32768,   -88,
   820,   833,-32768,-32768,   -79,   836,    75,-32768,-32768,     4,
   715,-32768,   905,-32768,-32768,-32768,   772,   536,-32768,   391,
-32768,-32768,-32768,-32768,-32768,-32768,  -579,-32768,-32768,-32768,
-32768,  -266,   -65,   -26,    -9,   788,  -183,-32768,   270,  -187,
   365,-32768,-32768,   -36,    11,-32768,   -12,   -87,-32768,-32768,
  -158,  -398,-32768,  -570,  -111,  -109,  -593,  -131,-32768,  -126,
   574,   640,-32768,   269,   181,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   149,-32768,   219,-32768,   152,-32768,-32768,  -314,
  -316,   446,  -449,  -564,-32768,   701,-32768,-32768,-32768,-32768,
   349,-32768,-32768,-32768,   -40,  -181,-32768,   409,-32768,-32768,
   684,   519,   305,-32768,-32768,  -590,-32768,-32768,-32768,-32768,
-32768,-32768,  -534,    -3,-32768,-32768,  -463,-32768,  -313
};


#define	YYLAST		5060


static const short yytable[] = {   103,
   199,   159,   181,   203,   359,   178,   208,   360,   207,   361,
   176,   211,   369,   175,   406,   589,   464,   370,   387,   426,
   221,   174,   165,   567,   502,   357,   310,   415,   376,   727,
   346,   605,   346,   620,   575,   200,   296,   721,   442,   612,
   795,   741,   752,   290,   297,   688,   452,   293,   298,   305,
   499,   358,   732,   436,   636,   606,   750,   518,   283,   206,
   230,   276,   661,   575,   399,   751,   535,   235,   810,   205,
   288,   758,   637,     9,   505,   284,   640,   811,   119,   213,
   493,  -555,   289,   295,   356,   704,  -555,   553,   833,   735,
    58,   460,   458,    19,   461,     9,   512,   688,    68,    10,
   393,   760,   372,   -46,    68,   373,   834,  -360,   385,   192,
   195,  -360,   197,   423,   103,   203,   736,   339,   208,   390,
   340,   840,   209,   211,   801,   189,   306,   219,   203,   764,
   851,   208,   341,   688,   228,   228,   211,   381,   339,   469,
   475,   340,    19,   391,   203,   493,    19,   307,     5,   103,
    70,     9,   813,   814,   327,   752,   294,   203,   661,    68,
   208,  -555,   207,   688,   319,   771,   871,   178,   178,   591,
   320,   203,   176,   605,   189,   175,    58,   437,   189,   296,
   645,   205,   203,   174,   398,   221,   290,   297,   434,   761,
    68,   178,   223,   119,   205,   792,   869,   606,   289,   295,
   606,   538,   885,   886,   887,   879,   870,   174,    68,   727,
   849,   527,    68,   206,   528,   880,   439,   721,   342,   895,
   451,   896,   426,   205,   374,   289,   295,   752,   119,   224,
   415,   540,   732,   230,   399,   653,   620,   205,   230,   342,
   666,   750,   670,   203,   671,   454,   213,   209,   415,   203,
   751,   704,   582,   161,   162,   437,   758,   163,   164,   415,
   878,   779,   357,   186,   187,   612,   457,   570,    68,   735,
   676,   221,   221,   346,   554,   422,   209,   692,   575,   276,
   226,   551,   606,   848,   571,   850,   760,   677,   415,  -531,
  -531,   435,   219,   326,   677,   188,   638,   555,   539,   556,
   225,   228,   340,   228,   279,   203,  -531,   228,   639,   205,
   327,   589,   228,   194,   368,   205,   423,   483,   484,   393,
   494,   356,   282,   294,    15,   874,   234,   234,   763,   762,
   545,   299,    19,   501,   423,   203,   504,   888,   208,   203,
   557,   639,   208,    58,   650,   423,   558,   534,   165,   699,
    19,   542,   285,   228,   203,   651,   228,    68,   504,   228,
   700,   448,    41,   516,   189,   203,   453,   606,   208,   198,
   530,   205,   103,   211,   423,   537,   178,   536,   219,   219,
   178,   633,   189,   366,   674,   176,   663,   541,   175,   426,
   165,   402,   174,   547,   178,   194,   174,   415,    68,     9,
   342,   205,   103,    10,   365,   205,   772,   773,   287,     9,
   174,   445,   178,    10,   776,   777,    68,   310,   310,   293,
   298,   203,   321,   178,   366,   322,   593,   437,   174,   296,
   581,   205,   593,   799,   823,   213,   290,   297,   590,   174,
   434,   451,   324,   825,   826,   651,   743,   457,   323,   523,
    19,   119,   178,   641,   289,   295,     9,   364,   209,     9,
    19,   403,   340,    37,    38,   680,   405,   766,   174,    15,
   375,   662,   379,   816,   817,   289,   295,   382,   422,   550,
    19,   119,   189,   423,   209,   383,   197,   205,    19,   519,
   520,   521,   189,   234,  -361,   234,   422,   860,  -361,   234,
   862,   513,   860,   415,   234,   311,   312,   422,    19,   519,
   520,   521,   216,   480,   481,   482,    68,   228,   300,   -76,
   189,   386,    15,   522,   672,   301,    68,   537,   675,     9,
   308,   309,    58,   302,   392,   303,   422,   389,   304,   288,
   189,   648,   188,   522,   404,   234,    68,   681,   234,   178,
    54,   234,   478,   479,    68,   194,   593,   433,    57,    58,
   342,   178,   438,   203,   213,   174,   203,   293,   298,   593,
   593,   581,   437,    68,    68,   313,   314,   174,   443,   365,
   455,   808,   456,   625,   593,   362,   363,    37,    38,   423,
   482,   377,   378,   462,   463,   759,   883,   615,   616,   523,
   891,   687,   698,   523,   511,   178,   523,   782,   390,    19,
   176,   786,   787,   175,   497,   530,   705,   506,   359,   722,
   369,   174,   737,   856,  -270,   370,   214,   365,   215,   205,
  -268,   748,   205,   804,   805,   517,   514,   360,    68,   361,
    19,   216,   818,   819,   534,   422,   821,   822,   203,   228,
   832,   390,   165,   687,   365,    31,    32,   548,    34,    35,
    36,    58,   559,   203,   473,   476,   208,   178,   207,   593,
   797,   211,   227,   598,   599,    68,   315,   316,   485,   486,
   774,   843,   560,   174,   780,   491,   492,   178,   561,   687,
   659,   660,   176,   562,   568,   175,   572,   785,   733,   317,
   569,   318,   788,   174,   625,   573,    68,   574,   580,   234,
   749,   228,   578,   586,   579,   587,   523,   221,   600,   687,
   592,   630,   601,   604,  -269,   621,   643,   -77,   722,   205,
   178,   212,   617,   203,   590,   176,   622,   340,   175,   190,
   190,   812,   190,   634,   748,   203,   174,   644,   208,   649,
   207,   422,   655,   652,   654,   204,   678,   217,   213,   682,
   683,   685,   210,   684,   190,   190,   690,   686,   695,   701,
   706,   231,   231,   691,   739,   745,   740,   765,   650,   767,
   759,   530,   209,   366,   789,   775,   783,  -185,   178,   791,
   178,   722,   178,   176,   793,   176,   175,   176,   175,   722,
   175,   768,   794,    19,   174,   796,   174,   733,   174,   858,
   349,   205,   861,   798,   858,   800,   748,   802,   217,   803,
   865,   217,   215,   749,   219,    31,    32,   806,    34,    35,
    36,   867,   178,   341,   820,   216,   828,   176,   827,   824,
   175,   234,   350,   212,   829,   830,   831,   836,   174,   835,
   838,   402,   853,   839,   190,    58,   212,   191,   191,   841,
   191,   844,    58,   847,   209,   854,   855,   204,   857,    68,
   733,  -186,   212,   866,   210,   218,    68,   868,   733,   872,
   204,   875,   191,   191,   390,   212,   876,   210,   228,   412,
   877,   339,   881,   882,   889,   749,   204,   892,   890,   212,
   884,   465,   894,   234,   807,   898,   899,   893,   280,   204,
   212,   281,   291,   292,   596,   495,   210,   496,   500,   566,
   664,   190,   217,   204,   665,   669,   549,   852,   533,   353,
   351,   190,   546,   190,   204,   647,   218,   446,   231,   218,
   231,   210,   190,   352,   231,   679,    19,   354,   531,   231,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   233,   233,   400,   498,   388,   837,   815,   784,   864,
   863,   212,   191,   607,   642,   738,   459,   212,   466,   673,
   603,   769,     0,   446,     0,     0,   190,     0,     0,   190,
   231,     0,     0,   231,     0,     0,   231,     0,    58,     0,
     0,     0,     0,   487,   488,   489,   490,     0,   467,   467,
     0,     0,    68,     0,   348,   191,   191,     0,    19,     0,
     0,     0,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,   212,     0,     0,     0,     0,     0,   191,
   218,     0,   218,   218,     0,     0,     0,     0,     0,   191,
   608,   191,     0,   355,     0,   447,     0,   204,   217,     0,
   191,     0,     0,   212,   210,     0,     0,   212,    31,    32,
    58,    34,    35,    36,     0,     0,     0,     0,     0,   190,
   234,     0,   212,     0,    68,   350,     0,   204,     0,     0,
     0,   204,   412,   212,   210,     0,     0,     0,   210,   412,
     0,   447,     0,     0,   191,    58,     0,   191,     0,   190,
   412,     0,     0,     0,     0,     0,   190,   204,     0,    68,
     0,   412,     0,     0,   210,    19,   468,   468,   233,     0,
   233,     0,     0,     0,   233,     0,     0,     0,     0,   233,
    31,    32,     0,    34,    35,    36,     0,   446,     0,   212,
   412,     0,   510,     0,   231,     0,     0,   350,   594,     0,
     0,     0,     0,     0,   594,     0,     0,    31,    32,     0,
    34,    35,    36,   204,   609,     0,   218,    58,     0,     0,
   233,     0,     0,   233,   350,     0,   233,     0,     0,     0,
     0,    68,     0,     0,     0,     0,     0,   191,     0,     0,
     0,     0,     0,     0,    58,   474,   474,     0,     0,     0,
     0,     0,     0,   190,     0,     0,     0,     0,    68,     0,
     0,     0,     0,     0,     0,     0,     0,   191,     0,   190,
     0,     0,     0,   190,   191,     0,   190,     0,     0,     0,
     0,     0,   656,   657,   658,   412,   412,   412,   412,   412,
   412,     0,   412,   412,   412,   465,   412,   348,     0,   412,
     0,     0,     0,     0,     0,   447,     0,     0,     0,     0,
     0,   447,   447,     0,     0,     0,   595,     0,     0,   190,
     0,     0,   595,     0,     0,     0,   231,     0,   594,     0,
     0,   212,   468,   468,   212,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,   204,   609,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,     0,     0,
   607,   191,   611,     0,   190,     0,     0,     0,     0,     0,
     0,   190,     0,   412,   233,     0,   190,   191,   231,     0,
     0,   191,    58,     0,   191,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   412,    68,     0,     0,   474,
   474,   474,   474,     0,   614,    19,   212,     0,     0,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     0,   212,     0,     0,     0,     0,     0,   191,     0,     0,
   204,     0,     0,     0,     0,     0,   595,   693,     0,     0,
     0,     0,     0,   325,   190,   204,     0,     0,     0,   595,
   595,   326,   210,     9,     0,     0,     0,    10,     0,     0,
     0,     0,     0,     0,   694,  -360,     0,     0,   327,  -360,
     0,    68,   328,   329,   330,   331,   332,   333,   334,   335,
   336,   337,   191,     0,   217,   412,   412,     0,     0,   191,
     0,   212,     0,     0,   191,     0,     0,     0,     0,     0,
     0,     0,     0,   212,    19,     0,   233,     0,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,    34,    35,    36,    37,    38,   204,     9,     0,
     0,     0,    10,     0,   210,     0,   227,     0,     0,   614,
   445,   474,   474,   474,     0,   474,     0,     0,   190,   694,
     0,     0,     0,     0,     0,   231,     0,     0,     0,     0,
     0,     0,   191,   607,     0,     0,     0,     0,   233,     0,
    68,     0,     0,     0,     0,     0,     0,     0,     0,    19,
     0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,    34,    35,    36,
    37,    38,   218,     0,     0,     0,     0,     0,     0,     0,
     0,   227,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,     0,     0,     0,     0,   474,   474,   474,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   778,     0,     0,     0,     0,    68,     0,     0,     0,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     0,     0,     0,     0,     0,     6,   191,     7,     8,     9,
     0,     0,     0,    10,    68,    11,    12,   399,     0,     0,
     0,    14,     0,   340,     0,    15,     0,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,    17,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    68,   474,   614,     0,     0,     0,     0,     0,     0,
    19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,   707,    34,    35,
    36,    37,    38,    39,    40,   233,   172,    43,    44,    45,
    46,    47,   708,    49,    50,    51,    52,   709,   710,     0,
    53,   711,   712,    54,   713,    55,     0,    56,   714,   715,
   716,    57,    58,    59,   717,    60,    61,   718,    62,    63,
    64,   719,    65,   720,    66,    67,    68,    69,     6,    70,
     7,     8,     9,     0,     0,     0,    10,   563,    11,    12,
     0,     0,     0,    13,    14,   564,     0,     0,    15,     0,
     0,     0,     0,     0,     0,     0,     0,   746,     0,     0,
     0,    17,   565,     0,    18,     0,   328,   329,   330,   331,
   332,   333,   334,   335,   336,   337,     0,     0,     0,     0,
     0,     0,     0,    19,   519,   520,   521,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     0,    34,    35,    36,    37,    38,    39,    40,    41,   172,
    43,    44,    45,    46,    47,   410,    49,   747,    51,     0,
     0,     0,     0,    53,     0,     0,    54,     0,    55,     0,
    56,     0,     0,     0,    57,    58,    59,     0,    60,    61,
     0,    62,    63,    64,     0,    65,     0,    66,    67,    68,
    69,     6,    70,     7,     8,     9,     0,     0,     0,    10,
     0,    11,    12,     0,     0,     0,    13,    14,     0,     0,
     0,    15,     0,     0,     0,     0,     0,     0,     0,     0,
    16,     0,     0,     0,    17,   613,     0,    18,     0,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
     0,     0,     0,     0,     0,     0,    19,     0,     0,     0,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,     0,     0,     0,    53,     0,     0,    54,
     0,    55,     0,    56,     0,     0,     0,    57,    58,    59,
     0,    60,    61,     0,    62,    63,    64,     0,    65,     0,
    66,    67,    68,    69,   696,    70,     7,     8,     9,     0,
     0,     0,    10,     0,    11,    12,     0,     0,     0,     0,
    14,     0,     0,     0,    15,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,     0,    17,     0,     0,
    18,     0,    37,    38,    39,    40,     0,   172,    43,    44,
    45,    46,    47,     0,    49,     0,    51,     0,   171,    19,
     0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,    34,    35,    36,
    37,    38,    39,    40,     0,   172,    43,    44,    45,    46,
    47,   173,    49,     0,    51,     0,     0,     0,     0,    53,
     0,     0,    54,     0,    55,     0,    56,     0,     0,     0,
    57,    58,    59,     0,    60,    61,     0,    62,    63,    64,
     0,    65,     0,    66,    67,    68,    69,     6,    70,     7,
     8,     9,     0,     0,     0,    10,     0,    11,    12,     0,
     0,     0,     0,    14,     0,   497,     0,    15,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    17,     0,     0,    18,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    19,     0,     0,     0,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     0,
    34,    35,    36,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   160,     0,     0,     0,     0,     0,
     0,     0,    53,     0,     0,    54,     0,    55,     0,    56,
     0,     0,     0,    57,    58,    59,     0,    60,    61,     0,
    62,    63,    64,     0,    65,     0,    66,    67,    68,    69,
     0,    70,     7,     8,     9,     0,     0,     0,    10,     0,
    11,    12,     0,     0,     0,    13,    14,     0,     0,     0,
    15,     0,     0,     0,     0,     0,     0,     0,     0,    16,
     0,     0,     0,    17,     0,     0,    18,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    19,     0,     0,     0,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,     0,     0,     0,    53,     0,     0,    54,     0,
    55,     0,    56,     0,     0,     0,    57,    58,    59,     0,
    60,    61,     0,    62,    63,    64,     0,    65,     0,    66,
    67,    68,    69,     0,    70,     7,     8,     9,     0,     0,
     0,    10,     0,    11,    12,     0,     0,     0,    13,    14,
     0,     0,     0,    15,     0,     0,     0,     0,     0,     0,
     0,     0,    16,     0,     0,     0,    17,     0,     0,    18,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    19,     0,
     0,     0,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     0,    34,    35,    36,    37,
    38,    39,    40,     0,   172,    43,    44,    45,    46,    47,
   173,    49,     0,    51,     0,     0,     0,     0,    53,     0,
     0,    54,     0,    55,     0,    56,     0,     0,     0,    57,
    58,    59,     0,    60,    61,     0,    62,    63,    64,     0,
    65,     0,    66,    67,    68,    69,     0,    70,     7,     8,
     9,     0,     0,     0,    10,     0,    11,    12,     0,     0,
     0,    13,    14,     0,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,     0,   746,     0,     0,     0,    17,
     0,     0,    18,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    19,     0,     0,     0,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     0,    34,
    35,    36,    37,    38,    39,    40,     0,   172,    43,    44,
    45,    46,    47,   173,    49,     0,    51,     0,     0,     0,
     0,    53,     0,     0,    54,     0,    55,     0,    56,     0,
     0,     0,    57,    58,    59,     0,    60,    61,     0,    62,
    63,    64,     0,    65,     0,    66,    67,    68,    69,     0,
    70,     7,     8,     9,     0,     0,     0,    10,     0,    11,
    12,     0,     0,     0,     0,    14,     0,     0,     0,    15,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    17,     0,     0,    18,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,    19,     0,     0,     0,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,    34,    35,    36,    37,    38,    39,    40,     0,
   172,    43,    44,    45,    46,    47,   173,    49,     0,    51,
     0,     0,     0,     0,    53,     0,     0,    54,     0,    55,
     0,    56,     0,     0,     0,    57,    58,    59,     0,    60,
    61,     0,    62,    63,    64,     0,    65,     0,    66,    67,
    68,    69,     0,    70,     7,     8,     9,     0,     0,     0,
    10,     0,    11,    12,     0,   407,     0,     0,    14,     0,
     0,     0,    15,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    17,     0,     0,    18,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
     0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,   408,    32,     0,    34,   409,    36,    37,    38,
    39,    40,     0,   172,    43,    44,    45,    46,    47,   410,
    49,     0,    51,     0,     0,     0,     0,    53,     0,     0,
    54,     0,    55,     0,    56,     0,     0,     0,    57,    58,
    59,     0,    60,    61,     0,    62,   411,    64,     0,    65,
     0,    66,    67,    68,    69,     0,    70,     7,     8,     9,
     0,     0,     0,    10,     0,    11,    12,     0,   602,     0,
     0,    14,     0,     0,     0,    15,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    17,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     0,    34,    35,
    36,    37,    38,    39,    40,     0,   172,    43,    44,    45,
    46,    47,   173,    49,     0,    51,     0,     0,     0,     0,
    53,     0,     0,    54,     0,    55,     0,    56,     0,     0,
     0,    57,    58,    59,     0,    60,    61,     0,    62,   411,
    64,     0,    65,     0,    66,    67,    68,    69,     0,    70,
     7,     8,     9,     0,     0,     0,    10,     0,    11,    12,
     0,     0,     0,     0,    14,     0,     0,     0,    15,     0,
     0,     0,     0,     0,     0,     0,     0,    16,     0,     0,
     0,    17,     0,     0,    18,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    19,     0,     0,     0,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     0,    34,    35,    36,    37,    38,    39,    40,     0,   172,
    43,    44,    45,    46,    47,   173,    49,     0,    51,     0,
     0,     0,     0,    53,     0,     0,    54,     0,    55,     0,
    56,     0,     0,     0,    57,    58,    59,     0,    60,    61,
     0,    62,    63,    64,     0,    65,     0,    66,    67,    68,
    69,     0,    70,     7,     8,     9,     0,     0,     0,    10,
     0,    11,    12,     0,     0,     0,     0,    14,     0,     0,
     0,    15,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    17,     0,     0,    18,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    19,     0,     0,     0,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,   408,    32,     0,    34,   409,    36,    37,    38,    39,
    40,     0,   172,    43,    44,    45,    46,    47,   410,    49,
     0,    51,     0,     0,     0,     0,    53,     0,     0,    54,
     0,    55,     0,    56,     0,     0,     0,    57,    58,    59,
     0,    60,    61,     0,    62,   411,    64,     0,    65,     0,
    66,    67,    68,    69,     0,    70,     7,     8,     9,     0,
     0,     0,    10,     0,    11,    12,     0,     0,     0,     0,
    14,     0,     0,     0,    15,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    17,     0,     0,
    18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
     0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,    34,    35,    36,
    37,    38,    39,    40,     0,   172,    43,    44,    45,    46,
    47,   173,    49,     0,    51,     0,     0,     0,     0,    53,
     0,     0,    54,     0,    55,     0,    56,     0,     0,     0,
    57,    58,    59,     0,    60,    61,     0,    62,   411,    64,
     0,    65,     0,    66,    67,    68,    69,     0,    70,     7,
     8,     9,     0,     0,     0,    10,     0,    11,    12,     0,
     0,     0,     0,    14,     0,     0,     0,    15,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    17,     0,     0,    18,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    19,     0,     0,     0,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     0,
    34,    35,    36,    37,    38,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   160,     0,     0,     0,     0,     0,
     0,     0,    53,     0,     0,    54,     0,    55,     0,    56,
     0,     0,     0,    57,    58,    59,     0,    60,    61,     0,
    62,     0,    64,     0,    65,     0,    66,    67,    68,    69,
     0,    70,     7,     8,     9,     0,     0,     0,    10,     0,
    11,    12,     0,     0,     0,     0,    14,     0,   497,     0,
    15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    17,     0,     0,    18,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    19,     0,     0,     0,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,     0,    34,    35,    36,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   160,     0,     0,
     0,     0,     0,     0,     0,    53,     0,     0,    54,     0,
    55,     0,    56,     0,     0,     0,    57,    58,    59,     0,
    60,    61,     0,    62,    63,    64,     0,    65,     0,    66,
    67,    68,    69,     0,    70,     7,     8,     9,     0,     0,
     0,    10,     0,    11,    12,     0,     0,     0,    13,    14,
     0,     0,     0,    15,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    17,     0,     0,    18,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    19,     0,
     0,     0,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,     0,    34,    35,    36,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   160,     0,     0,     0,     0,     0,     0,     0,    53,     0,
     0,    54,     0,    55,     0,    56,     0,     0,     0,    57,
    58,    59,     0,    60,    61,     0,    62,    63,    64,     0,
    65,     0,    66,    67,    68,    69,     0,    70,     7,     8,
     9,     0,     0,     0,    10,     0,    11,    12,     0,     0,
     0,     0,    14,     0,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    17,
     0,     0,    18,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    19,     0,     0,     0,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     0,    34,
    35,    36,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   160,     0,     0,     0,     0,     0,     0,
     0,    53,     0,     0,    54,     0,    55,     0,    56,     0,
     0,     0,    57,    58,    59,     0,    60,    61,     0,    62,
    63,    64,     0,    65,     0,    66,    67,    68,    69,     0,
    70,     7,     8,     9,     0,     0,     0,    10,     0,    11,
    12,     0,     0,     0,     0,    14,     0,     0,     0,    15,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    17,     0,     0,    18,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    19,     0,     0,     0,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,     0,    34,    35,    36,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   160,     0,     0,     0,
     0,     0,     0,     0,    53,     0,     0,    54,     0,    55,
     0,    56,     0,     0,     0,    57,    58,    59,     0,    60,
    61,     0,    62,   411,    64,     0,    65,     0,    66,    67,
    68,    69,     0,    70,     7,     8,     9,     0,     0,     0,
    10,     0,    11,    12,     0,     0,     0,     0,    14,   770,
     0,     0,    15,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    17,     0,     0,    18,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
     0,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,     0,    34,    35,    36,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   160,
     0,     0,     0,     0,     0,     0,     0,    53,     0,     0,
    54,     0,    55,     0,    56,     0,     0,     0,    57,    58,
    59,     0,    60,    61,     0,    62,     0,    64,     0,    65,
     0,    66,    67,    68,    69,     0,    70,     7,     8,     9,
     0,     0,     0,    10,     0,    11,    12,     0,     0,     0,
     0,    14,     0,     0,     0,    15,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    17,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     0,    34,    35,
    36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   160,     0,     0,     0,     0,     0,     0,     0,
    53,     0,     0,    54,     0,    55,     0,    56,     0,     0,
     0,    57,    58,    59,     0,    60,    61,     0,    62,     0,
    64,     0,    65,     0,    66,    67,    68,    69,     0,    70,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,     0,   249,     0,     0,     0,   250,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
   263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
   273,     9,     0,    19,     0,    10,     0,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     0,    34,    35,    36,    37,    38,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   227,     0,    11,    12,     0,
     0,     0,     0,     0,     0,     0,   274,    15,     0,     0,
     0,     0,    19,     0,   275,     0,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    68,
    34,    35,    36,    37,    38,     0,     0,     0,     0,     0,
     0,     0,    19,     0,   227,     0,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,     0,
    34,    35,    36,     0,     0,     0,     0,   201,     0,     0,
     0,     0,     0,     0,   160,    15,     0,     0,    68,     0,
     0,     0,    53,     0,     0,    54,     0,    55,     0,    56,
     0,     0,     0,    57,    58,    59,     0,    60,    61,     0,
    62,     0,    64,     0,    65,     0,    66,    67,    68,    69,
    19,    70,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,     0,    42,    43,    44,    45,
    46,    47,   202,    49,    50,    51,    52,   404,     0,     0,
     0,     0,     0,     0,     0,    15,     0,     0,     0,     0,
     0,     0,    58,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    68,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     0,    34,    35,
    36,    37,    38,    39,    40,     0,   172,    43,    44,    45,
    46,    47,   384,    49,    15,    51,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    58,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    68,     0,     0,    19,
     0,     0,     0,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,   707,    34,    35,    36,
    37,    38,    39,    40,     0,   172,    43,    44,    45,    46,
    47,   790,    49,    50,    51,    52,    15,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    58,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    68,     0,     0,     0,     0,
     0,    19,     0,     0,     0,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,     0,    34,
    35,    36,    37,    38,    39,    40,     0,   172,    43,    44,
    45,    46,    47,   384,    49,    15,    51,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    58,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    15,     0,     0,    68,     0,     0,
    19,     0,     0,     0,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,     0,    34,    35,
    36,    37,    38,     0,     0,     0,     0,     0,     0,    19,
   742,     0,   227,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,     0,    34,    35,    36,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   380,     0,     0,    19,     0,    68,     0,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    58,    34,    35,    36,    37,    38,     0,     0,     0,
     0,     0,     0,    19,     0,    68,   227,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,     0,    42,
    43,    44,    45,    46,    47,   202,    49,    50,    51,    52,
    68,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    58,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    19,     0,     0,    68,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,   707,    34,    35,    36,    37,    38,    39,
    40,     0,   172,    43,    44,    45,    46,    47,   790,    49,
    50,    51,    52,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    19,     0,     0,    58,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    68,    34,    35,    36,    37,    38,    39,    40,
     0,   172,    43,    44,    45,    46,    47,   384,    49,     0,
    51,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    19,     0,     0,    58,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    68,    34,    35,    36,    37,    38,     0,     0,     0,
     0,     0,     0,    19,     0,     0,   227,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     0,    34,    35,    36,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   380,     0,     0,     0,     0,
    68,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    58,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    68
};

static const short yycheck[] = {     4,
    41,     5,    15,    48,   119,    15,    48,   119,    48,   119,
    15,    48,   144,    15,   200,   443,   300,   144,   177,   201,
    50,    15,    13,   422,   339,   114,    92,   201,   154,   624,
   110,   465,   112,   497,   433,    42,    75,   624,   226,   468,
   713,   632,   636,    74,    75,   592,   230,    74,    75,    86,
   326,   117,   624,   215,   518,   466,   636,   371,    63,    48,
    57,    58,   559,   462,    88,   636,   381,    57,    22,    48,
    88,   636,   522,     5,   341,    65,   526,    31,     4,    11,
   321,     1,    74,    75,   114,   620,     1,   411,     1,   624,
   108,   279,   276,    56,   282,     5,   363,   644,   122,     9,
    20,   636,    16,     0,   122,    19,    19,    17,   174,    32,
    33,    21,    35,   201,   119,   160,    31,    16,   160,    31,
    19,   794,    48,   160,   719,    88,    33,    50,   173,   644,
   803,   173,    31,   680,    57,    58,   173,    23,    16,   301,
   302,    19,    56,    55,   189,   386,    56,    54,   128,   154,
   125,     5,    30,    31,    40,   749,    88,   202,   655,   122,
   202,     1,   202,   710,    35,   680,   839,   177,   178,   445,
    41,   216,   177,   607,    88,   177,   108,   216,    88,   218,
    20,   160,   227,   177,   188,   215,   217,   218,   213,   639,
   122,   201,    21,   119,   173,   710,    20,   608,   190,   191,
   611,   385,   875,   876,   877,    20,    30,   201,   122,   804,
   801,    16,   122,   202,    19,    30,   223,   804,   117,   892,
   230,   894,   404,   202,   147,   217,   218,   821,   154,    13,
   404,   390,   804,   230,    88,   549,   700,   216,   235,   117,
   564,   821,   566,   288,   568,   235,    11,   173,   422,   294,
   821,   786,   440,     7,     8,   294,   821,    11,    12,   433,
   855,   695,   351,    17,    18,   694,   276,    14,   122,   804,
    14,   301,   302,   353,    13,   201,   202,    14,   677,   276,
    13,   407,   693,   800,    31,   802,   821,    31,   462,    14,
    15,   214,   215,    23,    31,    19,    19,    36,   386,    38,
    54,   224,    19,   226,    13,   350,    31,   230,    31,   288,
    40,   739,   235,    19,    31,   294,   404,   311,   312,    20,
   322,   351,    13,    88,    21,   842,    57,    58,   643,    19,
    31,    85,    56,   338,   422,   380,   341,    20,   380,   384,
    35,    31,   384,   108,    20,   433,    41,    30,   339,    20,
    56,   396,    13,   276,   399,    31,   279,   122,   363,   282,
    31,   230,    81,   368,    88,   410,   235,   778,   410,    88,
   375,   350,   377,   410,   462,   385,   386,   382,   301,   302,
   390,   508,    88,   137,   572,   390,   560,   392,   390,   571,
   381,    15,   386,   397,   404,    19,   390,   571,   122,     5,
   117,   380,   407,     9,   135,   384,   682,   683,    56,     5,
   404,    17,   422,     9,   690,   691,   122,   483,   484,   446,
   447,   466,     9,   433,   178,     8,   451,   466,   422,   468,
   440,   410,   457,   717,    20,    11,   467,   468,   443,   433,
   465,   451,    39,   767,   768,    31,   634,   457,    10,   372,
    56,   377,   462,     1,   446,   447,     5,    30,   384,     5,
    56,   195,    19,    77,    78,    17,   200,   653,   462,    21,
    15,   559,     1,    30,    31,   467,   468,    31,   404,   402,
    56,   407,    88,   571,   410,    18,   409,   466,    56,    57,
    58,    59,    88,   224,    17,   226,   422,   814,    21,   230,
   817,   115,   819,   677,   235,     3,     4,   433,    56,    57,
    58,    59,    88,   308,   309,   310,   122,   440,    17,    31,
    88,     9,    21,    91,   569,    24,   122,   537,   573,     5,
     6,     7,   108,    32,    15,    34,   462,    22,    37,    88,
    88,   545,    19,    91,    13,   276,   122,   584,   279,   559,
    99,   282,   306,   307,   122,    19,   581,    13,   107,   108,
   117,   571,    30,   608,    11,   559,   611,   594,   595,   594,
   595,   581,   611,   122,   122,    42,    43,   571,    21,   310,
    18,   740,    22,   506,   609,    30,    31,    77,    78,   677,
   385,     3,     4,     3,     4,   636,   872,     3,     4,   522,
   884,   592,   615,   526,   358,   615,   529,    30,    31,    56,
   615,     3,     4,   615,    19,   620,   621,    16,   733,   624,
   752,   615,   626,   811,     5,   752,    73,   358,    75,   608,
     5,   636,   611,     3,     4,    20,   367,   749,   122,   749,
    56,    88,    30,    31,    30,   571,     3,     4,   693,   572,
    30,    31,   643,   644,   385,    71,    72,     1,    74,    75,
    76,   108,     9,   708,   301,   302,   708,   677,   708,   694,
   715,   708,    88,   453,   454,   122,    13,    14,   313,   314,
   685,   796,     8,   677,   697,   319,   320,   697,    10,   680,
   557,   558,   697,    39,    15,   697,    15,   701,   624,    36,
    71,    38,   706,   697,   627,    15,   122,     1,    22,   440,
   636,   634,    30,    14,    30,    14,   639,   747,    14,   710,
    17,    95,    14,    18,     5,    16,    16,    31,   733,   708,
   740,    48,    20,   778,   739,   740,    20,    19,   740,    32,
    33,   745,    35,    21,   749,   790,   740,    15,   790,     1,
   790,   677,     9,    20,    30,    48,    30,    50,    11,    21,
    21,    31,    48,    22,    57,    58,    21,    18,    11,   128,
   128,    57,    58,    21,    21,   128,    21,     1,    20,    16,
   821,   786,   708,   537,   707,    18,    20,    31,   798,    30,
   800,   796,   802,   798,    30,   800,   798,   802,   800,   804,
   802,    31,    16,    56,   798,    21,   800,   733,   802,   814,
    56,   790,   817,    21,   819,    21,   821,    21,   111,    16,
   824,   114,    75,   749,   747,    71,    72,     1,    74,    75,
    76,   835,   842,    31,    16,    88,    22,   842,    18,   128,
   842,   572,    88,   160,    22,    22,    22,     1,   842,   128,
     1,    15,    31,    16,   147,   108,   173,    32,    33,   119,
    35,    30,   108,    30,   790,    22,    22,   160,     1,   122,
   796,    31,   189,     1,   160,    50,   122,    20,   804,    21,
   173,    22,    57,    58,    31,   202,    22,   173,   811,   201,
    22,    16,     1,     1,    20,   821,   189,   102,    22,   216,
    30,    11,    22,   634,   739,     0,     0,    30,    60,   202,
   227,    60,    74,    74,   451,   323,   202,   324,   327,   419,
   561,   214,   215,   216,   562,   565,   401,   804,   377,   112,
   111,   224,   397,   226,   227,   545,   111,   230,   224,   114,
   226,   227,   235,   111,   230,   581,    56,   112,   375,   235,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    57,    58,   192,   325,   178,   786,   749,   700,   821,
   819,   288,   147,    11,   529,   627,   276,   294,    88,   571,
   462,   677,    -1,   276,    -1,    -1,   279,    -1,    -1,   282,
   276,    -1,    -1,   279,    -1,    -1,   282,    -1,   108,    -1,
    -1,    -1,    -1,   315,   316,   317,   318,    -1,   301,   302,
    -1,    -1,   122,    -1,   110,   190,   191,    -1,    56,    -1,
    -1,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,   350,    -1,    -1,    -1,    -1,    -1,   214,
   215,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,   224,
    88,   226,    -1,    56,    -1,   230,    -1,   350,   351,    -1,
   235,    -1,    -1,   380,   350,    -1,    -1,   384,    71,    72,
   108,    74,    75,    76,    -1,    -1,    -1,    -1,    -1,   372,
   811,    -1,   399,    -1,   122,    88,    -1,   380,    -1,    -1,
    -1,   384,   404,   410,   380,    -1,    -1,    -1,   384,   411,
    -1,   276,    -1,    -1,   279,   108,    -1,   282,    -1,   402,
   422,    -1,    -1,    -1,    -1,    -1,   409,   410,    -1,   122,
    -1,   433,    -1,    -1,   410,    56,   301,   302,   224,    -1,
   226,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,   235,
    71,    72,    -1,    74,    75,    76,    -1,   440,    -1,   466,
   462,    -1,    56,    -1,   440,    -1,    -1,    88,   451,    -1,
    -1,    -1,    -1,    -1,   457,    -1,    -1,    71,    72,    -1,
    74,    75,    76,   466,   467,    -1,   351,   108,    -1,    -1,
   276,    -1,    -1,   279,    88,    -1,   282,    -1,    -1,    -1,
    -1,   122,    -1,    -1,    -1,    -1,    -1,   372,    -1,    -1,
    -1,    -1,    -1,    -1,   108,   301,   302,    -1,    -1,    -1,
    -1,    -1,    -1,   506,    -1,    -1,    -1,    -1,   122,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,    -1,   522,
    -1,    -1,    -1,   526,   409,    -1,   529,    -1,    -1,    -1,
    -1,    -1,   554,   555,   556,   557,   558,   559,   560,   561,
   562,    -1,   564,   565,   566,    11,   568,   353,    -1,   571,
    -1,    -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,
    -1,   446,   447,    -1,    -1,    -1,   451,    -1,    -1,   572,
    -1,    -1,   457,    -1,    -1,    -1,   572,    -1,   581,    -1,
    -1,   608,   467,   468,   611,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,   608,   609,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    -1,    -1,
    11,   506,    88,    -1,   627,    -1,    -1,    -1,    -1,    -1,
    -1,   634,    -1,   655,   440,    -1,   639,   522,   634,    -1,
    -1,   526,   108,    -1,   529,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   677,   122,    -1,    -1,   465,
   466,   467,   468,    -1,   470,    56,   693,    -1,    -1,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    -1,   708,    -1,    -1,    -1,    -1,    -1,   572,    -1,    -1,
   693,    -1,    -1,    -1,    -1,    -1,   581,    88,    -1,    -1,
    -1,    -1,    -1,    15,   707,   708,    -1,    -1,    -1,   594,
   595,    23,   708,     5,    -1,    -1,    -1,     9,    -1,    -1,
    -1,    -1,    -1,    -1,   609,    17,    -1,    -1,    40,    21,
    -1,   122,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,   627,    -1,   747,   767,   768,    -1,    -1,   634,
    -1,   778,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   790,    56,    -1,   572,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    -1,    74,    75,    76,    77,    78,   790,     5,    -1,
    -1,    -1,     9,    -1,   790,    -1,    88,    -1,    -1,   605,
    17,   607,   608,   609,    -1,   611,    -1,    -1,   811,   694,
    -1,    -1,    -1,    -1,    -1,   811,    -1,    -1,    -1,    -1,
    -1,    -1,   707,    11,    -1,    -1,    -1,    -1,   634,    -1,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,
    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
    77,    78,   747,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    88,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    -1,    -1,    -1,    -1,   693,   694,   695,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    -1,    -1,    -1,    -1,    -1,     1,   811,     3,     4,     5,
    -1,    -1,    -1,     9,   122,    11,    12,    88,    -1,    -1,
    -1,    17,    -1,    19,    -1,    21,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   122,   778,   779,    -1,    -1,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,   811,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    -1,
    96,    97,    98,    99,   100,   101,    -1,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,     1,   125,
     3,     4,     5,    -1,    -1,    -1,     9,    15,    11,    12,
    -1,    -1,    -1,    16,    17,    23,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,
    -1,    34,    40,    -1,    37,    -1,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,
   103,    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,
    -1,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
   123,     1,   125,     3,     4,     5,    -1,    -1,    -1,     9,
    -1,    11,    12,    -1,    -1,    -1,    16,    17,    -1,    -1,
    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    30,    -1,    -1,    -1,    34,    56,    -1,    37,    -1,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,
    -1,   101,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
    -1,   111,   112,    -1,   114,   115,   116,    -1,   118,    -1,
   120,   121,   122,   123,     1,   125,     3,     4,     5,    -1,
    -1,    -1,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    -1,    -1,    -1,    21,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    -1,    34,    -1,    -1,
    37,    -1,    77,    78,    79,    80,    -1,    82,    83,    84,
    85,    86,    87,    -1,    89,    -1,    91,    -1,    55,    56,
    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
    77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
    87,    88,    89,    -1,    91,    -1,    -1,    -1,    -1,    96,
    -1,    -1,    99,    -1,   101,    -1,   103,    -1,    -1,    -1,
   107,   108,   109,    -1,   111,   112,    -1,   114,   115,   116,
    -1,   118,    -1,   120,   121,   122,   123,     1,   125,     3,
     4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    -1,    19,    -1,    21,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,
    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,    -1,
   114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
    -1,   125,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
    11,    12,    -1,    -1,    -1,    16,    17,    -1,    -1,    -1,
    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,
    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
   101,    -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,
   111,   112,    -1,   114,   115,   116,    -1,   118,    -1,   120,
   121,   122,   123,    -1,   125,     3,     4,     5,    -1,    -1,
    -1,     9,    -1,    11,    12,    -1,    -1,    -1,    16,    17,
    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    37,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
    78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
    88,    89,    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,
    -1,    99,    -1,   101,    -1,   103,    -1,    -1,    -1,   107,
   108,   109,    -1,   111,   112,    -1,   114,   115,   116,    -1,
   118,    -1,   120,   121,   122,   123,    -1,   125,     3,     4,
     5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,    -1,
    -1,    16,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,
    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
    75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
    85,    86,    87,    88,    89,    -1,    91,    -1,    -1,    -1,
    -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,
    -1,    -1,   107,   108,   109,    -1,   111,   112,    -1,   114,
   115,   116,    -1,   118,    -1,   120,   121,   122,   123,    -1,
   125,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
    82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
    -1,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
    -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,   111,
   112,    -1,   114,   115,   116,    -1,   118,    -1,   120,   121,
   122,   123,    -1,   125,     3,     4,     5,    -1,    -1,    -1,
     9,    -1,    11,    12,    -1,    14,    -1,    -1,    17,    -1,
    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
    -1,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
    79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
    89,    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,    -1,
    99,    -1,   101,    -1,   103,    -1,    -1,    -1,   107,   108,
   109,    -1,   111,   112,    -1,   114,   115,   116,    -1,   118,
    -1,   120,   121,   122,   123,    -1,   125,     3,     4,     5,
    -1,    -1,    -1,     9,    -1,    11,    12,    -1,    14,    -1,
    -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
    76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
    86,    87,    88,    89,    -1,    91,    -1,    -1,    -1,    -1,
    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,    -1,
    -1,   107,   108,   109,    -1,   111,   112,    -1,   114,   115,
   116,    -1,   118,    -1,   120,   121,   122,   123,    -1,   125,
     3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,
    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    30,    -1,    -1,
    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
    83,    84,    85,    86,    87,    88,    89,    -1,    91,    -1,
    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,
   103,    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,
    -1,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
   123,    -1,   125,     3,     4,     5,    -1,    -1,    -1,     9,
    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,
    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
    80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
    -1,    91,    -1,    -1,    -1,    -1,    96,    -1,    -1,    99,
    -1,   101,    -1,   103,    -1,    -1,    -1,   107,   108,   109,
    -1,   111,   112,    -1,   114,   115,   116,    -1,   118,    -1,
   120,   121,   122,   123,    -1,   125,     3,     4,     5,    -1,
    -1,    -1,     9,    -1,    11,    12,    -1,    -1,    -1,    -1,
    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,
    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
    77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
    87,    88,    89,    -1,    91,    -1,    -1,    -1,    -1,    96,
    -1,    -1,    99,    -1,   101,    -1,   103,    -1,    -1,    -1,
   107,   108,   109,    -1,   111,   112,    -1,   114,   115,   116,
    -1,   118,    -1,   120,   121,   122,   123,    -1,   125,     3,
     4,     5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,
    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,
    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,    -1,
   114,    -1,   116,    -1,   118,    -1,   120,   121,   122,   123,
    -1,   125,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
    11,    12,    -1,    -1,    -1,    -1,    17,    -1,    19,    -1,
    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    -1,    74,    75,    76,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,
   101,    -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,
   111,   112,    -1,   114,   115,   116,    -1,   118,    -1,   120,
   121,   122,   123,    -1,   125,     3,     4,     5,    -1,    -1,
    -1,     9,    -1,    11,    12,    -1,    -1,    -1,    16,    17,
    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,
    -1,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    -1,    74,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,
    -1,    99,    -1,   101,    -1,   103,    -1,    -1,    -1,   107,
   108,   109,    -1,   111,   112,    -1,   114,   115,   116,    -1,
   118,    -1,   120,   121,   122,   123,    -1,   125,     3,     4,
     5,    -1,    -1,    -1,     9,    -1,    11,    12,    -1,    -1,
    -1,    -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,
    -1,    -1,   107,   108,   109,    -1,   111,   112,    -1,   114,
   115,   116,    -1,   118,    -1,   120,   121,   122,   123,    -1,
   125,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    11,
    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    21,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    56,    -1,    -1,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    -1,    74,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    96,    -1,    -1,    99,    -1,   101,
    -1,   103,    -1,    -1,    -1,   107,   108,   109,    -1,   111,
   112,    -1,   114,   115,   116,    -1,   118,    -1,   120,   121,
   122,   123,    -1,   125,     3,     4,     5,    -1,    -1,    -1,
     9,    -1,    11,    12,    -1,    -1,    -1,    -1,    17,    18,
    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,
    -1,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    -1,    74,    75,    76,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,    -1,
    99,    -1,   101,    -1,   103,    -1,    -1,    -1,   107,   108,
   109,    -1,   111,   112,    -1,   114,    -1,   116,    -1,   118,
    -1,   120,   121,   122,   123,    -1,   125,     3,     4,     5,
    -1,    -1,    -1,     9,    -1,    11,    12,    -1,    -1,    -1,
    -1,    17,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
    -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    96,    -1,    -1,    99,    -1,   101,    -1,   103,    -1,    -1,
    -1,   107,   108,   109,    -1,   111,   112,    -1,   114,    -1,
   116,    -1,   118,    -1,   120,   121,   122,   123,    -1,   125,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    -1,    17,    -1,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,     5,    -1,    56,    -1,     9,    -1,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    -1,    74,    75,    76,    77,    78,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    -1,    11,    12,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    99,    21,    -1,    -1,
    -1,    -1,    56,    -1,   107,    -1,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,   122,
    74,    75,    76,    77,    78,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    56,    -1,    88,    -1,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
    74,    75,    76,    -1,    -1,    -1,    -1,    13,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    21,    -1,    -1,   122,    -1,
    -1,    -1,    96,    -1,    -1,    99,    -1,   101,    -1,   103,
    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,    -1,
   114,    -1,   116,    -1,   118,    -1,   120,   121,   122,   123,
    56,   125,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    13,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    21,    -1,    -1,    -1,    -1,
    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
    76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
    86,    87,    88,    89,    21,    91,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    56,
    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    21,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,
    -1,    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
    75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
    85,    86,    87,    88,    89,    21,    91,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    21,    -1,    -1,   122,    -1,    -1,
    56,    -1,    -1,    -1,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
    76,    77,    78,    -1,    -1,    -1,    -1,    -1,    -1,    56,
    22,    -1,    88,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    88,    -1,    -1,    56,    -1,   122,    -1,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,   108,    74,    75,    76,    77,    78,    -1,    -1,    -1,
    -1,    -1,    -1,    56,    -1,   122,    88,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,   122,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    56,    -1,    -1,   108,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,   122,    74,    75,    76,    77,    78,    79,    80,
    -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    56,    -1,    -1,   108,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,   122,    74,    75,    76,    77,    78,    -1,    -1,    -1,
    -1,    -1,    -1,    56,    -1,    -1,    88,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    -1,    74,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 303 "CxxParser.y"
{ yyval.name = yyvsp[0].identifier; ;
    break;}
case 3:
#line 312 "CxxParser.y"
{ yyval.name = YACC_NAME(yyvsp[0].name); ;
    break;}
case 4:
#line 313 "CxxParser.y"
{ yyval.name = YACC_TEMPLATE_NAME(yyvsp[-4].name, yyvsp[-1].template_arguments); ;
    break;}
case 5:
#line 314 "CxxParser.y"
{ yyval.name = yyvsp[-3].name; ERRMSG("Empty template-argument-list"); ;
    break;}
case 6:
#line 315 "CxxParser.y"
{ yyval.name = YACC_NAME(yyvsp[-2].name); ;
    break;}
case 8:
#line 317 "CxxParser.y"
{ template_test(); ;
    break;}
case 9:
#line 318 "CxxParser.y"
{ yyval.is_template = IS_DEFAULT; ;
    break;}
case 10:
#line 319 "CxxParser.y"
{ yyval.is_template = IS_TEMPLATE; ;
    break;}
case 11:
#line 320 "CxxParser.y"
{ yyval.name = YACC_NESTED_SCOPE(yyvsp[-1].name); ;
    break;}
case 13:
#line 326 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 15:
#line 328 "CxxParser.y"
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 16:
#line 335 "CxxParser.y"
{ yyval.name = YACC_DESTRUCTOR_ID(yyvsp[0].name); ;
    break;}
case 17:
#line 336 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 20:
#line 339 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 22:
#line 341 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 23:
#line 342 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 25:
#line 344 "CxxParser.y"
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 30:
#line 357 "CxxParser.y"
{ yyval.built_in_id = YACC_BUILT_IN_IDS(yyvsp[-1].built_in_id, yyvsp[0].built_in_id); ;
    break;}
case 31:
#line 358 "CxxParser.y"
{ yyval.name = YACC_PSEUDO_DESTRUCTOR_ID(yyvsp[-3].built_in_id, yyvsp[0].built_in_id); ;
    break;}
case 32:
#line 359 "CxxParser.y"
{ yyval.name = YACC_PSEUDO_DESTRUCTOR_ID(0, yyvsp[0].built_in_id); ;
    break;}
case 33:
#line 360 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 35:
#line 362 "CxxParser.y"
{ yyval.name = YACC_NESTED_ID(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 37:
#line 364 "CxxParser.y"
{ yyval.name = YACC_GLOBAL_ID(yyvsp[-1].is_template, yyvsp[0].name); ;
    break;}
case 38:
#line 375 "CxxParser.y"
{ yyval.strings = yyvsp[0].string_literal; ;
    break;}
case 39:
#line 378 "CxxParser.y"
{ yyval.expression = YACC_INTEGER_LITERAL_EXPRESSION(yyvsp[0].integer_literal); ;
    break;}
case 40:
#line 379 "CxxParser.y"
{ yyval.expression = YACC_CHARACTER_LITERAL_EXPRESSION(yyvsp[0].character_literal); ;
    break;}
case 41:
#line 380 "CxxParser.y"
{ yyval.expression = YACC_FLOATING_LITERAL_EXPRESSION(yyvsp[0].floating_literal); ;
    break;}
case 42:
#line 381 "CxxParser.y"
{ yyval.expression = YACC_STRING_LITERAL_EXPRESSION(yyvsp[0].strings); ;
    break;}
case 44:
#line 383 "CxxParser.y"
{ yyval.expression = YACC_FALSE_EXPRESSION(); ;
    break;}
case 45:
#line 384 "CxxParser.y"
{ yyval.expression = YACC_TRUE_EXPRESSION(); ;
    break;}
case 46:
#line 389 "CxxParser.y"
{ YACC_RESULT(yyvsp[0].declarations); ;
    break;}
case 48:
#line 422 "CxxParser.y"
{ yyval.expression = YACC_THIS_EXPRESSION(); ;
    break;}
case 49:
#line 423 "CxxParser.y"
{ yyval.expression = yyvsp[0].name; ;
    break;}
case 51:
#line 433 "CxxParser.y"
{ yyval.expression = YACC_ABSTRACT_FUNCTION_EXPRESSION(yyvsp[0].parenthesised); ;
    break;}
case 52:
#line 434 "CxxParser.y"
{ yyval.expression = YACC_ABSTRACT_ARRAY_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 53:
#line 435 "CxxParser.y"
{ yyval.expression = YACC_SET_TEMPLATE_EXPRESSION(YACC_ABSTRACT_FUNCTION_EXPRESSION(yyvsp[0].parenthesised)); ;
    break;}
case 54:
#line 442 "CxxParser.y"
{ yyval.type1_parameters = YACC_TYPE1_PARAMETERS(0, yyvsp[-1].parameters); ;
    break;}
case 55:
#line 443 "CxxParser.y"
{ yyval.type1_parameters = YACC_TYPE1_PARAMETERS(yyvsp[-2].type1_parameters, yyvsp[-1].parameters); ;
    break;}
case 56:
#line 444 "CxxParser.y"
{ yyval.mark = mark_type1(); yyclearin; ;
    break;}
case 58:
#line 447 "CxxParser.y"
{ yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-3].expression, yyvsp[-2].parenthesised); ;
    break;}
case 59:
#line 449 "CxxParser.y"
{ yyerrok; yyclearin; remark_type1(yyvsp[-2].mark); unmark(); unmark(yyvsp[-3].type1_parameters); yyval.expression = YACC_TYPE1_EXPRESSION(yyvsp[-7].expression, yyvsp[-6].parenthesised, yyvsp[-3].type1_parameters); ;
    break;}
case 60:
#line 451 "CxxParser.y"
{ yyerrok; yyclearin; remark_type1(yyvsp[-4].mark); unmark(); unmark(); yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-6].expression, yyvsp[-5].parenthesised); ;
    break;}
case 61:
#line 453 "CxxParser.y"
{ yyerrok; yyclearin; remark_type1(yyvsp[-2].mark); unmark(); yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-4].expression, yyvsp[-3].parenthesised); ;
    break;}
case 62:
#line 454 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 63:
#line 458 "CxxParser.y"
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 64:
#line 460 "CxxParser.y"
{ yyval.expression = YACC_DOT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 65:
#line 461 "CxxParser.y"
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 66:
#line 463 "CxxParser.y"
{ yyval.expression = YACC_ARROW_EXPRESSION(yyvsp[-2].expression, yyvsp[0].name); ;
    break;}
case 67:
#line 464 "CxxParser.y"
{ yyval.expression = YACC_POST_INCREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 68:
#line 465 "CxxParser.y"
{ yyval.expression = YACC_POST_DECREMENT_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 69:
#line 466 "CxxParser.y"
{ yyval.expression = YACC_DYNAMIC_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 70:
#line 467 "CxxParser.y"
{ yyval.expression = YACC_STATIC_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 71:
#line 468 "CxxParser.y"
{ yyval.expression = YACC_REINTERPRET_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 72:
#line 469 "CxxParser.y"
{ yyval.expression = YACC_CONST_CAST_EXPRESSION(yyvsp[-4].expression, yyvsp[-1].expression); ;
    break;}
case 73:
#line 470 "CxxParser.y"
{ yyval.expression = YACC_TYPEID_EXPRESSION(yyvsp[0].parameters); ;
    break;}
case 74:
#line 473 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, 0); ;
    break;}
case 76:
#line 475 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 77:
#line 476 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 79:
#line 479 "CxxParser.y"
{ yyval.expression = YACC_PRE_INCREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 80:
#line 480 "CxxParser.y"
{ yyval.expression = YACC_PRE_DECREMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 81:
#line 481 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 82:
#line 487 "CxxParser.y"
{ yyval.expression = YACC_SCOPED_POINTER_EXPRESSION(yyvsp[-2].name, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 83:
#line 488 "CxxParser.y"
{ yyval.expression = YACC_PLUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 84:
#line 489 "CxxParser.y"
{ yyval.expression = YACC_MINUS_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 85:
#line 490 "CxxParser.y"
{ yyval.expression = YACC_NOT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 86:
#line 491 "CxxParser.y"
{ yyval.expression = YACC_COMPLEMENT_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 87:
#line 492 "CxxParser.y"
{ yyval.expression = YACC_SIZEOF_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 88:
#line 494 "CxxParser.y"
{ yyval.expression = yyvsp[0].new_expression; ;
    break;}
case 89:
#line 495 "CxxParser.y"
{ yyval.expression = YACC_GLOBAL_EXPRESSION(yyvsp[-1].is_template, yyvsp[0].new_expression); ;
    break;}
case 90:
#line 496 "CxxParser.y"
{ yyval.expression = yyvsp[0].delete_expression; ;
    break;}
case 91:
#line 497 "CxxParser.y"
{ yyval.expression = YACC_GLOBAL_EXPRESSION(yyvsp[-1].is_template, yyvsp[0].delete_expression); ;
    break;}
case 92:
#line 502 "CxxParser.y"
{ yyval.delete_expression = YACC_DELETE_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 93:
#line 503 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_TYPE_ID_EXPRESSION(0, yyvsp[-1].expression, yyvsp[0].expressions); ;
    break;}
case 94:
#line 504 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_TYPE_ID_EXPRESSION(yyvsp[-2].parameters, yyvsp[-1].expression, yyvsp[0].expressions); ;
    break;}
case 95:
#line 505 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_EXPRESSION(yyvsp[0].parameters, 0, 0); ;
    break;}
case 96:
#line 507 "CxxParser.y"
{ yyval.new_expression = YACC_NEW_EXPRESSION(yyvsp[-2].parameters, yyvsp[-1].parameters, yyvsp[0].expressions); ;
    break;}
case 97:
#line 511 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 98:
#line 512 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 99:
#line 513 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 100:
#line 514 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 102:
#line 516 "CxxParser.y"
{ yyval.expression = YACC_ABSTRACT_ARRAY_EXPRESSION(yyvsp[-1].expression); ;
    break;}
case 103:
#line 517 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 104:
#line 518 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, 0); ;
    break;}
case 105:
#line 519 "CxxParser.y"
{ yyval.expressions = yyvsp[-1].expressions; ;
    break;}
case 107:
#line 525 "CxxParser.y"
{ yyval.expression = YACC_CAST_EXPRESSION(yyvsp[-1].expression, yyvsp[0].expression); ;
    break;}
case 109:
#line 529 "CxxParser.y"
{ yyval.expression = YACC_DOT_STAR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 110:
#line 530 "CxxParser.y"
{ yyval.expression = YACC_ARROW_STAR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 112:
#line 532 "CxxParser.y"
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 113:
#line 533 "CxxParser.y"
{ yyval.expression = YACC_DIVIDE_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 114:
#line 534 "CxxParser.y"
{ yyval.expression = YACC_MODULUS_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 116:
#line 536 "CxxParser.y"
{ yyval.expression = YACC_ADD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 117:
#line 537 "CxxParser.y"
{ yyval.expression = YACC_SUBTRACT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 119:
#line 539 "CxxParser.y"
{ yyval.expression = YACC_SHIFT_LEFT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 120:
#line 540 "CxxParser.y"
{ yyval.expression = YACC_SHIFT_RIGHT_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 122:
#line 542 "CxxParser.y"
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 123:
#line 543 "CxxParser.y"
{ yyval.expression = YACC_GREATER_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 124:
#line 544 "CxxParser.y"
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 125:
#line 545 "CxxParser.y"
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 127:
#line 547 "CxxParser.y"
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 128:
#line 548 "CxxParser.y"
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 130:
#line 550 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 132:
#line 552 "CxxParser.y"
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 134:
#line 554 "CxxParser.y"
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 136:
#line 556 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 138:
#line 558 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 140:
#line 561 "CxxParser.y"
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 142:
#line 567 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 143:
#line 568 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].initializer_clause); ;
    break;}
case 156:
#line 575 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 159:
#line 578 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression)); ;
    break;}
case 162:
#line 584 "CxxParser.y"
{ yyval.expression = YACC_LESS_THAN_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 163:
#line 585 "CxxParser.y"
{ yyval.expression = YACC_LESS_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 164:
#line 586 "CxxParser.y"
{ yyval.expression = YACC_GREATER_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 166:
#line 588 "CxxParser.y"
{ yyval.expression = YACC_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 167:
#line 589 "CxxParser.y"
{ yyval.expression = YACC_NOT_EQUAL_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 169:
#line 591 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 171:
#line 594 "CxxParser.y"
{ yyval.expression = YACC_EXCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 173:
#line 597 "CxxParser.y"
{ yyval.expression = YACC_INCLUSIVE_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 175:
#line 600 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 177:
#line 603 "CxxParser.y"
{ yyval.expression = YACC_LOGICAL_OR_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 179:
#line 606 "CxxParser.y"
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 181:
#line 609 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 184:
#line 613 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression)); ;
    break;}
case 185:
#line 614 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 186:
#line 615 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 187:
#line 622 "CxxParser.y"
{ yyval.statement = YACC_LINED_STATEMENT(yyvsp[0].statement, yyvsp[-1].line); end_search(yyval.statement); ;
    break;}
case 189:
#line 624 "CxxParser.y"
{ yyval.statement = yyvsp[0].statement; ;
    break;}
case 190:
#line 625 "CxxParser.y"
{ yyval.statement = 0; ;
    break;}
case 194:
#line 630 "CxxParser.y"
{ yyval.statement = YACC_TRY_BLOCK_STATEMENT(yyvsp[0].function_body); ;
    break;}
case 199:
#line 635 "CxxParser.y"
{ yyval.statement = YACC_LABEL_STATEMENT(yyvsp[-2].name, yyvsp[0].statement); ;
    break;}
case 200:
#line 636 "CxxParser.y"
{ yyval.statement = YACC_CASE_STATEMENT(yyvsp[-2].expression, yyvsp[0].statement); ;
    break;}
case 201:
#line 637 "CxxParser.y"
{ yyval.statement = YACC_DEFAULT_STATEMENT(yyvsp[0].statement); ;
    break;}
case 202:
#line 639 "CxxParser.y"
{ yyval.statement = YACC_COMPOUND_STATEMENT(yyvsp[-1].statements); ;
    break;}
case 203:
#line 640 "CxxParser.y"
{ yyval.statement = yyvsp[-5].statements; YACC_UNBANG(yyvsp[-2].bang, "Bad statement-seq."); ;
    break;}
case 204:
#line 641 "CxxParser.y"
{ yyval.statements = YACC_STATEMENTS(0, 0); ;
    break;}
case 205:
#line 642 "CxxParser.y"
{ yyval.statements = YACC_STATEMENTS(yyvsp[-1].statements, YACC_COMPILE_STATEMENT(yyvsp[0].statement)); ;
    break;}
case 206:
#line 643 "CxxParser.y"
{ yyval.statements = yyvsp[-5].statements; YACC_UNBANG(yyvsp[-2].bang, "Bad statement."); ;
    break;}
case 207:
#line 647 "CxxParser.y"
{ yyval.statement = YACC_IF_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement, 0); ;
    break;}
case 208:
#line 648 "CxxParser.y"
{ yyval.statement = YACC_IF_STATEMENT(yyvsp[-4].condition, yyvsp[-2].statement, yyvsp[0].statement); ;
    break;}
case 209:
#line 649 "CxxParser.y"
{ yyval.statement = YACC_SWITCH_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement); ;
    break;}
case 210:
#line 650 "CxxParser.y"
{ yyval.condition = YACC_CONDITION(0); ;
    break;}
case 212:
#line 652 "CxxParser.y"
{ yyval.condition = YACC_CONDITION(yyvsp[0].parameters); ;
    break;}
case 213:
#line 655 "CxxParser.y"
{ yyval.statement = YACC_WHILE_STATEMENT(yyvsp[-2].condition, yyvsp[0].statement); ;
    break;}
case 214:
#line 656 "CxxParser.y"
{ yyval.statement = YACC_DO_WHILE_STATEMENT(yyvsp[-5].statement, yyvsp[-2].expression); ;
    break;}
case 215:
#line 658 "CxxParser.y"
{ yyval.statement = YACC_FOR_STATEMENT(yyvsp[-5].expression, yyvsp[-4].condition, yyvsp[-2].expression, yyvsp[0].statement); ;
    break;}
case 217:
#line 661 "CxxParser.y"
{ yyval.statement = YACC_BREAK_STATEMENT(); ;
    break;}
case 218:
#line 662 "CxxParser.y"
{ yyval.statement = YACC_CONTINUE_STATEMENT(); ;
    break;}
case 219:
#line 663 "CxxParser.y"
{ yyval.statement = YACC_RETURN_STATEMENT(yyvsp[-1].expression); ;
    break;}
case 220:
#line 664 "CxxParser.y"
{ yyval.statement = YACC_GOTO_STATEMENT(yyvsp[-1].name); ;
    break;}
case 221:
#line 665 "CxxParser.y"
{ yyval.statement = YACC_DECLARATION_STATEMENT(yyvsp[0].declaration); ;
    break;}
case 222:
#line 670 "CxxParser.y"
{ yyval.declarations = yyvsp[-1].declarations; unnest(yyvsp[-2].nest); ;
    break;}
case 223:
#line 672 "CxxParser.y"
{ yyval.declarations = yyvsp[-6].declarations; unnest(yyvsp[-7].nest); YACC_UNBANG(yyvsp[-2].bang, "Bad declaration-seq."); ;
    break;}
case 224:
#line 673 "CxxParser.y"
{ yyval.declarations = YACC_DECLARATIONS(0, 0); ;
    break;}
case 225:
#line 674 "CxxParser.y"
{ yyval.declarations = YACC_DECLARATIONS(yyvsp[-2].declarations, YACC_COMPILE_DECLARATION(yyvsp[-1].utility, yyvsp[0].declaration)); ;
    break;}
case 226:
#line 675 "CxxParser.y"
{ yyval.declarations = yyvsp[-6].declarations; YACC_UNBANG(yyvsp[-2].bang, "Bad declaration."); ;
    break;}
case 227:
#line 676 "CxxParser.y"
{ yyval.declaration = YACC_LINED_DECLARATION(yyvsp[0].declaration, yyvsp[-1].line); end_search(yyval.declaration); ;
    break;}
case 229:
#line 678 "CxxParser.y"
{ yyval.declaration = yyvsp[0].declaration; ;
    break;}
case 230:
#line 679 "CxxParser.y"
{ yyval.declaration = 0; ;
    break;}
case 232:
#line 681 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 236:
#line 686 "CxxParser.y"
{ yyval.declaration = YACC_LINKAGE_SPECIFICATION(yyvsp[0].name); ;
    break;}
case 237:
#line 687 "CxxParser.y"
{ yyval.declaration = YACC_NAMESPACE_DECLARATION(yyvsp[0].name); ;
    break;}
case 238:
#line 688 "CxxParser.y"
{ yyval.declaration = YACC_SET_TEMPLATE_DECLARATION(yyvsp[0].declaration); ;
    break;}
case 239:
#line 689 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 245:
#line 695 "CxxParser.y"
{ yyval.declaration = YACC_SET_TEMPLATE_DECLARATION(yyvsp[0].declaration); ;
    break;}
case 246:
#line 696 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 248:
#line 698 "CxxParser.y"
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 249:
#line 699 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 250:
#line 714 "CxxParser.y"
{ yyval.name = yyvsp[0].built_in_id; ;
    break;}
case 251:
#line 715 "CxxParser.y"
{ yyval.name = YACC_BUILT_IN_NAME(yyvsp[-1].name, yyvsp[0].built_in_id); ;
    break;}
case 252:
#line 716 "CxxParser.y"
{ yyval.name = YACC_DECL_SPECIFIER_NAME(yyvsp[-1].name, yyvsp[0].decl_specifier_id); ;
    break;}
case 253:
#line 717 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 254:
#line 718 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_NAME(yyvsp[0].name); ;
    break;}
case 255:
#line 719 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 256:
#line 720 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 257:
#line 721 "CxxParser.y"
{ yyval.name = YACC_DECL_SPECIFIER_NAME(yyvsp[-1].name, yyvsp[0].decl_specifier_id); ;
    break;}
case 258:
#line 722 "CxxParser.y"
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[0].name); ;
    break;}
case 259:
#line 723 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 261:
#line 725 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 262:
#line 726 "CxxParser.y"
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[0].name); ;
    break;}
case 264:
#line 728 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 266:
#line 730 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-1].name, yyvsp[0].name); ;
    break;}
case 269:
#line 733 "CxxParser.y"
{ yyval.name = YACC_TYPED_NAME(yyvsp[-2].name, yyvsp[-1].name); ;
    break;}
case 270:
#line 734 "CxxParser.y"
{ yyval.name = YACC_NAME_EXPRESSION(yyvsp[-1].name); ;
    break;}
case 275:
#line 740 "CxxParser.y"
{ yyval.decl_specifier_id = yyvsp[0].cv_qualifiers; ;
    break;}
case 278:
#line 745 "CxxParser.y"
{ yyval.decl_specifier_id = YACC_SET_TEMPLATE_DECL_SPECIFIER(yyvsp[0].decl_specifier_id); ;
    break;}
case 289:
#line 757 "CxxParser.y"
{ yyval.name = YACC_CV_DECL_SPECIFIER(yyvsp[0].cv_qualifiers); ;
    break;}
case 293:
#line 762 "CxxParser.y"
{ yyval.name = YACC_SET_TEMPLATE_ID(yyvsp[0].name); ;
    break;}
case 295:
#line 764 "CxxParser.y"
{ yyval.name = YACC_BUILT_IN_ID_ID(yyvsp[0].built_in_id); ;
    break;}
case 309:
#line 778 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 310:
#line 780 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 311:
#line 781 "CxxParser.y"
{ yyval.name = YACC_ENUM_SPECIFIER_ID(yyvsp[-1].name, yyvsp[0].enumerators); ;
    break;}
case 312:
#line 782 "CxxParser.y"
{ yyval.name = YACC_ENUM_SPECIFIER_ID(0, yyvsp[0].enumerators); ;
    break;}
case 313:
#line 783 "CxxParser.y"
{ yyval.enumerators = YACC_ENUMERATORS(0, 0); ;
    break;}
case 314:
#line 784 "CxxParser.y"
{ yyval.enumerators = yyvsp[-1].enumerators; ;
    break;}
case 315:
#line 785 "CxxParser.y"
{ yyval.enumerators = yyvsp[-2].enumerators; ;
    break;}
case 316:
#line 786 "CxxParser.y"
{ ;
    break;}
case 317:
#line 787 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-list."); ;
    break;}
case 318:
#line 788 "CxxParser.y"
{ ;
    break;}
case 319:
#line 789 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-definition."); ;
    break;}
case 321:
#line 791 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad enumerator-definition."); ;
    break;}
case 322:
#line 792 "CxxParser.y"
{ yyval.enumerators = YACC_ENUMERATORS(0, 0); ;
    break;}
case 324:
#line 794 "CxxParser.y"
{ yyval.enumerators = YACC_ENUMERATORS(yyvsp[-1].enumerators, yyvsp[0].enumerator); ;
    break;}
case 325:
#line 795 "CxxParser.y"
{ yyval.enumerator = YACC_ENUMERATOR(yyvsp[0].name, 0); ;
    break;}
case 326:
#line 796 "CxxParser.y"
{ yyval.enumerator = YACC_ENUMERATOR(yyvsp[-2].name, yyvsp[0].expression); ;
    break;}
case 328:
#line 799 "CxxParser.y"
{ yyval.name = YACC_NAMESPACE_DEFINITION(yyvsp[-1].name, yyvsp[0].declarations); ;
    break;}
case 329:
#line 800 "CxxParser.y"
{ yyval.name = YACC_NAMESPACE_DEFINITION(0, yyvsp[0].declarations); ;
    break;}
case 330:
#line 801 "CxxParser.y"
{ yyval.declaration = YACC_NAMESPACE_ALIAS_DEFINITION(yyvsp[-3].name, yyvsp[-1].name); ;
    break;}
case 331:
#line 803 "CxxParser.y"
{ yyval.declaration = YACC_USING_DECLARATION(false, yyvsp[-1].name); ;
    break;}
case 332:
#line 804 "CxxParser.y"
{ yyval.declaration = YACC_USING_DECLARATION(true, yyvsp[-1].name); ;
    break;}
case 333:
#line 806 "CxxParser.y"
{ yyval.declaration = YACC_USING_DIRECTIVE(yyvsp[-1].name); ;
    break;}
case 334:
#line 807 "CxxParser.y"
{ yyval.declaration = YACC_ASM_DEFINITION(yyvsp[-2].strings); ;
    break;}
case 335:
#line 808 "CxxParser.y"
{ yyval.name = YACC_LINKAGE_SPECIFIER(yyvsp[-1].strings, yyvsp[0].declaration); ;
    break;}
case 336:
#line 809 "CxxParser.y"
{ yyval.name = YACC_LINKAGE_SPECIFIER(yyvsp[-1].strings, yyvsp[0].declarations); ;
    break;}
case 337:
#line 815 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, yyvsp[-2].expression), yyvsp[0].expression); ;
    break;}
case 338:
#line 816 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 340:
#line 824 "CxxParser.y"
{ yyval.pointer_declarator = YACC_POINTER_DECLARATOR(); ;
    break;}
case 341:
#line 825 "CxxParser.y"
{ yyval.pointer_declarator = YACC_CV_DECLARATOR(yyvsp[-1].pointer_declarator, yyvsp[0].cv_qualifiers); ;
    break;}
case 342:
#line 826 "CxxParser.y"
{ yyval.declarator = yyvsp[0].pointer_declarator; ;
    break;}
case 343:
#line 827 "CxxParser.y"
{ yyval.declarator = YACC_NESTED_DECLARATOR(yyvsp[-1].name, yyvsp[0].declarator); ;
    break;}
case 344:
#line 828 "CxxParser.y"
{ yyval.declarator = YACC_REFERENCE_DECLARATOR(); ;
    break;}
case 345:
#line 829 "CxxParser.y"
{ yyval.declarator = yyvsp[0].declarator; ;
    break;}
case 346:
#line 830 "CxxParser.y"
{ yyval.declarator = YACC_GLOBAL_DECLARATOR(yyvsp[-1].is_template, yyvsp[0].declarator); ;
    break;}
case 347:
#line 831 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[0].declarator, YACC_EPSILON()); ;
    break;}
case 348:
#line 832 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 349:
#line 834 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 350:
#line 835 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 351:
#line 837 "CxxParser.y"
{ yyval.cv_qualifiers = YACC_CV_QUALIFIERS(0, 0); ;
    break;}
case 352:
#line 838 "CxxParser.y"
{ yyval.cv_qualifiers = YACC_CV_QUALIFIERS(yyvsp[-1].cv_qualifiers, yyvsp[0].cv_qualifiers); ;
    break;}
case 355:
#line 842 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 356:
#line 843 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 357:
#line 846 "CxxParser.y"
{ yyval.expression = YACC_EPSILON(); ;
    break;}
case 358:
#line 847 "CxxParser.y"
{ yyval.expression = YACC_POINTER_EXPRESSION(yyvsp[-1].declarator, yyvsp[0].expression); ;
    break;}
case 360:
#line 849 "CxxParser.y"
{ yyval.expression = YACC_EPSILON(); ;
    break;}
case 362:
#line 851 "CxxParser.y"
{ yyval.expression = YACC_CALL_EXPRESSION(yyvsp[-1].expression, yyvsp[0].parenthesised); ;
    break;}
case 363:
#line 852 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-2].expression, 0); ;
    break;}
case 364:
#line 853 "CxxParser.y"
{ yyval.expression = YACC_ARRAY_EXPRESSION(yyvsp[-3].expression, yyvsp[-1].expression); ;
    break;}
case 365:
#line 856 "CxxParser.y"
{ yyval.parenthesised = YACC_PARENTHESISED(yyvsp[-1].parameters, yyvsp[0].cv_qualifiers, 0); ;
    break;}
case 366:
#line 857 "CxxParser.y"
{ yyval.parenthesised = YACC_PARENTHESISED(yyvsp[-2].parameters, yyvsp[-1].cv_qualifiers, yyvsp[0].exception_specification); ;
    break;}
case 367:
#line 858 "CxxParser.y"
{ yyval.parameters = yyvsp[-1].parameters; ;
    break;}
case 368:
#line 860 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(0, 0); ;
    break;}
case 370:
#line 862 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(yyvsp[-1].parameters, YACC_ELLIPSIS_EXPRESSION()); ;
    break;}
case 371:
#line 863 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(0, yyvsp[0].parameter); ;
    break;}
case 372:
#line 864 "CxxParser.y"
{ yyval.parameters = YACC_PARAMETERS(yyvsp[-2].parameters, yyvsp[0].parameter); ;
    break;}
case 374:
#line 872 "CxxParser.y"
{ yyval.expression = YACC_MULTIPLY_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].pointer_declarator, yyvsp[0].expression); ;
    break;}
case 376:
#line 874 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-1].expression, YACC_EPSILON()); ;
    break;}
case 377:
#line 875 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 379:
#line 877 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression); ;
    break;}
case 380:
#line 878 "CxxParser.y"
{ yyval.expression = YACC_ELLIPSIS_EXPRESSION(); ;
    break;}
case 381:
#line 879 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 382:
#line 880 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 383:
#line 881 "CxxParser.y"
{ yyval.parameter = YACC_DECL_SPECIFIER_PARAMETER(yyvsp[0].parameter, yyvsp[-1].decl_specifier_id); ;
    break;}
case 384:
#line 885 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 385:
#line 886 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(yyvsp[0].expression); ;
    break;}
case 386:
#line 888 "CxxParser.y"
{ yyval.parameter = YACC_EXPRESSION_PARAMETER(YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].expression)); ;
    break;}
case 387:
#line 889 "CxxParser.y"
{ yyval.parameter = YACC_DECL_SPECIFIER_PARAMETER(yyvsp[0].parameter, yyvsp[-1].decl_specifier_id); ;
    break;}
case 389:
#line 891 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-1].expression, 0); ;
    break;}
case 390:
#line 892 "CxxParser.y"
{ yyval.expression = YACC_AND_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 393:
#line 900 "CxxParser.y"
{ yyval.expression = YACC_FUNCTION_DEFINITION(yyvsp[-1].expression, yyvsp[0].function_body); ;
    break;}
case 394:
#line 901 "CxxParser.y"
{ yyval.expression = YACC_FUNCTION_DEFINITION(yyvsp[-1].expression, yyvsp[0].function_body); ;
    break;}
case 395:
#line 902 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 396:
#line 903 "CxxParser.y"
{ yyval.expression = YACC_CTOR_DEFINITION(yyvsp[-1].expressions, yyvsp[0].function_body); ;
    break;}
case 397:
#line 904 "CxxParser.y"
{ yyval.expression = YACC_CTOR_DEFINITION(yyvsp[-1].expressions, yyvsp[0].function_body); ;
    break;}
case 398:
#line 905 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 399:
#line 906 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 400:
#line 907 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 401:
#line 908 "CxxParser.y"
{ yyval.function_body = YACC_TRY_FUNCTION_BLOCK(yyvsp[-1].function_body, yyvsp[0].handlers); ;
    break;}
case 402:
#line 909 "CxxParser.y"
{ yyval.function_body = YACC_CTOR_FUNCTION_BLOCK(yyvsp[0].function_body, yyvsp[-1].mem_initializers); ;
    break;}
case 403:
#line 910 "CxxParser.y"
{ yyval.function_body = YACC_FUNCTION_BLOCK(yyvsp[0].statement); ;
    break;}
case 404:
#line 917 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_EXPRESSION_CLAUSE(yyvsp[0].expression); ;
    break;}
case 406:
#line 919 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(yyvsp[-1].initializer_clauses); ;
    break;}
case 407:
#line 920 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(yyvsp[-2].initializer_clauses); ;
    break;}
case 408:
#line 921 "CxxParser.y"
{ yyval.initializer_clause = YACC_INITIALIZER_LIST_CLAUSE(0); ;
    break;}
case 409:
#line 922 "CxxParser.y"
{ yyval.initializer_clause = 0; YACC_UNBANG(yyvsp[-2].bang, "Bad initializer_clause."); ;
    break;}
case 410:
#line 924 "CxxParser.y"
{ yyval.initializer_clause = yyvsp[-6].initializer_clauses; YACC_UNBANG(yyvsp[-2].bang, "Bad initializer_clause."); ;
    break;}
case 411:
#line 925 "CxxParser.y"
{ yyval.initializer_clauses = YACC_INITIALIZER_CLAUSES(0, yyvsp[0].initializer_clause); ;
    break;}
case 412:
#line 926 "CxxParser.y"
{ yyval.initializer_clauses = YACC_INITIALIZER_CLAUSES(yyvsp[-2].initializer_clauses, yyvsp[0].initializer_clause); ;
    break;}
case 413:
#line 927 "CxxParser.y"
{ yyval.initializer_clause = yyvsp[0].initializer_clause; end_search(yyval.initializer_clause); ;
    break;}
case 415:
#line 929 "CxxParser.y"
{ yyval.initializer_clause = yyvsp[0].initializer_clause; ;
    break;}
case 416:
#line 930 "CxxParser.y"
{ yyval.initializer_clause = 0; ;
    break;}
case 417:
#line 945 "CxxParser.y"
{ yyval.mark = mark(); ;
    break;}
case 418:
#line 946 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-1].class_key, yyvsp[0].name); ;
    break;}
case 419:
#line 947 "CxxParser.y"
{ yyval.name = YACC_ELABORATED_TYPE_SPECIFIER(yyvsp[-3].class_key, yyvsp[-2].name); rewind_colon(yyvsp[-1].mark, yyval.name); ;
    break;}
case 420:
#line 948 "CxxParser.y"
{ unmark(yyvsp[-1].base_specifiers); yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-4].class_key, yyvsp[-3].name, yyvsp[-1].base_specifiers); ;
    break;}
case 421:
#line 949 "CxxParser.y"
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-3].class_key, 0, yyvsp[-1].base_specifiers); ;
    break;}
case 422:
#line 950 "CxxParser.y"
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-2].class_key, yyvsp[-1].name, 0); ;
    break;}
case 423:
#line 951 "CxxParser.y"
{ yyval._class = YACC_CLASS_SPECIFIER_ID(yyvsp[-1].class_key, 0, 0); ;
    break;}
case 427:
#line 953 "CxxParser.y"
{ yyval.name = YACC_CLASS_MEMBERS(yyvsp[-2]._class, yyvsp[-1].declarations); ;
    break;}
case 428:
#line 955 "CxxParser.y"
{ yyval.name = YACC_CLASS_MEMBERS(yyvsp[-7]._class, yyvsp[-6].declarations); YACC_UNBANG(yyvsp[-2].bang, "Bad member_specification.opt."); ;
    break;}
case 429:
#line 956 "CxxParser.y"
{ yyval.declarations = YACC_MEMBER_DECLARATIONS(0, 0); ;
    break;}
case 430:
#line 957 "CxxParser.y"
{ yyval.declarations = YACC_MEMBER_DECLARATIONS(yyvsp[-2].declarations, YACC_COMPILE_DECLARATION(yyvsp[-1].utility, yyvsp[0].declaration)); ;
    break;}
case 431:
#line 959 "CxxParser.y"
{ yyval.declarations = yyvsp[-6].declarations; YACC_UNBANG(yyvsp[-2].bang, "Bad member-declaration."); ;
    break;}
case 432:
#line 960 "CxxParser.y"
{ yyval.declaration = YACC_LINED_DECLARATION(yyvsp[0].declaration, yyvsp[-1].line); end_search(yyval.declaration); ;
    break;}
case 434:
#line 962 "CxxParser.y"
{ yyval.declaration = yyvsp[0].declaration; ;
    break;}
case 435:
#line 963 "CxxParser.y"
{ yyval.declaration = 0; ;
    break;}
case 437:
#line 965 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 438:
#line 966 "CxxParser.y"
{ yyval.declaration = YACC_SIMPLE_DECLARATION(yyvsp[0].expression); ;
    break;}
case 441:
#line 977 "CxxParser.y"
{ yyval.expression = YACC_EXPRESSION(0); ;
    break;}
case 443:
#line 979 "CxxParser.y"
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 444:
#line 980 "CxxParser.y"
{ yyval.expression = yyvsp[-1].expressions; ;
    break;}
case 445:
#line 981 "CxxParser.y"
{ yyval.expression = YACC_DECL_SPECIFIER_EXPRESSION(yyvsp[0].expression, yyvsp[-1].decl_specifier_id); ;
    break;}
case 446:
#line 982 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(YACC_EXPRESSIONS(0, yyvsp[-2].expression), yyvsp[0].expression); ;
    break;}
case 447:
#line 983 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 448:
#line 984 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 451:
#line 989 "CxxParser.y"
{ yyval.declaration = YACC_ACCESSIBILITY_SPECIFIER(yyvsp[-1].access_specifier); ;
    break;}
case 452:
#line 990 "CxxParser.y"
{ yyval.expression = YACC_BIT_FIELD_EXPRESSION(yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 453:
#line 991 "CxxParser.y"
{ yyval.expression = YACC_BIT_FIELD_EXPRESSION(0, yyvsp[0].expression); ;
    break;}
case 455:
#line 994 "CxxParser.y"
{ yyval.expression = YACC_CONDITIONAL_EXPRESSION(yyvsp[-4].expression, yyvsp[-2].expression, yyvsp[0].expression); ;
    break;}
case 457:
#line 996 "CxxParser.y"
{ yyval.expression = YACC_ASSIGNMENT_EXPRESSION(yyvsp[-2].expression, yyvsp[-1].keyword, yyvsp[0].initializer_clause); ;
    break;}
case 458:
#line 1002 "CxxParser.y"
{ yyval.base_specifiers = YACC_BASE_SPECIFIERS(0, yyvsp[0].base_specifier); ;
    break;}
case 459:
#line 1003 "CxxParser.y"
{ yyval.base_specifiers = YACC_BASE_SPECIFIERS(yyvsp[-2].base_specifiers, yyvsp[0].base_specifier); ;
    break;}
case 460:
#line 1004 "CxxParser.y"
{ yyval.base_specifier = YACC_BASE_SPECIFIER(yyvsp[0].name); ;
    break;}
case 461:
#line 1005 "CxxParser.y"
{ yyval.base_specifier = YACC_ACCESS_BASE_SPECIFIER(yyvsp[0].base_specifier, yyvsp[-1].access_specifier); ;
    break;}
case 462:
#line 1006 "CxxParser.y"
{ yyval.base_specifier = YACC_VIRTUAL_BASE_SPECIFIER(yyvsp[0].base_specifier); ;
    break;}
case 466:
#line 1012 "CxxParser.y"
{ yyval.name = YACC_CONVERSION_FUNCTION_ID(yyvsp[0].expression); ;
    break;}
case 467:
#line 1013 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 468:
#line 1014 "CxxParser.y"
{ yyval.expression = YACC_TYPED_EXPRESSION(yyvsp[-1].name, yyvsp[0].expression); ;
    break;}
case 469:
#line 1022 "CxxParser.y"
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(0, 0); ;
    break;}
case 471:
#line 1024 "CxxParser.y"
{ yyval.mem_initializers = yyvsp[0].mem_initializers; ;
    break;}
case 472:
#line 1025 "CxxParser.y"
{ yyval.mem_initializers = yyvsp[-2].mem_initializers; YACC_UNBANG(yyvsp[-1].bang, "Bad ctor-initializer."); ;
    break;}
case 473:
#line 1026 "CxxParser.y"
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(0, yyvsp[0].mem_initializer); ;
    break;}
case 474:
#line 1027 "CxxParser.y"
{ yyval.mem_initializers = YACC_MEM_INITIALIZERS(yyvsp[-1].mem_initializers, yyvsp[0].mem_initializer); ;
    break;}
case 476:
#line 1029 "CxxParser.y"
{ YACC_UNBANG(yyvsp[-2].bang, "Bad mem-initializer."); ;
    break;}
case 477:
#line 1030 "CxxParser.y"
{ yyval.mem_initializer = YACC_MEM_INITIALIZER(yyvsp[-3].name, yyvsp[-1].expressions); ;
    break;}
case 479:
#line 1036 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_FUNCTION_ID(yyvsp[0].name); ;
    break;}
case 480:
#line 1046 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_NEW_ID(); ;
    break;}
case 481:
#line 1047 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_DELETE_ID(); ;
    break;}
case 482:
#line 1052 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ADD_ID(); ;
    break;}
case 483:
#line 1053 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_SUB_ID(); ;
    break;}
case 484:
#line 1054 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_MUL_ID(); ;
    break;}
case 485:
#line 1055 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_DIV_ID(); ;
    break;}
case 486:
#line 1056 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_MOD_ID(); ;
    break;}
case 487:
#line 1057 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_XOR_ID(); ;
    break;}
case 488:
#line 1058 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_BIT_AND_ID(); ;
    break;}
case 489:
#line 1059 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_BIT_OR_ID(); ;
    break;}
case 490:
#line 1060 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_BIT_NOT_ID(); ;
    break;}
case 491:
#line 1061 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LOG_NOT_ID(); ;
    break;}
case 492:
#line 1062 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_ID(); ;
    break;}
case 493:
#line 1063 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LT_ID(); ;
    break;}
case 494:
#line 1064 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_GT_ID(); ;
    break;}
case 495:
#line 1065 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_ADD_ID(); ;
    break;}
case 496:
#line 1066 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_SUB_ID(); ;
    break;}
case 497:
#line 1067 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_MUL_ID(); ;
    break;}
case 498:
#line 1068 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_DIV_ID(); ;
    break;}
case 499:
#line 1069 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_MOD_ID(); ;
    break;}
case 500:
#line 1070 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_XOR_ID(); ;
    break;}
case 501:
#line 1071 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_BIT_AND_ID(); ;
    break;}
case 502:
#line 1072 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_BIT_OR_ID(); ;
    break;}
case 503:
#line 1073 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_SHL_ID(); ;
    break;}
case 504:
#line 1074 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_SHR_ID(); ;
    break;}
case 505:
#line 1075 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_SHR_ID(); ;
    break;}
case 506:
#line 1076 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ASS_SHL_ID(); ;
    break;}
case 507:
#line 1077 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_EQ_ID(); ;
    break;}
case 508:
#line 1078 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_NE_ID(); ;
    break;}
case 509:
#line 1079 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LE_ID(); ;
    break;}
case 510:
#line 1080 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_GE_ID(); ;
    break;}
case 511:
#line 1081 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LOG_AND_ID(); ;
    break;}
case 512:
#line 1082 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_LOG_OR_ID(); ;
    break;}
case 513:
#line 1083 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_INC_ID(); ;
    break;}
case 514:
#line 1084 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_DEC_ID(); ;
    break;}
case 515:
#line 1085 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_COMMA_ID(); ;
    break;}
case 516:
#line 1086 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ARROW_STAR_ID(); ;
    break;}
case 517:
#line 1087 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_ARROW_ID(); ;
    break;}
case 518:
#line 1088 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_CALL_ID(); ;
    break;}
case 519:
#line 1089 "CxxParser.y"
{ yyval.name = YACC_OPERATOR_INDEX_ID(); ;
    break;}
case 520:
#line 1094 "CxxParser.y"
{ yyval.declaration = YACC_TEMPLATE_DECLARATION(yyvsp[-1].template_parameters, yyvsp[0].declaration); ;
    break;}
case 521:
#line 1095 "CxxParser.y"
{ yyval.declaration = YACC_DECL_SPECIFIER_DECLARATION(yyvsp[0].declaration, yyvsp[-1].decl_specifier_id); ;
    break;}
case 522:
#line 1096 "CxxParser.y"
{ yyval.template_parameters = yyvsp[-1].template_parameters; ;
    break;}
case 523:
#line 1097 "CxxParser.y"
{ yyval.template_parameters = YACC_TEMPLATE_PARAMETERS(0, yyvsp[0].template_parameter); ;
    break;}
case 524:
#line 1098 "CxxParser.y"
{ yyval.template_parameters = YACC_TEMPLATE_PARAMETERS(yyvsp[-2].template_parameters, yyvsp[0].template_parameter); ;
    break;}
case 525:
#line 1099 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_SIMPLE_TYPE_PARAMETER(yyvsp[0].simple_type_parameter, 0); ;
    break;}
case 526:
#line 1100 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_SIMPLE_TYPE_PARAMETER(yyvsp[-2].simple_type_parameter, yyvsp[0].expression); ;
    break;}
case 527:
#line 1101 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_TEMPLATED_PARAMETER(yyvsp[0].templated_type_parameter, 0); ;
    break;}
case 528:
#line 1102 "CxxParser.y"
{ yyval.template_parameter = YACC_INIT_TEMPLATED_PARAMETER(yyvsp[-2].templated_type_parameter, yyvsp[0].name); ;
    break;}
case 529:
#line 1103 "CxxParser.y"
{ yyval.template_parameter = YACC_TEMPLATE_PARAMETER(yyvsp[0].parameter); ;
    break;}
case 530:
#line 1104 "CxxParser.y"
{ yyval.template_parameter = 0; YACC_UNBANG(yyvsp[-1].bang, "Bad template-parameter."); ;
    break;}
case 531:
#line 1105 "CxxParser.y"
{ yyval.simple_type_parameter = YACC_CLASS_TYPE_PARAMETER(0); ;
    break;}
case 532:
#line 1107 "CxxParser.y"
{ yyval.simple_type_parameter = YACC_TYPENAME_TYPE_PARAMETER(0); ;
    break;}
case 533:
#line 1109 "CxxParser.y"
{ yyval.templated_type_parameter = YACC_TEMPLATED_TYPE_PARAMETER(yyvsp[-1].template_parameters, 0); ;
    break;}
case 534:
#line 1110 "CxxParser.y"
{ yyval.templated_type_parameter = YACC_TEMPLATED_TYPE_PARAMETER(yyvsp[-2].template_parameters, yyvsp[0].name); ;
    break;}
case 535:
#line 1111 "CxxParser.y"
{ yyval.name = YACC_TEMPLATE_NAME(yyvsp[-3].name, yyvsp[-1].template_arguments); ;
    break;}
case 536:
#line 1112 "CxxParser.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 537:
#line 1116 "CxxParser.y"
{ yyval.template_arguments = YACC_TEMPLATE_ARGUMENTS(0, yyvsp[0].template_argument); ;
    break;}
case 538:
#line 1117 "CxxParser.y"
{ yyval.template_arguments = YACC_TEMPLATE_ARGUMENTS(yyvsp[-2].template_arguments, yyvsp[0].template_argument); ;
    break;}
case 539:
#line 1118 "CxxParser.y"
{ yyval.template_argument = YACC_TEMPLATE_ARGUMENT(yyvsp[0].parameter); ;
    break;}
case 540:
#line 1128 "CxxParser.y"
{ yyval.declaration = YACC_EXPLICIT_SPECIALIZATION(yyvsp[0].declaration); ;
    break;}
case 541:
#line 1133 "CxxParser.y"
{ yyval.function_body = YACC_TRY_BLOCK(yyvsp[-1].statement, yyvsp[0].handlers); ;
    break;}
case 542:
#line 1135 "CxxParser.y"
{ yyval.handlers = YACC_HANDLERS(0, yyvsp[0].handler); ;
    break;}
case 543:
#line 1136 "CxxParser.y"
{ yyval.handlers = YACC_HANDLERS(yyvsp[0].handlers, yyvsp[-1].handler); ;
    break;}
case 544:
#line 1137 "CxxParser.y"
{ yyval.handler = YACC_HANDLER(yyvsp[-2].exception_declaration, yyvsp[0].statement); ;
    break;}
case 545:
#line 1138 "CxxParser.y"
{ yyval.exception_declaration = YACC_EXCEPTION_DECLARATION(yyvsp[0].parameter); ;
    break;}
case 546:
#line 1140 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(0); ;
    break;}
case 547:
#line 1141 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 548:
#line 1142 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(0); ;
    break;}
case 549:
#line 1143 "CxxParser.y"
{ yyval.expression = YACC_THROW_EXPRESSION(yyvsp[0].expression); ;
    break;}
case 550:
#line 1144 "CxxParser.y"
{ yyval.exception_specification = YACC_EXCEPTION_SPECIFICATION(0); ;
    break;}
case 551:
#line 1145 "CxxParser.y"
{ yyval.exception_specification = YACC_EXCEPTION_SPECIFICATION(yyvsp[-1].expressions); ;
    break;}
case 552:
#line 1146 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(0, yyvsp[0].expression); ;
    break;}
case 553:
#line 1147 "CxxParser.y"
{ yyval.expressions = YACC_EXPRESSIONS(yyvsp[-2].expressions, yyvsp[0].expression); ;
    break;}
case 554:
#line 1152 "CxxParser.y"
{ yyerrok; yyclearin; advance_search(); ;
    break;}
case 555:
#line 1153 "CxxParser.y"
{ yyval.bang = YACC_BANG(); ;
    break;}
case 556:
#line 1154 "CxxParser.y"
{ yyval.mark = mark(); ;
    break;}
case 557:
#line 1155 "CxxParser.y"
{ yyval.nest = nest(); ;
    break;}
case 558:
#line 1156 "CxxParser.y"
{ yyval.line = YACC_LINE(); start_search(false); ;
    break;}
case 559:
#line 1157 "CxxParser.y"
{ yyval.line = YACC_LINE(); start_search(true); ;
    break;}
case 560:
#line 1158 "CxxParser.y"
{ yyval.utility = YACC_UTILITY_MODE(); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1160 "CxxParser.y"

#include "CxxParsing.cxx"
/*EndTester*/
